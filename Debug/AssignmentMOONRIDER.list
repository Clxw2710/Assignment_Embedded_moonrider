
AssignmentMOONRIDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008de0  08008de0  00009de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009270  08009270  0000b1d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009270  08009270  0000a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009278  08009278  0000b1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009278  08009278  0000a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800927c  0800927c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08009280  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d0  2**0
                  CONTENTS
 10 .bss          00000334  200001d0  200001d0  0000b1d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  0000b1d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d879  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6f  00000000  00000000  00018a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0001a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e6  00000000  00000000  0001b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ec2  00000000  00000000  0001bf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee0f  00000000  00000000  0003de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0a1  00000000  00000000  0004cc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119cf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049f4  00000000  00000000  00119d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0011e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dc4 	.word	0x08008dc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08008dc4 	.word	0x08008dc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Simulink_model_assignment_step>:
RT_MODEL_Simulink_model_assig_T *const Simulink_model_assignment_M =
  &Simulink_model_assignment_M_;

/* Model step function */
void Simulink_model_assignment_step(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Chart: '<Root>/Chart' incorporates:
   *  Inport: '<Root>/left_button_1s'
   *  Inport: '<Root>/right_button_1s'
   */
  switch (Simulink_model_assignment_DW.is_c3_Simulink_model_assignment) {
 8000fe8:	4ba2      	ldr	r3, [pc, #648]	@ (8001274 <Simulink_model_assignment_step+0x290>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	f000 810b 	beq.w	8001208 <Simulink_model_assignment_step+0x224>
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	f300 81cb 	bgt.w	800138e <Simulink_model_assignment_step+0x3aa>
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d002      	beq.n	8001002 <Simulink_model_assignment_step+0x1e>
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d04a      	beq.n	8001096 <Simulink_model_assignment_step+0xb2>
 8001000:	e1c5      	b.n	800138e <Simulink_model_assignment_step+0x3aa>
   case Simulink_model_ass_IN_HAZARD_ON:
    if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001002:	4b9d      	ldr	r3, [pc, #628]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 8001004:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	f7ff fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d12a      	bne.n	8001070 <Simulink_model_assignment_step+0x8c>
        (!(Simulink_model_assignment_U.right_button_1s != 0.0))) {
 800101a:	4b97      	ldr	r3, [pc, #604]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 800101c:	e9d3 0100 	ldrd	r0, r1, [r3]
    if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	f7ff fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01e      	beq.n	8001070 <Simulink_model_assignment_step+0x8c>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 8001032:	4b90      	ldr	r3, [pc, #576]	@ (8001274 <Simulink_model_assignment_step+0x290>)
 8001034:	2202      	movs	r2, #2
 8001036:	701a      	strb	r2, [r3, #0]
        Simulink_mode_IN_LEFT_INDICATOR;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 0.0;
 8001038:	4990      	ldr	r1, [pc, #576]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 8001046:	498d      	ldr	r1, [pc, #564]	@ (800127c <Simulink_model_assignment_step+0x298>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b8c      	ldr	r3, [pc, #560]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 800104e:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 8001052:	498a      	ldr	r1, [pc, #552]	@ (800127c <Simulink_model_assignment_step+0x298>)
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 2.0;
 8001060:	4986      	ldr	r1, [pc, #536]	@ (800127c <Simulink_model_assignment_step+0x298>)
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800106a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      Simulink_model_assignment_Y.left_led_blink = 1.0;

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 3.0;
    }
    break;
 800106e:	e247      	b.n	8001500 <Simulink_model_assignment_step+0x51c>
      Simulink_model_assignment_Y.right_led_blink = 1.0;
 8001070:	4982      	ldr	r1, [pc, #520]	@ (800127c <Simulink_model_assignment_step+0x298>)
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b82      	ldr	r3, [pc, #520]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 8001078:	e9c1 2302 	strd	r2, r3, [r1, #8]
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 800107c:	497f      	ldr	r1, [pc, #508]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b7f      	ldr	r3, [pc, #508]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 8001084:	e9c1 2300 	strd	r2, r3, [r1]
      Simulink_model_assignment_Y.uart_log_code = 3.0;
 8001088:	497c      	ldr	r1, [pc, #496]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b7d      	ldr	r3, [pc, #500]	@ (8001284 <Simulink_model_assignment_step+0x2a0>)
 8001090:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8001094:	e234      	b.n	8001500 <Simulink_model_assignment_step+0x51c>

   case Simulink_mode_IN_LEFT_INDICATOR:
    if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001096:	4b78      	ldr	r3, [pc, #480]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 8001098:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	f7ff fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d12b      	bne.n	8001106 <Simulink_model_assignment_step+0x122>
        (!(Simulink_model_assignment_U.right_button_1s != 0.0))) {
 80010ae:	4b72      	ldr	r3, [pc, #456]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 80010b0:	e9d3 0100 	ldrd	r0, r1, [r3]
    if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	f7ff fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d01f      	beq.n	8001106 <Simulink_model_assignment_step+0x122>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 80010c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001274 <Simulink_model_assignment_step+0x290>)
 80010c8:	2203      	movs	r2, #3
 80010ca:	701a      	strb	r2, [r3, #0]
        Simulink_model_assignmen_IN_OFF;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 0.0;
 80010cc:	496b      	ldr	r1, [pc, #428]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 0.0;
 80010da:	4968      	ldr	r1, [pc, #416]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 80010e8:	4964      	ldr	r1, [pc, #400]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 0.0;
 80010f6:	4961      	ldr	r1, [pc, #388]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001104:	e07f      	b.n	8001206 <Simulink_model_assignment_step+0x222>
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001106:	4b5c      	ldr	r3, [pc, #368]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 8001108:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f7ff fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d121      	bne.n	8001162 <Simulink_model_assignment_step+0x17e>
               (Simulink_model_assignment_U.right_button_1s != 0.0)) {
 800111e:	4b56      	ldr	r3, [pc, #344]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 8001120:	e9d3 0100 	ldrd	r0, r1, [r3]
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f7ff fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d115      	bne.n	8001162 <Simulink_model_assignment_step+0x17e>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 8001136:	4b4f      	ldr	r3, [pc, #316]	@ (8001274 <Simulink_model_assignment_step+0x290>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
        Simulink_model_ass_IN_HAZARD_ON;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 1.0;
 800113c:	494f      	ldr	r1, [pc, #316]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 8001144:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 8001148:	494c      	ldr	r1, [pc, #304]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b4c      	ldr	r3, [pc, #304]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 8001150:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 3.0;
 8001154:	4949      	ldr	r1, [pc, #292]	@ (800127c <Simulink_model_assignment_step+0x298>)
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b4a      	ldr	r3, [pc, #296]	@ (8001284 <Simulink_model_assignment_step+0x2a0>)
 800115c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001160:	e051      	b.n	8001206 <Simulink_model_assignment_step+0x222>
    } else if ((Simulink_model_assignment_U.right_button_1s != 0.0) &&
 8001162:	4b45      	ldr	r3, [pc, #276]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 8001164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f7ff fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d129      	bne.n	80011ce <Simulink_model_assignment_step+0x1ea>
               (!(Simulink_model_assignment_U.left_button_1s != 0.0))) {
 800117a:	4b3f      	ldr	r3, [pc, #252]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 800117c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    } else if ((Simulink_model_assignment_U.right_button_1s != 0.0) &&
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	f7ff fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01d      	beq.n	80011ce <Simulink_model_assignment_step+0x1ea>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 8001192:	4b38      	ldr	r3, [pc, #224]	@ (8001274 <Simulink_model_assignment_step+0x290>)
 8001194:	2204      	movs	r2, #4
 8001196:	701a      	strb	r2, [r3, #0]
        Simulink_mod_IN_RIGHT_INDICATOR;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 1.0;
 8001198:	4938      	ldr	r1, [pc, #224]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 80011a0:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 0.0;
 80011a4:	4935      	ldr	r1, [pc, #212]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 80011b2:	4932      	ldr	r1, [pc, #200]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 1.0;
 80011c0:	492e      	ldr	r1, [pc, #184]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 80011c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80011cc:	e01b      	b.n	8001206 <Simulink_model_assignment_step+0x222>
    } else {
      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 0.0;
 80011ce:	492b      	ldr	r1, [pc, #172]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 80011dc:	4927      	ldr	r1, [pc, #156]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 80011e4:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 80011e8:	4924      	ldr	r1, [pc, #144]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 2.0;
 80011f6:	4921      	ldr	r1, [pc, #132]	@ (800127c <Simulink_model_assignment_step+0x298>)
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001200:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }
    break;
 8001204:	e17c      	b.n	8001500 <Simulink_model_assignment_step+0x51c>
 8001206:	e17b      	b.n	8001500 <Simulink_model_assignment_step+0x51c>

   case Simulink_model_assignmen_IN_OFF:
    if ((Simulink_model_assignment_U.right_button_1s != 0.0) &&
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 800120a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	f7ff fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d133      	bne.n	8001288 <Simulink_model_assignment_step+0x2a4>
        (!(Simulink_model_assignment_U.left_button_1s != 0.0))) {
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <Simulink_model_assignment_step+0x294>)
 8001222:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    if ((Simulink_model_assignment_U.right_button_1s != 0.0) &&
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	f7ff fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d027      	beq.n	8001288 <Simulink_model_assignment_step+0x2a4>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <Simulink_model_assignment_step+0x290>)
 800123a:	2204      	movs	r2, #4
 800123c:	701a      	strb	r2, [r3, #0]
        Simulink_mod_IN_RIGHT_INDICATOR;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 1.0;
 800123e:	490f      	ldr	r1, [pc, #60]	@ (800127c <Simulink_model_assignment_step+0x298>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 8001246:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 0.0;
 800124a:	490c      	ldr	r1, [pc, #48]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 8001258:	4908      	ldr	r1, [pc, #32]	@ (800127c <Simulink_model_assignment_step+0x298>)
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 1.0;
 8001266:	4905      	ldr	r1, [pc, #20]	@ (800127c <Simulink_model_assignment_step+0x298>)
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <Simulink_model_assignment_step+0x29c>)
 800126e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001272:	e08b      	b.n	800138c <Simulink_model_assignment_step+0x3a8>
 8001274:	200001ec 	.word	0x200001ec
 8001278:	200001f0 	.word	0x200001f0
 800127c:	20000200 	.word	0x20000200
 8001280:	3ff00000 	.word	0x3ff00000
 8001284:	40080000 	.word	0x40080000
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001288:	4b9e      	ldr	r3, [pc, #632]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 800128a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	f7ff fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d12a      	bne.n	80012f6 <Simulink_model_assignment_step+0x312>
               (!(Simulink_model_assignment_U.right_button_1s != 0.0))) {
 80012a0:	4b98      	ldr	r3, [pc, #608]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 80012a2:	e9d3 0100 	ldrd	r0, r1, [r3]
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	f7ff fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01e      	beq.n	80012f6 <Simulink_model_assignment_step+0x312>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 80012b8:	4b93      	ldr	r3, [pc, #588]	@ (8001508 <Simulink_model_assignment_step+0x524>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
        Simulink_mode_IN_LEFT_INDICATOR;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 0.0;
 80012be:	4993      	ldr	r1, [pc, #588]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 80012cc:	498f      	ldr	r1, [pc, #572]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b8f      	ldr	r3, [pc, #572]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 80012d4:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 80012d8:	498c      	ldr	r1, [pc, #560]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 2.0;
 80012e6:	4989      	ldr	r1, [pc, #548]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80012f4:	e04a      	b.n	800138c <Simulink_model_assignment_step+0x3a8>
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 80012f6:	4b83      	ldr	r3, [pc, #524]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 80012f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f7ff fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d121      	bne.n	8001352 <Simulink_model_assignment_step+0x36e>
               (Simulink_model_assignment_U.right_button_1s != 0.0)) {
 800130e:	4b7d      	ldr	r3, [pc, #500]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 8001310:	e9d3 0100 	ldrd	r0, r1, [r3]
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f7ff fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d115      	bne.n	8001352 <Simulink_model_assignment_step+0x36e>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 8001326:	4b78      	ldr	r3, [pc, #480]	@ (8001508 <Simulink_model_assignment_step+0x524>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
        Simulink_model_ass_IN_HAZARD_ON;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 1.0;
 800132c:	4977      	ldr	r1, [pc, #476]	@ (800150c <Simulink_model_assignment_step+0x528>)
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b77      	ldr	r3, [pc, #476]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 8001334:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 8001338:	4974      	ldr	r1, [pc, #464]	@ (800150c <Simulink_model_assignment_step+0x528>)
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b74      	ldr	r3, [pc, #464]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 8001340:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 3.0;
 8001344:	4971      	ldr	r1, [pc, #452]	@ (800150c <Simulink_model_assignment_step+0x528>)
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b72      	ldr	r3, [pc, #456]	@ (8001514 <Simulink_model_assignment_step+0x530>)
 800134c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001350:	e01c      	b.n	800138c <Simulink_model_assignment_step+0x3a8>
    } else {
      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 0.0;
 8001352:	496e      	ldr	r1, [pc, #440]	@ (800150c <Simulink_model_assignment_step+0x528>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 0.0;
 8001360:	496a      	ldr	r1, [pc, #424]	@ (800150c <Simulink_model_assignment_step+0x528>)
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 800136e:	4967      	ldr	r1, [pc, #412]	@ (800150c <Simulink_model_assignment_step+0x528>)
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 0.0;
 800137c:	4963      	ldr	r1, [pc, #396]	@ (800150c <Simulink_model_assignment_step+0x528>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }
    break;
 800138a:	e0b9      	b.n	8001500 <Simulink_model_assignment_step+0x51c>
 800138c:	e0b8      	b.n	8001500 <Simulink_model_assignment_step+0x51c>

   default:
    /* case IN_RIGHT_INDICATOR: */
    if ((Simulink_model_assignment_U.right_button_1s != 0.0) &&
 800138e:	4b5d      	ldr	r3, [pc, #372]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 8001390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	f7ff fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d12b      	bne.n	80013fe <Simulink_model_assignment_step+0x41a>
        (!(Simulink_model_assignment_U.left_button_1s != 0.0))) {
 80013a6:	4b57      	ldr	r3, [pc, #348]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 80013a8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    if ((Simulink_model_assignment_U.right_button_1s != 0.0) &&
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	f7ff fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01f      	beq.n	80013fe <Simulink_model_assignment_step+0x41a>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 80013be:	4b52      	ldr	r3, [pc, #328]	@ (8001508 <Simulink_model_assignment_step+0x524>)
 80013c0:	2203      	movs	r2, #3
 80013c2:	701a      	strb	r2, [r3, #0]
        Simulink_model_assignmen_IN_OFF;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 0.0;
 80013c4:	4951      	ldr	r1, [pc, #324]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 0.0;
 80013d2:	494e      	ldr	r1, [pc, #312]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 80013e0:	494a      	ldr	r1, [pc, #296]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 0.0;
 80013ee:	4947      	ldr	r1, [pc, #284]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80013fc:	e07f      	b.n	80014fe <Simulink_model_assignment_step+0x51a>
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 80013fe:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 8001400:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	f7ff fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d121      	bne.n	800145a <Simulink_model_assignment_step+0x476>
               (Simulink_model_assignment_U.right_button_1s != 0.0)) {
 8001416:	4b3b      	ldr	r3, [pc, #236]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 8001418:	e9d3 0100 	ldrd	r0, r1, [r3]
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	f7ff fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d115      	bne.n	800145a <Simulink_model_assignment_step+0x476>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 800142e:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <Simulink_model_assignment_step+0x524>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
        Simulink_model_ass_IN_HAZARD_ON;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 1.0;
 8001434:	4935      	ldr	r1, [pc, #212]	@ (800150c <Simulink_model_assignment_step+0x528>)
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 800143c:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 8001440:	4932      	ldr	r1, [pc, #200]	@ (800150c <Simulink_model_assignment_step+0x528>)
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 8001448:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 3.0;
 800144c:	492f      	ldr	r1, [pc, #188]	@ (800150c <Simulink_model_assignment_step+0x528>)
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <Simulink_model_assignment_step+0x530>)
 8001454:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001458:	e051      	b.n	80014fe <Simulink_model_assignment_step+0x51a>
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 800145a:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 800145c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	f7ff fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d12a      	bne.n	80014c8 <Simulink_model_assignment_step+0x4e4>
               (!(Simulink_model_assignment_U.right_button_1s != 0.0))) {
 8001472:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <Simulink_model_assignment_step+0x520>)
 8001474:	e9d3 0100 	ldrd	r0, r1, [r3]
    } else if ((Simulink_model_assignment_U.left_button_1s != 0.0) &&
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	f7ff fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01e      	beq.n	80014c8 <Simulink_model_assignment_step+0x4e4>
      Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <Simulink_model_assignment_step+0x524>)
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
        Simulink_mode_IN_LEFT_INDICATOR;

      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 0.0;
 8001490:	491e      	ldr	r1, [pc, #120]	@ (800150c <Simulink_model_assignment_step+0x528>)
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 1.0;
 800149e:	491b      	ldr	r1, [pc, #108]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 80014aa:	4918      	ldr	r1, [pc, #96]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 2.0;
 80014b8:	4914      	ldr	r1, [pc, #80]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80014c6:	e01a      	b.n	80014fe <Simulink_model_assignment_step+0x51a>
    } else {
      /* Outport: '<Root>/right_led_blink' */
      Simulink_model_assignment_Y.right_led_blink = 1.0;
 80014c8:	4910      	ldr	r1, [pc, #64]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 80014d0:	e9c1 2302 	strd	r2, r3, [r1, #8]

      /* Outport: '<Root>/left_led_blink' */
      Simulink_model_assignment_Y.left_led_blink = 0.0;
 80014d4:	490d      	ldr	r1, [pc, #52]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9c1 2300 	strd	r2, r3, [r1]

      /* Outport: '<Root>/hazard_blink' */
      Simulink_model_assignment_Y.hazard_blink = 0.0;
 80014e2:	490a      	ldr	r1, [pc, #40]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 2304 	strd	r2, r3, [r1, #16]

      /* Outport: '<Root>/uart_log_code' */
      Simulink_model_assignment_Y.uart_log_code = 1.0;
 80014f0:	4906      	ldr	r1, [pc, #24]	@ (800150c <Simulink_model_assignment_step+0x528>)
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <Simulink_model_assignment_step+0x52c>)
 80014f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }
    break;
 80014fc:	e7ff      	b.n	80014fe <Simulink_model_assignment_step+0x51a>
 80014fe:	bf00      	nop
  }

  /* End of Chart: '<Root>/Chart' */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200001f0 	.word	0x200001f0
 8001508:	200001ec 	.word	0x200001ec
 800150c:	20000200 	.word	0x20000200
 8001510:	3ff00000 	.word	0x3ff00000
 8001514:	40080000 	.word	0x40080000

08001518 <Simulink_model_assignment_initialize>:

/* Model initialize function */
void Simulink_model_assignment_initialize(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* Chart: '<Root>/Chart' */
  Simulink_model_assignment_DW.is_c3_Simulink_model_assignment =
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <Simulink_model_assignment_initialize+0x14>)
 800151e:	2203      	movs	r2, #3
 8001520:	701a      	strb	r2, [r3, #0]
    Simulink_model_assignmen_IN_OFF;
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	200001ec 	.word	0x200001ec

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  HAL_Init();
 8001534:	f000 fd5c 	bl	8001ff0 <HAL_Init>
  SystemClock_Config();
 8001538:	f000 f914 	bl	8001764 <SystemClock_Config>

  MX_GPIO_Init();
 800153c:	f000 f97c 	bl	8001838 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001540:	f000 f9c4 	bl	80018cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001544:	f000 fa10 	bl	8001968 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001548:	f000 fa74 	bl	8001a34 <MX_USART2_UART_Init>

  HAL_TIM_Base_Start_IT(&htim3); // Start TIM3 interrupt (100ms)
 800154c:	4807      	ldr	r0, [pc, #28]	@ (800156c <main+0x3c>)
 800154e:	f001 fd2d 	bl	8002fac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Left LED PWM
 8001552:	2108      	movs	r1, #8
 8001554:	4806      	ldr	r0, [pc, #24]	@ (8001570 <main+0x40>)
 8001556:	f001 fde9 	bl	800312c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Right LED PWM
 800155a:	210c      	movs	r1, #12
 800155c:	4804      	ldr	r0, [pc, #16]	@ (8001570 <main+0x40>)
 800155e:	f001 fde5 	bl	800312c <HAL_TIM_PWM_Start>

  Simulink_model_assignment_initialize(); // Initialize Stateflow model
 8001562:	f7ff ffd9 	bl	8001518 <Simulink_model_assignment_initialize>

  while (1)
 8001566:	bf00      	nop
 8001568:	e7fd      	b.n	8001566 <main+0x36>
 800156a:	bf00      	nop
 800156c:	20000220 	.word	0x20000220
 8001570:	20000268 	.word	0x20000268

08001574 <HAL_TIM_PeriodElapsedCallback>:

/**
  * @brief TIM3 Interrupt Callback (runs every 100ms)
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001578:	b08d      	sub	sp, #52	@ 0x34
 800157a:	af08      	add	r7, sp, #32
 800157c:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM3)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a69      	ldr	r2, [pc, #420]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	f040 80c9 	bne.w	800171c <HAL_TIM_PeriodElapsedCallback+0x1a8>
  {
    /* === 1. Button ≥1s detection === */
    uint8_t left_state = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // Active low
 800158a:	2101      	movs	r1, #1
 800158c:	4867      	ldr	r0, [pc, #412]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800158e:	f000 ffdb 	bl	8002548 <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	73fb      	strb	r3, [r7, #15]
    uint8_t right_state = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80015a0:	2102      	movs	r1, #2
 80015a2:	4862      	ldr	r0, [pc, #392]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015a4:	f000 ffd0 	bl	8002548 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	73bb      	strb	r3, [r7, #14]

    static uint8_t left_prev = 0;
    static uint8_t right_prev = 0;

    if(left_state)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d017      	beq.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x78>
    {
      if(left_prev == 0) left_button_counter = 0; // New press
 80015bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x56>
 80015c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
      left_button_counter++;
 80015ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a58      	ldr	r2, [pc, #352]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015d2:	6013      	str	r3, [r2, #0]
      if(left_button_counter >= 10)
 80015d4:	4b57      	ldr	r3, [pc, #348]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b09      	cmp	r3, #9
 80015da:	d903      	bls.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x70>
        left_button_pressed_1s = 1;
 80015dc:	4b56      	ldr	r3, [pc, #344]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e009      	b.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x84>
      else
        left_button_pressed_1s = 0;
 80015e4:	4b54      	ldr	r3, [pc, #336]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	e005      	b.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x84>
    }
    else
    {
      left_button_counter = 0;
 80015ec:	4b51      	ldr	r3, [pc, #324]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
      left_button_pressed_1s = 0;
 80015f2:	4b51      	ldr	r3, [pc, #324]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    }
    left_prev = left_state;
 80015f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	7013      	strb	r3, [r2, #0]

    if(right_state)
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d017      	beq.n	8001634 <HAL_TIM_PeriodElapsedCallback+0xc0>
    {
      if(right_prev == 0) right_button_counter = 0; // New press
 8001604:	4b4d      	ldr	r3, [pc, #308]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x9e>
 800160c:	4b4c      	ldr	r3, [pc, #304]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
      right_button_counter++;
 8001612:	4b4b      	ldr	r3, [pc, #300]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a49      	ldr	r2, [pc, #292]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800161a:	6013      	str	r3, [r2, #0]
      if(right_button_counter >= 10)
 800161c:	4b48      	ldr	r3, [pc, #288]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b09      	cmp	r3, #9
 8001622:	d903      	bls.n	800162c <HAL_TIM_PeriodElapsedCallback+0xb8>
        right_button_pressed_1s = 1;
 8001624:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e009      	b.n	8001640 <HAL_TIM_PeriodElapsedCallback+0xcc>
      else
        right_button_pressed_1s = 0;
 800162c:	4b45      	ldr	r3, [pc, #276]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e005      	b.n	8001640 <HAL_TIM_PeriodElapsedCallback+0xcc>
    }
    else
    {
      right_button_counter = 0;
 8001634:	4b42      	ldr	r3, [pc, #264]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
      right_button_pressed_1s = 0;
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    }
    right_prev = right_state;
 8001640:	4a3e      	ldr	r2, [pc, #248]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	7013      	strb	r3, [r2, #0]

    /* === 2. Call Simulink Stateflow logic === */
    Simulink_model_assignment_U.left_button_1s = (double)left_button_pressed_1s;
 8001646:	4b3c      	ldr	r3, [pc, #240]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff5a 	bl	8000504 <__aeabi_ui2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	493c      	ldr	r1, [pc, #240]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001656:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Simulink_model_assignment_U.right_button_1s = (double)right_button_pressed_1s;
 800165a:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff50 	bl	8000504 <__aeabi_ui2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4937      	ldr	r1, [pc, #220]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800166a:	e9c1 2300 	strd	r2, r3, [r1]

    Simulink_model_assignment_step();
 800166e:	f7ff fcb9 	bl	8000fe4 <Simulink_model_assignment_step>

    /* === 3. Process outputs to drive LEDs === */
    if(Simulink_model_assignment_Y.left_led_blink >= 0.5)
 8001672:	4b36      	ldr	r3, [pc, #216]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800167e:	f7ff fa41 	bl	8000b04 <__aeabi_dcmpge>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x120>
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 500); // 50% duty
 8001688:	4b32      	ldr	r3, [pc, #200]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001690:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001692:	e003      	b.n	800169c <HAL_TIM_PeriodElapsedCallback+0x128>
    else
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001694:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(Simulink_model_assignment_Y.right_led_blink >= 0.5)
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800169e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016a8:	f7ff fa2c 	bl	8000b04 <__aeabi_dcmpge>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_TIM_PeriodElapsedCallback+0x14a>
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 500);
 80016b2:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80016bc:	e003      	b.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x152>
    else
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* === 4. UART Logging === */
    sprintf(uart_buf,
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	469c      	mov	ip, r3
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	469e      	mov	lr, r3
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	491c      	ldr	r1, [pc, #112]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016da:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80016de:	4c1b      	ldr	r4, [pc, #108]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016e0:	e9d4 4504 	ldrd	r4, r5, [r4, #16]
 80016e4:	4e19      	ldr	r6, [pc, #100]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016e6:	e9d6 8906 	ldrd	r8, r9, [r6, #24]
 80016ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80016ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80016f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016f6:	e9cd 2300 	strd	r2, r3, [sp]
 80016fa:	4673      	mov	r3, lr
 80016fc:	4662      	mov	r2, ip
 80016fe:	4916      	ldr	r1, [pc, #88]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001700:	4816      	ldr	r0, [pc, #88]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001702:	f003 ff25 	bl	8005550 <siprintf>
      Simulink_model_assignment_Y.left_led_blink,
      Simulink_model_assignment_Y.right_led_blink,
      Simulink_model_assignment_Y.hazard_blink,
      Simulink_model_assignment_Y.uart_log_code
    );
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001706:	4815      	ldr	r0, [pc, #84]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001708:	f7fe fdb2 	bl	8000270 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	4911      	ldr	r1, [pc, #68]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001716:	4812      	ldr	r0, [pc, #72]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001718:	f002 fc77 	bl	800400a <HAL_UART_Transmit>
  }
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001726:	bf00      	nop
 8001728:	40000400 	.word	0x40000400
 800172c:	40020000 	.word	0x40020000
 8001730:	20000364 	.word	0x20000364
 8001734:	200002f4 	.word	0x200002f4
 8001738:	200002fc 	.word	0x200002fc
 800173c:	20000365 	.word	0x20000365
 8001740:	200002f8 	.word	0x200002f8
 8001744:	200002fd 	.word	0x200002fd
 8001748:	200001f0 	.word	0x200001f0
 800174c:	20000200 	.word	0x20000200
 8001750:	3fe00000 	.word	0x3fe00000
 8001754:	20000268 	.word	0x20000268
 8001758:	08008de0 	.word	0x08008de0
 800175c:	20000300 	.word	0x20000300
 8001760:	200002b0 	.word	0x200002b0

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	@ 0x50
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0320 	add.w	r3, r7, #32
 800176e:	2230      	movs	r2, #48	@ 0x30
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f003 ff4f 	bl	8005616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <SystemClock_Config+0xcc>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	4a27      	ldr	r2, [pc, #156]	@ (8001830 <SystemClock_Config+0xcc>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	@ 0x40
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <SystemClock_Config+0xcc>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <SystemClock_Config+0xd0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <SystemClock_Config+0xd0>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <SystemClock_Config+0xd0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d4:	2308      	movs	r3, #8
 80017d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017e2:	2307      	movs	r3, #7
 80017e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fec4 	bl	8002578 <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017f6:	f000 f947 	bl	8001a88 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2302      	movs	r3, #2
 8001800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001806:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800180a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800180c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2105      	movs	r1, #5
 8001818:	4618      	mov	r0, r3
 800181a:	f001 f925 	bl	8002a68 <HAL_RCC_ClockConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001824:	f000 f930 	bl	8001a88 <Error_Handler>
  }
}
 8001828:	bf00      	nop
 800182a:	3750      	adds	r7, #80	@ 0x50
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a1b      	ldr	r2, [pc, #108]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <MX_GPIO_Init+0x8c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a2:	2303      	movs	r3, #3
 80018a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	4619      	mov	r1, r3
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_GPIO_Init+0x90>)
 80018b6:	f000 fcab 	bl	8002210 <HAL_GPIO_Init>
}
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000

080018cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <MX_TIM3_Init+0x94>)
 80018ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <MX_TIM3_Init+0x98>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_TIM3_Init+0x94>)
 80018f0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80018f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_TIM3_Init+0x94>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_TIM3_Init+0x94>)
 80018fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001902:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <MX_TIM3_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_TIM3_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	@ (8001960 <MX_TIM3_Init+0x94>)
 8001912:	f001 fafb 	bl	8002f0c <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800191c:	f000 f8b4 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <MX_TIM3_Init+0x94>)
 800192e:	f001 fe8f 	bl	8003650 <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001938:	f000 f8a6 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_TIM3_Init+0x94>)
 800194a:	f002 fa81 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001954:	f000 f898 	bl	8001a88 <Error_Handler>
  }
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000220 	.word	0x20000220
 8001964:	40000400 	.word	0x40000400

08001968 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800198a:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 800198c:	4a28      	ldr	r2, [pc, #160]	@ (8001a30 <MX_TIM4_Init+0xc8>)
 800198e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49999;
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 8001992:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001996:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1007;
 800199e:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 80019a0:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80019a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019b2:	481e      	ldr	r0, [pc, #120]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 80019b4:	f001 fb6a 	bl	800308c <HAL_TIM_PWM_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80019be:	f000 f863 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	4619      	mov	r1, r3
 80019d0:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 80019d2:	f002 fa3d 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80019dc:	f000 f854 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e0:	2360      	movs	r3, #96	@ 0x60
 80019e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2208      	movs	r2, #8
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 80019f8:	f001 fd68 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a02:	f000 f841 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	220c      	movs	r2, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 8001a0e:	f001 fd5d 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a18:	f000 f836 	bl	8001a88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001a1c:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <MX_TIM4_Init+0xc4>)
 8001a1e:	f000 f8ab 	bl	8001b78 <HAL_TIM_MspPostInit>
}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	@ 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000268 	.word	0x20000268
 8001a30:	40000800 	.word	0x40000800

08001a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	@ (8001a84 <MX_USART2_UART_Init+0x50>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a6c:	f002 fa80 	bl	8003f70 <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a76:	f000 f807 	bl	8001a88 <Error_Handler>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002b0 	.word	0x200002b0
 8001a84:	40004400 	.word	0x40004400

08001a88 <Error_Handler>:

/**
  * @brief Error Handler
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  __disable_irq();
  while (1) {}
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <Error_Handler+0x8>

08001a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ad2:	2007      	movs	r0, #7
 8001ad4:	f000 fb67 	bl	80021a6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <HAL_TIM_Base_MspInit+0x48>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d115      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_TIM_Base_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a0c      	ldr	r2, [pc, #48]	@ (8001b30 <HAL_TIM_Base_MspInit+0x4c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_TIM_Base_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	201d      	movs	r0, #29
 8001b18:	f000 fb50 	bl	80021bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b1c:	201d      	movs	r0, #29
 8001b1e:	f000 fb69 	bl	80021f4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40000400 	.word	0x40000400
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10d      	bne.n	8001b62 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_TIM_PWM_MspInit+0x40>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <HAL_TIM_PWM_MspInit+0x40>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <HAL_TIM_PWM_MspInit+0x40>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40000800 	.word	0x40000800
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a12      	ldr	r2, [pc, #72]	@ (8001be0 <HAL_TIM_MspPostInit+0x68>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d11e      	bne.n	8001bd8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_TIM_MspPostInit+0x6c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_TIM_MspPostInit+0x6c>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_TIM_MspPostInit+0x6c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bb6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001bba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_TIM_MspPostInit+0x70>)
 8001bd4:	f000 fb1c 	bl	8002210 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40000800 	.word	0x40000800
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020c00 	.word	0x40020c00

08001bec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_UART_MspInit+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12b      	bne.n	8001c66 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c46:	230c      	movs	r3, #12
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c56:	2307      	movs	r3, #7
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <HAL_UART_MspInit+0x8c>)
 8001c62:	f000 fad5 	bl	8002210 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	@ 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40004400 	.word	0x40004400
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	@ 0x30
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <HAL_InitTick+0xd4>)
 8001c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c94:	4a2e      	ldr	r2, [pc, #184]	@ (8001d50 <HAL_InitTick+0xd4>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d50 <HAL_InitTick+0xd4>)
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca8:	f107 020c 	add.w	r2, r7, #12
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 f8f8 	bl	8002ea8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001cb8:	f001 f8e2 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <HAL_InitTick+0xd8>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9b      	lsrs	r3, r3, #18
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001cd2:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <HAL_InitTick+0xe0>)
 8001cd4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001cd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cde:	4a1e      	ldr	r2, [pc, #120]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cf6:	4818      	ldr	r0, [pc, #96]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001cf8:	f001 f908 	bl	8002f0c <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11b      	bne.n	8001d42 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d0a:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <HAL_InitTick+0xdc>)
 8001d0c:	f001 f94e 	bl	8002fac <HAL_TIM_Base_Start_IT>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d111      	bne.n	8001d42 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d1e:	2019      	movs	r0, #25
 8001d20:	f000 fa68 	bl	80021f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	d808      	bhi.n	8001d3c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	2019      	movs	r0, #25
 8001d30:	f000 fa44 	bl	80021bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_InitTick+0xe4>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e002      	b.n	8001d42 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3730      	adds	r7, #48	@ 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	20000368 	.word	0x20000368
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	20000004 	.word	0x20000004

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
__attribute__((weak)) void NMI_Handler (void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
__attribute__((weak)) void HardFault_Handler (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
__attribute__((weak)) void MemManage_Handler (void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
__attribute__((weak)) void BusFault_Handler (void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
__attribute__((weak)) void UsageFault_Handler (void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
__attribute__((weak)) void SVC_Handler (void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
__attribute__((weak)) void DebugMon_Handler (void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
__attribute__((weak)) void PendSV_Handler (void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
__attribute__((weak)) void SysTick_Handler (void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
__attribute__((weak)) void TIM1_UP_TIM10_IRQHandler (void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dca:	f001 fa77 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000368 	.word	0x20000368

08001dd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
__attribute__((weak)) void TIM3_IRQHandler (void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <TIM3_IRQHandler+0x10>)
 8001dde:	f001 fa6d 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000220 	.word	0x20000220

08001dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_kill>:

int _kill(int pid, int sig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e06:	f003 fc59 	bl	80056bc <__errno>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2216      	movs	r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_exit>:

void _exit (int status)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ffe7 	bl	8001dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2e:	bf00      	nop
 8001e30:	e7fd      	b.n	8001e2e <_exit+0x12>

08001e32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e00a      	b.n	8001e5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e44:	f3af 8000 	nop.w
 8001e48:	4601      	mov	r1, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	60ba      	str	r2, [r7, #8]
 8001e50:	b2ca      	uxtb	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dbf0      	blt.n	8001e44 <_read+0x12>
  }

  return len;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e009      	b.n	8001e92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	60ba      	str	r2, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbf1      	blt.n	8001e7e <_write+0x12>
  }
  return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_close>:

int _close(int file)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_isatty>:

int _isatty(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f003 fbbe 	bl	80056bc <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20020000 	.word	0x20020000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	200003b0 	.word	0x200003b0
 8001f74:	20000508 	.word	0x20000508

08001f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fa0:	f7ff ffea 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fca:	f003 fb7d 	bl	80056c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7ff faaf 	bl	8001530 <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001fe0:	08009280 	.word	0x08009280
  ldr r2, =_sbss
 8001fe4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001fe8:	20000504 	.word	0x20000504

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <HAL_Init+0x40>)
 8001ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <HAL_Init+0x40>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a07      	ldr	r2, [pc, #28]	@ (8002030 <HAL_Init+0x40>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f8c4 	bl	80021a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fe2c 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002024:	f7ff fd36 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	200003b4 	.word	0x200003b4

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4907      	ldr	r1, [pc, #28]	@ (80020e8 <__NVIC_EnableIRQ+0x38>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	@ (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	@ (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	@ 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	@ 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff4c 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ce:	f7ff ff61 	bl	8002094 <__NVIC_GetPriorityGrouping>
 80021d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	6978      	ldr	r0, [r7, #20]
 80021da:	f7ff ffb1 	bl	8002140 <NVIC_EncodePriority>
 80021de:	4602      	mov	r2, r0
 80021e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff80 	bl	80020ec <__NVIC_SetPriority>
}
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff54 	bl	80020b0 <__NVIC_EnableIRQ>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e16b      	b.n	8002504 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 815a 	bne.w	80024fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	2b02      	cmp	r3, #2
 8002260:	d130      	bne.n	80022c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0201 	and.w	r2, r3, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d017      	beq.n	8002300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d123      	bne.n	8002354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80b4 	beq.w	80024fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b60      	ldr	r3, [pc, #384]	@ (800251c <HAL_GPIO_Init+0x30c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	4a5f      	ldr	r2, [pc, #380]	@ (800251c <HAL_GPIO_Init+0x30c>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a6:	4b5d      	ldr	r3, [pc, #372]	@ (800251c <HAL_GPIO_Init+0x30c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002520 <HAL_GPIO_Init+0x310>)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a52      	ldr	r2, [pc, #328]	@ (8002524 <HAL_GPIO_Init+0x314>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02b      	beq.n	8002436 <HAL_GPIO_Init+0x226>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a51      	ldr	r2, [pc, #324]	@ (8002528 <HAL_GPIO_Init+0x318>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d025      	beq.n	8002432 <HAL_GPIO_Init+0x222>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a50      	ldr	r2, [pc, #320]	@ (800252c <HAL_GPIO_Init+0x31c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <HAL_GPIO_Init+0x21e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002530 <HAL_GPIO_Init+0x320>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x21a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002534 <HAL_GPIO_Init+0x324>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x216>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4d      	ldr	r2, [pc, #308]	@ (8002538 <HAL_GPIO_Init+0x328>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x212>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4c      	ldr	r2, [pc, #304]	@ (800253c <HAL_GPIO_Init+0x32c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x20e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4b      	ldr	r2, [pc, #300]	@ (8002540 <HAL_GPIO_Init+0x330>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x20a>
 8002416:	2307      	movs	r3, #7
 8002418:	e00e      	b.n	8002438 <HAL_GPIO_Init+0x228>
 800241a:	2308      	movs	r3, #8
 800241c:	e00c      	b.n	8002438 <HAL_GPIO_Init+0x228>
 800241e:	2306      	movs	r3, #6
 8002420:	e00a      	b.n	8002438 <HAL_GPIO_Init+0x228>
 8002422:	2305      	movs	r3, #5
 8002424:	e008      	b.n	8002438 <HAL_GPIO_Init+0x228>
 8002426:	2304      	movs	r3, #4
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x228>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_Init+0x228>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_Init+0x228>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x228>
 8002436:	2300      	movs	r3, #0
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002448:	4935      	ldr	r1, [pc, #212]	@ (8002520 <HAL_GPIO_Init+0x310>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <HAL_GPIO_Init+0x334>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247a:	4a32      	ldr	r2, [pc, #200]	@ (8002544 <HAL_GPIO_Init+0x334>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002480:	4b30      	ldr	r3, [pc, #192]	@ (8002544 <HAL_GPIO_Init+0x334>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a4:	4a27      	ldr	r2, [pc, #156]	@ (8002544 <HAL_GPIO_Init+0x334>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024aa:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <HAL_GPIO_Init+0x334>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <HAL_GPIO_Init+0x334>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_GPIO_Init+0x334>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f8:	4a12      	ldr	r2, [pc, #72]	@ (8002544 <HAL_GPIO_Init+0x334>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	f67f ae90 	bls.w	800222c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3724      	adds	r7, #36	@ 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40013800 	.word	0x40013800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40021400 	.word	0x40021400
 800253c:	40021800 	.word	0x40021800
 8002540:	40021c00 	.word	0x40021c00
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e001      	b.n	800256a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e267      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d075      	beq.n	8002682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002596:	4b88      	ldr	r3, [pc, #544]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00c      	beq.n	80025bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4b85      	ldr	r3, [pc, #532]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b82      	ldr	r3, [pc, #520]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b7e      	ldr	r3, [pc, #504]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x108>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e242      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x74>
 80025de:	4b76      	ldr	r3, [pc, #472]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a75      	ldr	r2, [pc, #468]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x98>
 80025f6:	4b70      	ldr	r3, [pc, #448]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6f      	ldr	r2, [pc, #444]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b6d      	ldr	r3, [pc, #436]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6c      	ldr	r2, [pc, #432]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 8002610:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a68      	ldr	r2, [pc, #416]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b66      	ldr	r3, [pc, #408]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a65      	ldr	r2, [pc, #404]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff fd00 	bl	8002034 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fcfc 	bl	8002034 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e207      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b5b      	ldr	r3, [pc, #364]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xc0>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff fcec 	bl	8002034 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff fce8 	bl	8002034 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1f3      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b51      	ldr	r3, [pc, #324]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0xe8>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268e:	4b4a      	ldr	r3, [pc, #296]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269a:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b44      	ldr	r3, [pc, #272]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1c7      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b3b      	ldr	r3, [pc, #236]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4937      	ldr	r1, [pc, #220]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e03a      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <HAL_RCC_OscConfig+0x244>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7ff fca1 	bl	8002034 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7ff fc9d 	bl	8002034 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1a8      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b28      	ldr	r3, [pc, #160]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4925      	ldr	r1, [pc, #148]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <HAL_RCC_OscConfig+0x244>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7ff fc80 	bl	8002034 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7ff fc7c 	bl	8002034 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e187      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d036      	beq.n	80027d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d016      	beq.n	8002798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <HAL_RCC_OscConfig+0x248>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7ff fc60 	bl	8002034 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7ff fc5c 	bl	8002034 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e167      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCC_OscConfig+0x240>)
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x200>
 8002796:	e01b      	b.n	80027d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002798:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_OscConfig+0x248>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7ff fc49 	bl	8002034 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	e00e      	b.n	80027c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a6:	f7ff fc45 	bl	8002034 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d907      	bls.n	80027c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e150      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
 80027b8:	40023800 	.word	0x40023800
 80027bc:	42470000 	.word	0x42470000
 80027c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	4b88      	ldr	r3, [pc, #544]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ea      	bne.n	80027a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8097 	beq.w	800290c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b81      	ldr	r3, [pc, #516]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	4b7d      	ldr	r3, [pc, #500]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	4a7c      	ldr	r2, [pc, #496]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fe:	4b7a      	ldr	r3, [pc, #488]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	4b77      	ldr	r3, [pc, #476]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d118      	bne.n	800284c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281a:	4b74      	ldr	r3, [pc, #464]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a73      	ldr	r2, [pc, #460]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002826:	f7ff fc05 	bl	8002034 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282e:	f7ff fc01 	bl	8002034 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e10c      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	4b6a      	ldr	r3, [pc, #424]	@ (80029ec <HAL_RCC_OscConfig+0x474>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x2ea>
 8002854:	4b64      	ldr	r3, [pc, #400]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a63      	ldr	r2, [pc, #396]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x324>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x30c>
 800286a:	4b5f      	ldr	r3, [pc, #380]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	4a5e      	ldr	r2, [pc, #376]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6713      	str	r3, [r2, #112]	@ 0x70
 8002876:	4b5c      	ldr	r3, [pc, #368]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	4a5b      	ldr	r2, [pc, #364]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6713      	str	r3, [r2, #112]	@ 0x70
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0x324>
 8002884:	4b58      	ldr	r3, [pc, #352]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	4a57      	ldr	r2, [pc, #348]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002890:	4b55      	ldr	r3, [pc, #340]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	4a54      	ldr	r2, [pc, #336]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7ff fbc6 	bl	8002034 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7ff fbc2 	bl	8002034 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0cb      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	4b49      	ldr	r3, [pc, #292]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0ee      	beq.n	80028ac <HAL_RCC_OscConfig+0x334>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f7ff fbb0 	bl	8002034 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7ff fbac 	bl	8002034 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0b5      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	4b3e      	ldr	r3, [pc, #248]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ee      	bne.n	80028d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b39      	ldr	r3, [pc, #228]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	4a38      	ldr	r2, [pc, #224]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a1 	beq.w	8002a58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002916:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b08      	cmp	r3, #8
 8002920:	d05c      	beq.n	80029dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d141      	bne.n	80029ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_RCC_OscConfig+0x478>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff fb80 	bl	8002034 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002938:	f7ff fb7c 	bl	8002034 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e087      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	4b27      	ldr	r3, [pc, #156]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	019b      	lsls	r3, r3, #6
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	3b01      	subs	r3, #1
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	491b      	ldr	r1, [pc, #108]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_RCC_OscConfig+0x478>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7ff fb55 	bl	8002034 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298e:	f7ff fb51 	bl	8002034 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e05c      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x416>
 80029ac:	e054      	b.n	8002a58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_RCC_OscConfig+0x478>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fb3e 	bl	8002034 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029bc:	f7ff fb3a 	bl	8002034 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e045      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_RCC_OscConfig+0x470>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x444>
 80029da:	e03d      	b.n	8002a58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e038      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40007000 	.word	0x40007000
 80029f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCC_OscConfig+0x4ec>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d028      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d121      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d11a      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800

08002a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0cc      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b68      	ldr	r3, [pc, #416]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d90c      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b65      	ldr	r3, [pc, #404]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d044      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d119      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e067      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4b37      	ldr	r3, [pc, #220]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4934      	ldr	r1, [pc, #208]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7ff fa6c 	bl	8002034 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7ff fa68 	bl	8002034 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e04f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d20c      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f834 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08008e2c 	.word	0x08008e2c
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b094      	sub	sp, #80	@ 0x50
 8002c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c40:	2300      	movs	r3, #0
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c44:	2300      	movs	r3, #0
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4c:	4b79      	ldr	r3, [pc, #484]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d00d      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x40>
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	f200 80e1 	bhi.w	8002e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c66:	e0db      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b73      	ldr	r3, [pc, #460]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c6c:	e0db      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c72:	e0d8      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c74:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	2200      	movs	r2, #0
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb8:	0150      	lsls	r0, r2, #5
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	1a51      	subs	r1, r2, r1
 8002cc2:	6139      	str	r1, [r7, #16]
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd8:	4659      	mov	r1, fp
 8002cda:	018b      	lsls	r3, r1, #6
 8002cdc:	4651      	mov	r1, sl
 8002cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	018a      	lsls	r2, r1, #6
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cec:	4659      	mov	r1, fp
 8002cee:	eb63 0901 	sbc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	462b      	mov	r3, r5
 8002d14:	eb49 0303 	adc.w	r3, r9, r3
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d26:	4629      	mov	r1, r5
 8002d28:	024b      	lsls	r3, r1, #9
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d30:	4621      	mov	r1, r4
 8002d32:	024a      	lsls	r2, r1, #9
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d44:	f7fd ffa0 	bl	8000c88 <__aeabi_uldivmod>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d50:	e058      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b38      	ldr	r3, [pc, #224]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	f04f 0000 	mov.w	r0, #0
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	0159      	lsls	r1, r3, #5
 8002d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7e:	0150      	lsls	r0, r2, #5
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4641      	mov	r1, r8
 8002d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002da4:	ebb2 040a 	subs.w	r4, r2, sl
 8002da8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	00eb      	lsls	r3, r5, #3
 8002db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dba:	00e2      	lsls	r2, r4, #3
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	461d      	mov	r5, r3
 8002dc0:	4643      	mov	r3, r8
 8002dc2:	18e3      	adds	r3, r4, r3
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	eb45 0303 	adc.w	r3, r5, r3
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dda:	4629      	mov	r1, r5
 8002ddc:	028b      	lsls	r3, r1, #10
 8002dde:	4621      	mov	r1, r4
 8002de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de4:	4621      	mov	r1, r4
 8002de6:	028a      	lsls	r2, r1, #10
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dee:	2200      	movs	r2, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	61fa      	str	r2, [r7, #28]
 8002df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df8:	f7fd ff46 	bl	8000c88 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3750      	adds	r7, #80	@ 0x50
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	00f42400 	.word	0x00f42400
 8002e3c:	007a1200 	.word	0x007a1200

08002e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000000 	.word	0x20000000

08002e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e5c:	f7ff fff0 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	@ (8002e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	08008e3c 	.word	0x08008e3c

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e84:	f7ff ffdc 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0b5b      	lsrs	r3, r3, #13
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4903      	ldr	r1, [pc, #12]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	08008e3c 	.word	0x08008e3c

08002ea8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eb8:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	08db      	lsrs	r3, r3, #3
 8002ee2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eea:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <HAL_RCC_GetClockConfig+0x60>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40023c00 	.word	0x40023c00

08002f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e041      	b.n	8002fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe fdd6 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f000 fc70 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e04e      	b.n	8003062 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d022      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fee:	d01d      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8003074 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8003078 <HAL_TIM_Base_Start_IT+0xcc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <HAL_TIM_Base_Start_IT+0xd0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1b      	ldr	r2, [pc, #108]	@ (8003080 <HAL_TIM_Base_Start_IT+0xd4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <HAL_TIM_Base_Start_IT+0xd8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x80>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a18      	ldr	r2, [pc, #96]	@ (8003088 <HAL_TIM_Base_Start_IT+0xdc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d010      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304e:	e007      	b.n	8003060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40001800 	.word	0x40001800

0800308c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e041      	b.n	8003122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fd3e 	bl	8001b34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f000 fbb0 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_TIM_PWM_Start+0x24>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	bf14      	ite	ne
 8003148:	2301      	movne	r3, #1
 800314a:	2300      	moveq	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e022      	b.n	8003196 <HAL_TIM_PWM_Start+0x6a>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d109      	bne.n	800316a <HAL_TIM_PWM_Start+0x3e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	e015      	b.n	8003196 <HAL_TIM_PWM_Start+0x6a>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d109      	bne.n	8003184 <HAL_TIM_PWM_Start+0x58>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e008      	b.n	8003196 <HAL_TIM_PWM_Start+0x6a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07c      	b.n	8003298 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_PWM_Start+0x82>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031ac:	e013      	b.n	80031d6 <HAL_TIM_PWM_Start+0xaa>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0x92>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031bc:	e00b      	b.n	80031d6 <HAL_TIM_PWM_Start+0xaa>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0xa2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_PWM_Start+0xaa>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fe10 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2d      	ldr	r2, [pc, #180]	@ (80032a0 <HAL_TIM_PWM_Start+0x174>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIM_PWM_Start+0xcc>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2c      	ldr	r2, [pc, #176]	@ (80032a4 <HAL_TIM_PWM_Start+0x178>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_PWM_Start+0xd0>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_TIM_PWM_Start+0xd2>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a22      	ldr	r2, [pc, #136]	@ (80032a0 <HAL_TIM_PWM_Start+0x174>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <HAL_TIM_PWM_Start+0x136>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003224:	d01d      	beq.n	8003262 <HAL_TIM_PWM_Start+0x136>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1f      	ldr	r2, [pc, #124]	@ (80032a8 <HAL_TIM_PWM_Start+0x17c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d018      	beq.n	8003262 <HAL_TIM_PWM_Start+0x136>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1d      	ldr	r2, [pc, #116]	@ (80032ac <HAL_TIM_PWM_Start+0x180>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_TIM_PWM_Start+0x136>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <HAL_TIM_PWM_Start+0x184>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00e      	beq.n	8003262 <HAL_TIM_PWM_Start+0x136>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a16      	ldr	r2, [pc, #88]	@ (80032a4 <HAL_TIM_PWM_Start+0x178>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_TIM_PWM_Start+0x136>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a18      	ldr	r2, [pc, #96]	@ (80032b4 <HAL_TIM_PWM_Start+0x188>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d004      	beq.n	8003262 <HAL_TIM_PWM_Start+0x136>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a16      	ldr	r2, [pc, #88]	@ (80032b8 <HAL_TIM_PWM_Start+0x18c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d111      	bne.n	8003286 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b06      	cmp	r3, #6
 8003272:	d010      	beq.n	8003296 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003284:	e007      	b.n	8003296 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40010400 	.word	0x40010400
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40001800 	.word	0x40001800

080032bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d122      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d11b      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa77 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa69 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fa7a 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d122      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0204 	mvn.w	r2, #4
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa4d 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa3f 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fa50 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b08      	cmp	r3, #8
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa23 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa15 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa26 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0210 	mvn.w	r2, #16
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2208      	movs	r2, #8
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f9f9 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9eb 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f9fc 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0201 	mvn.w	r2, #1
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe f89a 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fd78 	bl	8003f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b40      	cmp	r3, #64	@ 0x40
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b40      	cmp	r3, #64	@ 0x40
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9c1 	bl	800381a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d107      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0220 	mvn.w	r2, #32
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fd42 	bl	8003f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0ae      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	f200 809f 	bhi.w	8003638 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003535 	.word	0x08003535
 8003504:	08003639 	.word	0x08003639
 8003508:	08003639 	.word	0x08003639
 800350c:	08003639 	.word	0x08003639
 8003510:	08003575 	.word	0x08003575
 8003514:	08003639 	.word	0x08003639
 8003518:	08003639 	.word	0x08003639
 800351c:	08003639 	.word	0x08003639
 8003520:	080035b7 	.word	0x080035b7
 8003524:	08003639 	.word	0x08003639
 8003528:	08003639 	.word	0x08003639
 800352c:	08003639 	.word	0x08003639
 8003530:	080035f7 	.word	0x080035f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fa18 	bl	8003970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0208 	orr.w	r2, r2, #8
 800354e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6999      	ldr	r1, [r3, #24]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	619a      	str	r2, [r3, #24]
      break;
 8003572:	e064      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa68 	bl	8003a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800358e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6999      	ldr	r1, [r3, #24]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	619a      	str	r2, [r3, #24]
      break;
 80035b4:	e043      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fabd 	bl	8003b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0208 	orr.w	r2, r2, #8
 80035d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0204 	bic.w	r2, r2, #4
 80035e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69d9      	ldr	r1, [r3, #28]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	61da      	str	r2, [r3, #28]
      break;
 80035f4:	e023      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fb11 	bl	8003c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	021a      	lsls	r2, r3, #8
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	61da      	str	r2, [r3, #28]
      break;
 8003636:	e002      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
      break;
 800363c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIM_ConfigClockSource+0x1c>
 8003668:	2302      	movs	r3, #2
 800366a:	e0b4      	b.n	80037d6 <HAL_TIM_ConfigClockSource+0x186>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a4:	d03e      	beq.n	8003724 <HAL_TIM_ConfigClockSource+0xd4>
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036aa:	f200 8087 	bhi.w	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b2:	f000 8086 	beq.w	80037c2 <HAL_TIM_ConfigClockSource+0x172>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ba:	d87f      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b70      	cmp	r3, #112	@ 0x70
 80036be:	d01a      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0xa6>
 80036c0:	2b70      	cmp	r3, #112	@ 0x70
 80036c2:	d87b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b60      	cmp	r3, #96	@ 0x60
 80036c6:	d050      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x11a>
 80036c8:	2b60      	cmp	r3, #96	@ 0x60
 80036ca:	d877      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036cc:	2b50      	cmp	r3, #80	@ 0x50
 80036ce:	d03c      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xfa>
 80036d0:	2b50      	cmp	r3, #80	@ 0x50
 80036d2:	d873      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d058      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x13a>
 80036d8:	2b40      	cmp	r3, #64	@ 0x40
 80036da:	d86f      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036dc:	2b30      	cmp	r3, #48	@ 0x30
 80036de:	d064      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036e0:	2b30      	cmp	r3, #48	@ 0x30
 80036e2:	d86b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d060      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d867      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05c      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d05a      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x15a>
 80036f4:	e062      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f000 fb5d 	bl	8003dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
      break;
 8003722:	e04f      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6899      	ldr	r1, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f000 fb46 	bl	8003dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003746:	609a      	str	r2, [r3, #8]
      break;
 8003748:	e03c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	f000 faba 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2150      	movs	r1, #80	@ 0x50
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fb13 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003768:	e02c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	461a      	mov	r2, r3
 8003778:	f000 fad9 	bl	8003d2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2160      	movs	r1, #96	@ 0x60
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fb03 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003788:	e01c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6859      	ldr	r1, [r3, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	461a      	mov	r2, r3
 8003798:	f000 fa9a 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2140      	movs	r1, #64	@ 0x40
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 faf3 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 80037a8:	e00c      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f000 faea 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 80037ba:	e003      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e000      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a40      	ldr	r2, [pc, #256]	@ (8003944 <TIM_Base_SetConfig+0x114>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384e:	d00f      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3d      	ldr	r2, [pc, #244]	@ (8003948 <TIM_Base_SetConfig+0x118>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3c      	ldr	r2, [pc, #240]	@ (800394c <TIM_Base_SetConfig+0x11c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3b      	ldr	r2, [pc, #236]	@ (8003950 <TIM_Base_SetConfig+0x120>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3a      	ldr	r2, [pc, #232]	@ (8003954 <TIM_Base_SetConfig+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d108      	bne.n	8003882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2f      	ldr	r2, [pc, #188]	@ (8003944 <TIM_Base_SetConfig+0x114>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003890:	d027      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2c      	ldr	r2, [pc, #176]	@ (8003948 <TIM_Base_SetConfig+0x118>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d023      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2b      	ldr	r2, [pc, #172]	@ (800394c <TIM_Base_SetConfig+0x11c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01f      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003950 <TIM_Base_SetConfig+0x120>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a29      	ldr	r2, [pc, #164]	@ (8003954 <TIM_Base_SetConfig+0x124>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d017      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a28      	ldr	r2, [pc, #160]	@ (8003958 <TIM_Base_SetConfig+0x128>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a27      	ldr	r2, [pc, #156]	@ (800395c <TIM_Base_SetConfig+0x12c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00f      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <TIM_Base_SetConfig+0x130>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a25      	ldr	r2, [pc, #148]	@ (8003964 <TIM_Base_SetConfig+0x134>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a24      	ldr	r2, [pc, #144]	@ (8003968 <TIM_Base_SetConfig+0x138>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a23      	ldr	r2, [pc, #140]	@ (800396c <TIM_Base_SetConfig+0x13c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <TIM_Base_SetConfig+0x114>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0xf8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0c      	ldr	r2, [pc, #48]	@ (8003954 <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	615a      	str	r2, [r3, #20]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40010400 	.word	0x40010400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800
 8003964:	40001800 	.word	0x40001800
 8003968:	40001c00 	.word	0x40001c00
 800396c:	40002000 	.word	0x40002000

08003970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a20      	ldr	r2, [pc, #128]	@ (8003a48 <TIM_OC1_SetConfig+0xd8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC1_SetConfig+0x64>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <TIM_OC1_SetConfig+0xdc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10c      	bne.n	80039ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0308 	bic.w	r3, r3, #8
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a15      	ldr	r2, [pc, #84]	@ (8003a48 <TIM_OC1_SetConfig+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_OC1_SetConfig+0x8e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a14      	ldr	r2, [pc, #80]	@ (8003a4c <TIM_OC1_SetConfig+0xdc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d111      	bne.n	8003a22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40010400 	.word	0x40010400

08003a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f023 0210 	bic.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0320 	bic.w	r3, r3, #32
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	@ (8003b34 <TIM_OC2_SetConfig+0xe4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_OC2_SetConfig+0x68>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a21      	ldr	r2, [pc, #132]	@ (8003b38 <TIM_OC2_SetConfig+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10d      	bne.n	8003ad4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <TIM_OC2_SetConfig+0xe4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_OC2_SetConfig+0x94>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <TIM_OC2_SetConfig+0xe8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d113      	bne.n	8003b0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40010400 	.word	0x40010400

08003b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a21      	ldr	r2, [pc, #132]	@ (8003c1c <TIM_OC3_SetConfig+0xe0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_OC3_SetConfig+0x66>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	@ (8003c20 <TIM_OC3_SetConfig+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10d      	bne.n	8003bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a16      	ldr	r2, [pc, #88]	@ (8003c1c <TIM_OC3_SetConfig+0xe0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_OC3_SetConfig+0x92>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	@ (8003c20 <TIM_OC3_SetConfig+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d113      	bne.n	8003bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	40010400 	.word	0x40010400

08003c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	031b      	lsls	r3, r3, #12
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	@ (8003cc8 <TIM_OC4_SetConfig+0xa4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_OC4_SetConfig+0x68>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a11      	ldr	r2, [pc, #68]	@ (8003ccc <TIM_OC4_SetConfig+0xa8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d109      	bne.n	8003ca0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f023 0201 	bic.w	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 030a 	bic.w	r3, r3, #10
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f023 0210 	bic.w	r2, r3, #16
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	031b      	lsls	r3, r3, #12
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f043 0307 	orr.w	r3, r3, #7
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	021a      	lsls	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e05a      	b.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1a      	ldr	r2, [pc, #104]	@ (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10c      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40001800 	.word	0x40001800

08003f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e03f      	b.n	8004002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd fe28 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	@ 0x24
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f929 	bl	800420c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08a      	sub	sp, #40	@ 0x28
 800400e:	af02      	add	r7, sp, #8
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	d17c      	bne.n	8004124 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_Transmit+0x2c>
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e075      	b.n	8004126 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UART_Transmit+0x3e>
 8004044:	2302      	movs	r3, #2
 8004046:	e06e      	b.n	8004126 <HAL_UART_Transmit+0x11c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	@ 0x21
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405e:	f7fd ffe9 	bl	8002034 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004078:	d108      	bne.n	800408c <HAL_UART_Transmit+0x82>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e003      	b.n	8004094 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800409c:	e02a      	b.n	80040f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f840 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e036      	b.n	8004126 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3302      	adds	r3, #2
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e007      	b.n	80040e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3301      	adds	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1cf      	bne.n	800409e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2140      	movs	r1, #64	@ 0x40
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f810 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b090      	sub	sp, #64	@ 0x40
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	e050      	b.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d04c      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
 800414e:	f7fd ff71 	bl	8002034 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800415a:	429a      	cmp	r2, r3
 800415c:	d241      	bcs.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800417e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	613b      	str	r3, [r7, #16]
   return(result);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041b2:	623a      	str	r2, [r7, #32]
 80041b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	69f9      	ldr	r1, [r7, #28]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e00f      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d09f      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3740      	adds	r7, #64	@ 0x40
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b0c0      	sub	sp, #256	@ 0x100
 8004212:	af00      	add	r7, sp, #0
 8004214:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	68d9      	ldr	r1, [r3, #12]
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	ea40 0301 	orr.w	r3, r0, r1
 8004234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	431a      	orrs	r2, r3
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004264:	f021 010c 	bic.w	r1, r1, #12
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004272:	430b      	orrs	r3, r1
 8004274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	6999      	ldr	r1, [r3, #24]
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	ea40 0301 	orr.w	r3, r0, r1
 8004292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b8f      	ldr	r3, [pc, #572]	@ (80044d8 <UART_SetConfig+0x2cc>)
 800429c:	429a      	cmp	r2, r3
 800429e:	d005      	beq.n	80042ac <UART_SetConfig+0xa0>
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b8d      	ldr	r3, [pc, #564]	@ (80044dc <UART_SetConfig+0x2d0>)
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d104      	bne.n	80042b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ac:	f7fe fde8 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 80042b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042b4:	e003      	b.n	80042be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042b6:	f7fe fdcf 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 80042ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c8:	f040 810c 	bne.w	80044e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	1891      	adds	r1, r2, r2
 80042e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042e6:	415b      	adcs	r3, r3
 80042e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042ee:	4621      	mov	r1, r4
 80042f0:	eb12 0801 	adds.w	r8, r2, r1
 80042f4:	4629      	mov	r1, r5
 80042f6:	eb43 0901 	adc.w	r9, r3, r1
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430e:	4690      	mov	r8, r2
 8004310:	4699      	mov	r9, r3
 8004312:	4623      	mov	r3, r4
 8004314:	eb18 0303 	adds.w	r3, r8, r3
 8004318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800431c:	462b      	mov	r3, r5
 800431e:	eb49 0303 	adc.w	r3, r9, r3
 8004322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004332:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800433a:	460b      	mov	r3, r1
 800433c:	18db      	adds	r3, r3, r3
 800433e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004340:	4613      	mov	r3, r2
 8004342:	eb42 0303 	adc.w	r3, r2, r3
 8004346:	657b      	str	r3, [r7, #84]	@ 0x54
 8004348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800434c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004350:	f7fc fc9a 	bl	8000c88 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4b61      	ldr	r3, [pc, #388]	@ (80044e0 <UART_SetConfig+0x2d4>)
 800435a:	fba3 2302 	umull	r2, r3, r3, r2
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	011c      	lsls	r4, r3, #4
 8004362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800436c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004374:	4642      	mov	r2, r8
 8004376:	464b      	mov	r3, r9
 8004378:	1891      	adds	r1, r2, r2
 800437a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800437c:	415b      	adcs	r3, r3
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004384:	4641      	mov	r1, r8
 8004386:	eb12 0a01 	adds.w	sl, r2, r1
 800438a:	4649      	mov	r1, r9
 800438c:	eb43 0b01 	adc.w	fp, r3, r1
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800439c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a4:	4692      	mov	sl, r2
 80043a6:	469b      	mov	fp, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	eb1a 0303 	adds.w	r3, sl, r3
 80043ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043b2:	464b      	mov	r3, r9
 80043b4:	eb4b 0303 	adc.w	r3, fp, r3
 80043b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043d0:	460b      	mov	r3, r1
 80043d2:	18db      	adds	r3, r3, r3
 80043d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d6:	4613      	mov	r3, r2
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043e6:	f7fc fc4f 	bl	8000c88 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	4b3b      	ldr	r3, [pc, #236]	@ (80044e0 <UART_SetConfig+0x2d4>)
 80043f2:	fba3 2301 	umull	r2, r3, r3, r1
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2264      	movs	r2, #100	@ 0x64
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	1acb      	subs	r3, r1, r3
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004406:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <UART_SetConfig+0x2d4>)
 8004408:	fba3 2302 	umull	r2, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004414:	441c      	add	r4, r3
 8004416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004420:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	1891      	adds	r1, r2, r2
 800442e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004430:	415b      	adcs	r3, r3
 8004432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004438:	4641      	mov	r1, r8
 800443a:	1851      	adds	r1, r2, r1
 800443c:	6339      	str	r1, [r7, #48]	@ 0x30
 800443e:	4649      	mov	r1, r9
 8004440:	414b      	adcs	r3, r1
 8004442:	637b      	str	r3, [r7, #52]	@ 0x34
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004450:	4659      	mov	r1, fp
 8004452:	00cb      	lsls	r3, r1, #3
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445a:	4651      	mov	r1, sl
 800445c:	00ca      	lsls	r2, r1, #3
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	4603      	mov	r3, r0
 8004464:	4642      	mov	r2, r8
 8004466:	189b      	adds	r3, r3, r2
 8004468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800446c:	464b      	mov	r3, r9
 800446e:	460a      	mov	r2, r1
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004484:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800448c:	460b      	mov	r3, r1
 800448e:	18db      	adds	r3, r3, r3
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004492:	4613      	mov	r3, r2
 8004494:	eb42 0303 	adc.w	r3, r2, r3
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800449e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044a2:	f7fc fbf1 	bl	8000c88 <__aeabi_uldivmod>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <UART_SetConfig+0x2d4>)
 80044ac:	fba3 1302 	umull	r1, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	2164      	movs	r1, #100	@ 0x64
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	3332      	adds	r3, #50	@ 0x32
 80044be:	4a08      	ldr	r2, [pc, #32]	@ (80044e0 <UART_SetConfig+0x2d4>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	f003 0207 	and.w	r2, r3, #7
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4422      	add	r2, r4
 80044d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044d4:	e106      	b.n	80046e4 <UART_SetConfig+0x4d8>
 80044d6:	bf00      	nop
 80044d8:	40011000 	.word	0x40011000
 80044dc:	40011400 	.word	0x40011400
 80044e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	1891      	adds	r1, r2, r2
 80044fc:	6239      	str	r1, [r7, #32]
 80044fe:	415b      	adcs	r3, r3
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
 8004502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004506:	4641      	mov	r1, r8
 8004508:	1854      	adds	r4, r2, r1
 800450a:	4649      	mov	r1, r9
 800450c:	eb43 0501 	adc.w	r5, r3, r1
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	00eb      	lsls	r3, r5, #3
 800451a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800451e:	00e2      	lsls	r2, r4, #3
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	4643      	mov	r3, r8
 8004526:	18e3      	adds	r3, r4, r3
 8004528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800452c:	464b      	mov	r3, r9
 800452e:	eb45 0303 	adc.w	r3, r5, r3
 8004532:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004542:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004552:	4629      	mov	r1, r5
 8004554:	008b      	lsls	r3, r1, #2
 8004556:	4621      	mov	r1, r4
 8004558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455c:	4621      	mov	r1, r4
 800455e:	008a      	lsls	r2, r1, #2
 8004560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004564:	f7fc fb90 	bl	8000c88 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4b60      	ldr	r3, [pc, #384]	@ (80046f0 <UART_SetConfig+0x4e4>)
 800456e:	fba3 2302 	umull	r2, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	011c      	lsls	r4, r3, #4
 8004576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004580:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004588:	4642      	mov	r2, r8
 800458a:	464b      	mov	r3, r9
 800458c:	1891      	adds	r1, r2, r2
 800458e:	61b9      	str	r1, [r7, #24]
 8004590:	415b      	adcs	r3, r3
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004598:	4641      	mov	r1, r8
 800459a:	1851      	adds	r1, r2, r1
 800459c:	6139      	str	r1, [r7, #16]
 800459e:	4649      	mov	r1, r9
 80045a0:	414b      	adcs	r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	00cb      	lsls	r3, r1, #3
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ba:	4651      	mov	r1, sl
 80045bc:	00ca      	lsls	r2, r1, #3
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	4642      	mov	r2, r8
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045cc:	464b      	mov	r3, r9
 80045ce:	460a      	mov	r2, r1
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045f0:	4649      	mov	r1, r9
 80045f2:	008b      	lsls	r3, r1, #2
 80045f4:	4641      	mov	r1, r8
 80045f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fa:	4641      	mov	r1, r8
 80045fc:	008a      	lsls	r2, r1, #2
 80045fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004602:	f7fc fb41 	bl	8000c88 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4611      	mov	r1, r2
 800460c:	4b38      	ldr	r3, [pc, #224]	@ (80046f0 <UART_SetConfig+0x4e4>)
 800460e:	fba3 2301 	umull	r2, r3, r3, r1
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2264      	movs	r2, #100	@ 0x64
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	1acb      	subs	r3, r1, r3
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	3332      	adds	r3, #50	@ 0x32
 8004620:	4a33      	ldr	r2, [pc, #204]	@ (80046f0 <UART_SetConfig+0x4e4>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800462c:	441c      	add	r4, r3
 800462e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004632:	2200      	movs	r2, #0
 8004634:	673b      	str	r3, [r7, #112]	@ 0x70
 8004636:	677a      	str	r2, [r7, #116]	@ 0x74
 8004638:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	1891      	adds	r1, r2, r2
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	415b      	adcs	r3, r3
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800464c:	4641      	mov	r1, r8
 800464e:	1851      	adds	r1, r2, r1
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	4649      	mov	r1, r9
 8004654:	414b      	adcs	r3, r1
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004664:	4659      	mov	r1, fp
 8004666:	00cb      	lsls	r3, r1, #3
 8004668:	4651      	mov	r1, sl
 800466a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466e:	4651      	mov	r1, sl
 8004670:	00ca      	lsls	r2, r1, #3
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	4603      	mov	r3, r0
 8004678:	4642      	mov	r2, r8
 800467a:	189b      	adds	r3, r3, r2
 800467c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800467e:	464b      	mov	r3, r9
 8004680:	460a      	mov	r2, r1
 8004682:	eb42 0303 	adc.w	r3, r2, r3
 8004686:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	663b      	str	r3, [r7, #96]	@ 0x60
 8004692:	667a      	str	r2, [r7, #100]	@ 0x64
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046a0:	4649      	mov	r1, r9
 80046a2:	008b      	lsls	r3, r1, #2
 80046a4:	4641      	mov	r1, r8
 80046a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046aa:	4641      	mov	r1, r8
 80046ac:	008a      	lsls	r2, r1, #2
 80046ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046b2:	f7fc fae9 	bl	8000c88 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <UART_SetConfig+0x4e4>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2164      	movs	r1, #100	@ 0x64
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	3332      	adds	r3, #50	@ 0x32
 80046ce:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <UART_SetConfig+0x4e4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4422      	add	r2, r4
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046ea:	46bd      	mov	sp, r7
 80046ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f0:	51eb851f 	.word	0x51eb851f

080046f4 <__cvt>:
 80046f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	ec57 6b10 	vmov	r6, r7, d0
 80046fc:	2f00      	cmp	r7, #0
 80046fe:	460c      	mov	r4, r1
 8004700:	4619      	mov	r1, r3
 8004702:	463b      	mov	r3, r7
 8004704:	bfbb      	ittet	lt
 8004706:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800470a:	461f      	movlt	r7, r3
 800470c:	2300      	movge	r3, #0
 800470e:	232d      	movlt	r3, #45	@ 0x2d
 8004710:	700b      	strb	r3, [r1, #0]
 8004712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004714:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004718:	4691      	mov	r9, r2
 800471a:	f023 0820 	bic.w	r8, r3, #32
 800471e:	bfbc      	itt	lt
 8004720:	4632      	movlt	r2, r6
 8004722:	4616      	movlt	r6, r2
 8004724:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004728:	d005      	beq.n	8004736 <__cvt+0x42>
 800472a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800472e:	d100      	bne.n	8004732 <__cvt+0x3e>
 8004730:	3401      	adds	r4, #1
 8004732:	2102      	movs	r1, #2
 8004734:	e000      	b.n	8004738 <__cvt+0x44>
 8004736:	2103      	movs	r1, #3
 8004738:	ab03      	add	r3, sp, #12
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	ab02      	add	r3, sp, #8
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	ec47 6b10 	vmov	d0, r6, r7
 8004744:	4653      	mov	r3, sl
 8004746:	4622      	mov	r2, r4
 8004748:	f001 f876 	bl	8005838 <_dtoa_r>
 800474c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004750:	4605      	mov	r5, r0
 8004752:	d119      	bne.n	8004788 <__cvt+0x94>
 8004754:	f019 0f01 	tst.w	r9, #1
 8004758:	d00e      	beq.n	8004778 <__cvt+0x84>
 800475a:	eb00 0904 	add.w	r9, r0, r4
 800475e:	2200      	movs	r2, #0
 8004760:	2300      	movs	r3, #0
 8004762:	4630      	mov	r0, r6
 8004764:	4639      	mov	r1, r7
 8004766:	f7fc f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800476a:	b108      	cbz	r0, 8004770 <__cvt+0x7c>
 800476c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004770:	2230      	movs	r2, #48	@ 0x30
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	454b      	cmp	r3, r9
 8004776:	d31e      	bcc.n	80047b6 <__cvt+0xc2>
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800477c:	1b5b      	subs	r3, r3, r5
 800477e:	4628      	mov	r0, r5
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	b004      	add	sp, #16
 8004784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004788:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800478c:	eb00 0904 	add.w	r9, r0, r4
 8004790:	d1e5      	bne.n	800475e <__cvt+0x6a>
 8004792:	7803      	ldrb	r3, [r0, #0]
 8004794:	2b30      	cmp	r3, #48	@ 0x30
 8004796:	d10a      	bne.n	80047ae <__cvt+0xba>
 8004798:	2200      	movs	r2, #0
 800479a:	2300      	movs	r3, #0
 800479c:	4630      	mov	r0, r6
 800479e:	4639      	mov	r1, r7
 80047a0:	f7fc f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80047a4:	b918      	cbnz	r0, 80047ae <__cvt+0xba>
 80047a6:	f1c4 0401 	rsb	r4, r4, #1
 80047aa:	f8ca 4000 	str.w	r4, [sl]
 80047ae:	f8da 3000 	ldr.w	r3, [sl]
 80047b2:	4499      	add	r9, r3
 80047b4:	e7d3      	b.n	800475e <__cvt+0x6a>
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	9103      	str	r1, [sp, #12]
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e7d9      	b.n	8004772 <__cvt+0x7e>

080047be <__exponent>:
 80047be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c0:	2900      	cmp	r1, #0
 80047c2:	bfba      	itte	lt
 80047c4:	4249      	neglt	r1, r1
 80047c6:	232d      	movlt	r3, #45	@ 0x2d
 80047c8:	232b      	movge	r3, #43	@ 0x2b
 80047ca:	2909      	cmp	r1, #9
 80047cc:	7002      	strb	r2, [r0, #0]
 80047ce:	7043      	strb	r3, [r0, #1]
 80047d0:	dd29      	ble.n	8004826 <__exponent+0x68>
 80047d2:	f10d 0307 	add.w	r3, sp, #7
 80047d6:	461d      	mov	r5, r3
 80047d8:	270a      	movs	r7, #10
 80047da:	461a      	mov	r2, r3
 80047dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80047e0:	fb07 1416 	mls	r4, r7, r6, r1
 80047e4:	3430      	adds	r4, #48	@ 0x30
 80047e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80047ea:	460c      	mov	r4, r1
 80047ec:	2c63      	cmp	r4, #99	@ 0x63
 80047ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80047f2:	4631      	mov	r1, r6
 80047f4:	dcf1      	bgt.n	80047da <__exponent+0x1c>
 80047f6:	3130      	adds	r1, #48	@ 0x30
 80047f8:	1e94      	subs	r4, r2, #2
 80047fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047fe:	1c41      	adds	r1, r0, #1
 8004800:	4623      	mov	r3, r4
 8004802:	42ab      	cmp	r3, r5
 8004804:	d30a      	bcc.n	800481c <__exponent+0x5e>
 8004806:	f10d 0309 	add.w	r3, sp, #9
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	42ac      	cmp	r4, r5
 800480e:	bf88      	it	hi
 8004810:	2300      	movhi	r3, #0
 8004812:	3302      	adds	r3, #2
 8004814:	4403      	add	r3, r0
 8004816:	1a18      	subs	r0, r3, r0
 8004818:	b003      	add	sp, #12
 800481a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004820:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004824:	e7ed      	b.n	8004802 <__exponent+0x44>
 8004826:	2330      	movs	r3, #48	@ 0x30
 8004828:	3130      	adds	r1, #48	@ 0x30
 800482a:	7083      	strb	r3, [r0, #2]
 800482c:	70c1      	strb	r1, [r0, #3]
 800482e:	1d03      	adds	r3, r0, #4
 8004830:	e7f1      	b.n	8004816 <__exponent+0x58>
	...

08004834 <_printf_float>:
 8004834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004838:	b08d      	sub	sp, #52	@ 0x34
 800483a:	460c      	mov	r4, r1
 800483c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004840:	4616      	mov	r6, r2
 8004842:	461f      	mov	r7, r3
 8004844:	4605      	mov	r5, r0
 8004846:	f000 feef 	bl	8005628 <_localeconv_r>
 800484a:	6803      	ldr	r3, [r0, #0]
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fb fd0e 	bl	8000270 <strlen>
 8004854:	2300      	movs	r3, #0
 8004856:	930a      	str	r3, [sp, #40]	@ 0x28
 8004858:	f8d8 3000 	ldr.w	r3, [r8]
 800485c:	9005      	str	r0, [sp, #20]
 800485e:	3307      	adds	r3, #7
 8004860:	f023 0307 	bic.w	r3, r3, #7
 8004864:	f103 0208 	add.w	r2, r3, #8
 8004868:	f894 a018 	ldrb.w	sl, [r4, #24]
 800486c:	f8d4 b000 	ldr.w	fp, [r4]
 8004870:	f8c8 2000 	str.w	r2, [r8]
 8004874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004878:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800487c:	9307      	str	r3, [sp, #28]
 800487e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004882:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800488a:	4b9c      	ldr	r3, [pc, #624]	@ (8004afc <_printf_float+0x2c8>)
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	f7fc f94c 	bl	8000b2c <__aeabi_dcmpun>
 8004894:	bb70      	cbnz	r0, 80048f4 <_printf_float+0xc0>
 8004896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800489a:	4b98      	ldr	r3, [pc, #608]	@ (8004afc <_printf_float+0x2c8>)
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	f7fc f926 	bl	8000af0 <__aeabi_dcmple>
 80048a4:	bb30      	cbnz	r0, 80048f4 <_printf_float+0xc0>
 80048a6:	2200      	movs	r2, #0
 80048a8:	2300      	movs	r3, #0
 80048aa:	4640      	mov	r0, r8
 80048ac:	4649      	mov	r1, r9
 80048ae:	f7fc f915 	bl	8000adc <__aeabi_dcmplt>
 80048b2:	b110      	cbz	r0, 80048ba <_printf_float+0x86>
 80048b4:	232d      	movs	r3, #45	@ 0x2d
 80048b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048ba:	4a91      	ldr	r2, [pc, #580]	@ (8004b00 <_printf_float+0x2cc>)
 80048bc:	4b91      	ldr	r3, [pc, #580]	@ (8004b04 <_printf_float+0x2d0>)
 80048be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048c2:	bf94      	ite	ls
 80048c4:	4690      	movls	r8, r2
 80048c6:	4698      	movhi	r8, r3
 80048c8:	2303      	movs	r3, #3
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	f02b 0304 	bic.w	r3, fp, #4
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	f04f 0900 	mov.w	r9, #0
 80048d6:	9700      	str	r7, [sp, #0]
 80048d8:	4633      	mov	r3, r6
 80048da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80048dc:	4621      	mov	r1, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 f9d2 	bl	8004c88 <_printf_common>
 80048e4:	3001      	adds	r0, #1
 80048e6:	f040 808d 	bne.w	8004a04 <_printf_float+0x1d0>
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295
 80048ee:	b00d      	add	sp, #52	@ 0x34
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	4649      	mov	r1, r9
 80048fc:	f7fc f916 	bl	8000b2c <__aeabi_dcmpun>
 8004900:	b140      	cbz	r0, 8004914 <_printf_float+0xe0>
 8004902:	464b      	mov	r3, r9
 8004904:	2b00      	cmp	r3, #0
 8004906:	bfbc      	itt	lt
 8004908:	232d      	movlt	r3, #45	@ 0x2d
 800490a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800490e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b08 <_printf_float+0x2d4>)
 8004910:	4b7e      	ldr	r3, [pc, #504]	@ (8004b0c <_printf_float+0x2d8>)
 8004912:	e7d4      	b.n	80048be <_printf_float+0x8a>
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800491a:	9206      	str	r2, [sp, #24]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	d13b      	bne.n	8004998 <_printf_float+0x164>
 8004920:	2306      	movs	r3, #6
 8004922:	6063      	str	r3, [r4, #4]
 8004924:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004928:	2300      	movs	r3, #0
 800492a:	6022      	str	r2, [r4, #0]
 800492c:	9303      	str	r3, [sp, #12]
 800492e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004930:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004934:	ab09      	add	r3, sp, #36	@ 0x24
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	6861      	ldr	r1, [r4, #4]
 800493a:	ec49 8b10 	vmov	d0, r8, r9
 800493e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004942:	4628      	mov	r0, r5
 8004944:	f7ff fed6 	bl	80046f4 <__cvt>
 8004948:	9b06      	ldr	r3, [sp, #24]
 800494a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800494c:	2b47      	cmp	r3, #71	@ 0x47
 800494e:	4680      	mov	r8, r0
 8004950:	d129      	bne.n	80049a6 <_printf_float+0x172>
 8004952:	1cc8      	adds	r0, r1, #3
 8004954:	db02      	blt.n	800495c <_printf_float+0x128>
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	4299      	cmp	r1, r3
 800495a:	dd41      	ble.n	80049e0 <_printf_float+0x1ac>
 800495c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004960:	fa5f fa8a 	uxtb.w	sl, sl
 8004964:	3901      	subs	r1, #1
 8004966:	4652      	mov	r2, sl
 8004968:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800496c:	9109      	str	r1, [sp, #36]	@ 0x24
 800496e:	f7ff ff26 	bl	80047be <__exponent>
 8004972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004974:	1813      	adds	r3, r2, r0
 8004976:	2a01      	cmp	r2, #1
 8004978:	4681      	mov	r9, r0
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	dc02      	bgt.n	8004984 <_printf_float+0x150>
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	07d2      	lsls	r2, r2, #31
 8004982:	d501      	bpl.n	8004988 <_printf_float+0x154>
 8004984:	3301      	adds	r3, #1
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0a2      	beq.n	80048d6 <_printf_float+0xa2>
 8004990:	232d      	movs	r3, #45	@ 0x2d
 8004992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004996:	e79e      	b.n	80048d6 <_printf_float+0xa2>
 8004998:	9a06      	ldr	r2, [sp, #24]
 800499a:	2a47      	cmp	r2, #71	@ 0x47
 800499c:	d1c2      	bne.n	8004924 <_printf_float+0xf0>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1c0      	bne.n	8004924 <_printf_float+0xf0>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e7bd      	b.n	8004922 <_printf_float+0xee>
 80049a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049aa:	d9db      	bls.n	8004964 <_printf_float+0x130>
 80049ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80049b0:	d118      	bne.n	80049e4 <_printf_float+0x1b0>
 80049b2:	2900      	cmp	r1, #0
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	dd0b      	ble.n	80049d0 <_printf_float+0x19c>
 80049b8:	6121      	str	r1, [r4, #16]
 80049ba:	b913      	cbnz	r3, 80049c2 <_printf_float+0x18e>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	07d0      	lsls	r0, r2, #31
 80049c0:	d502      	bpl.n	80049c8 <_printf_float+0x194>
 80049c2:	3301      	adds	r3, #1
 80049c4:	440b      	add	r3, r1
 80049c6:	6123      	str	r3, [r4, #16]
 80049c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80049ca:	f04f 0900 	mov.w	r9, #0
 80049ce:	e7db      	b.n	8004988 <_printf_float+0x154>
 80049d0:	b913      	cbnz	r3, 80049d8 <_printf_float+0x1a4>
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	07d2      	lsls	r2, r2, #31
 80049d6:	d501      	bpl.n	80049dc <_printf_float+0x1a8>
 80049d8:	3302      	adds	r3, #2
 80049da:	e7f4      	b.n	80049c6 <_printf_float+0x192>
 80049dc:	2301      	movs	r3, #1
 80049de:	e7f2      	b.n	80049c6 <_printf_float+0x192>
 80049e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80049e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049e6:	4299      	cmp	r1, r3
 80049e8:	db05      	blt.n	80049f6 <_printf_float+0x1c2>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	6121      	str	r1, [r4, #16]
 80049ee:	07d8      	lsls	r0, r3, #31
 80049f0:	d5ea      	bpl.n	80049c8 <_printf_float+0x194>
 80049f2:	1c4b      	adds	r3, r1, #1
 80049f4:	e7e7      	b.n	80049c6 <_printf_float+0x192>
 80049f6:	2900      	cmp	r1, #0
 80049f8:	bfd4      	ite	le
 80049fa:	f1c1 0202 	rsble	r2, r1, #2
 80049fe:	2201      	movgt	r2, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	e7e0      	b.n	80049c6 <_printf_float+0x192>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	055a      	lsls	r2, r3, #21
 8004a08:	d407      	bmi.n	8004a1a <_printf_float+0x1e6>
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	d12b      	bne.n	8004a70 <_printf_float+0x23c>
 8004a18:	e767      	b.n	80048ea <_printf_float+0xb6>
 8004a1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a1e:	f240 80dd 	bls.w	8004bdc <_printf_float+0x3a8>
 8004a22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a26:	2200      	movs	r2, #0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f7fc f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d033      	beq.n	8004a9a <_printf_float+0x266>
 8004a32:	4a37      	ldr	r2, [pc, #220]	@ (8004b10 <_printf_float+0x2dc>)
 8004a34:	2301      	movs	r3, #1
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f af54 	beq.w	80048ea <_printf_float+0xb6>
 8004a42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004a46:	4543      	cmp	r3, r8
 8004a48:	db02      	blt.n	8004a50 <_printf_float+0x21c>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	07d8      	lsls	r0, r3, #31
 8004a4e:	d50f      	bpl.n	8004a70 <_printf_float+0x23c>
 8004a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f af45 	beq.w	80048ea <_printf_float+0xb6>
 8004a60:	f04f 0900 	mov.w	r9, #0
 8004a64:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a68:	f104 0a1a 	add.w	sl, r4, #26
 8004a6c:	45c8      	cmp	r8, r9
 8004a6e:	dc09      	bgt.n	8004a84 <_printf_float+0x250>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	079b      	lsls	r3, r3, #30
 8004a74:	f100 8103 	bmi.w	8004c7e <_printf_float+0x44a>
 8004a78:	68e0      	ldr	r0, [r4, #12]
 8004a7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a7c:	4298      	cmp	r0, r3
 8004a7e:	bfb8      	it	lt
 8004a80:	4618      	movlt	r0, r3
 8004a82:	e734      	b.n	80048ee <_printf_float+0xba>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4652      	mov	r2, sl
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f af2b 	beq.w	80048ea <_printf_float+0xb6>
 8004a94:	f109 0901 	add.w	r9, r9, #1
 8004a98:	e7e8      	b.n	8004a6c <_printf_float+0x238>
 8004a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	dc39      	bgt.n	8004b14 <_printf_float+0x2e0>
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <_printf_float+0x2dc>)
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b8      	blx	r7
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f43f af1d 	beq.w	80048ea <_printf_float+0xb6>
 8004ab0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004ab4:	ea59 0303 	orrs.w	r3, r9, r3
 8004ab8:	d102      	bne.n	8004ac0 <_printf_float+0x28c>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	07d9      	lsls	r1, r3, #31
 8004abe:	d5d7      	bpl.n	8004a70 <_printf_float+0x23c>
 8004ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	f43f af0d 	beq.w	80048ea <_printf_float+0xb6>
 8004ad0:	f04f 0a00 	mov.w	sl, #0
 8004ad4:	f104 0b1a 	add.w	fp, r4, #26
 8004ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ada:	425b      	negs	r3, r3
 8004adc:	4553      	cmp	r3, sl
 8004ade:	dc01      	bgt.n	8004ae4 <_printf_float+0x2b0>
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	e793      	b.n	8004a0c <_printf_float+0x1d8>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	465a      	mov	r2, fp
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4628      	mov	r0, r5
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f aefb 	beq.w	80048ea <_printf_float+0xb6>
 8004af4:	f10a 0a01 	add.w	sl, sl, #1
 8004af8:	e7ee      	b.n	8004ad8 <_printf_float+0x2a4>
 8004afa:	bf00      	nop
 8004afc:	7fefffff 	.word	0x7fefffff
 8004b00:	08008e44 	.word	0x08008e44
 8004b04:	08008e48 	.word	0x08008e48
 8004b08:	08008e4c 	.word	0x08008e4c
 8004b0c:	08008e50 	.word	0x08008e50
 8004b10:	08008e54 	.word	0x08008e54
 8004b14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b1a:	4553      	cmp	r3, sl
 8004b1c:	bfa8      	it	ge
 8004b1e:	4653      	movge	r3, sl
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	4699      	mov	r9, r3
 8004b24:	dc36      	bgt.n	8004b94 <_printf_float+0x360>
 8004b26:	f04f 0b00 	mov.w	fp, #0
 8004b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b2e:	f104 021a 	add.w	r2, r4, #26
 8004b32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b34:	9306      	str	r3, [sp, #24]
 8004b36:	eba3 0309 	sub.w	r3, r3, r9
 8004b3a:	455b      	cmp	r3, fp
 8004b3c:	dc31      	bgt.n	8004ba2 <_printf_float+0x36e>
 8004b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b40:	459a      	cmp	sl, r3
 8004b42:	dc3a      	bgt.n	8004bba <_printf_float+0x386>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	07da      	lsls	r2, r3, #31
 8004b48:	d437      	bmi.n	8004bba <_printf_float+0x386>
 8004b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b4c:	ebaa 0903 	sub.w	r9, sl, r3
 8004b50:	9b06      	ldr	r3, [sp, #24]
 8004b52:	ebaa 0303 	sub.w	r3, sl, r3
 8004b56:	4599      	cmp	r9, r3
 8004b58:	bfa8      	it	ge
 8004b5a:	4699      	movge	r9, r3
 8004b5c:	f1b9 0f00 	cmp.w	r9, #0
 8004b60:	dc33      	bgt.n	8004bca <_printf_float+0x396>
 8004b62:	f04f 0800 	mov.w	r8, #0
 8004b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b6a:	f104 0b1a 	add.w	fp, r4, #26
 8004b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b70:	ebaa 0303 	sub.w	r3, sl, r3
 8004b74:	eba3 0309 	sub.w	r3, r3, r9
 8004b78:	4543      	cmp	r3, r8
 8004b7a:	f77f af79 	ble.w	8004a70 <_printf_float+0x23c>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	465a      	mov	r2, fp
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	47b8      	blx	r7
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f43f aeae 	beq.w	80048ea <_printf_float+0xb6>
 8004b8e:	f108 0801 	add.w	r8, r8, #1
 8004b92:	e7ec      	b.n	8004b6e <_printf_float+0x33a>
 8004b94:	4642      	mov	r2, r8
 8004b96:	4631      	mov	r1, r6
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b8      	blx	r7
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d1c2      	bne.n	8004b26 <_printf_float+0x2f2>
 8004ba0:	e6a3      	b.n	80048ea <_printf_float+0xb6>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	9206      	str	r2, [sp, #24]
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	f43f ae9c 	beq.w	80048ea <_printf_float+0xb6>
 8004bb2:	9a06      	ldr	r2, [sp, #24]
 8004bb4:	f10b 0b01 	add.w	fp, fp, #1
 8004bb8:	e7bb      	b.n	8004b32 <_printf_float+0x2fe>
 8004bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b8      	blx	r7
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d1c0      	bne.n	8004b4a <_printf_float+0x316>
 8004bc8:	e68f      	b.n	80048ea <_printf_float+0xb6>
 8004bca:	9a06      	ldr	r2, [sp, #24]
 8004bcc:	464b      	mov	r3, r9
 8004bce:	4442      	add	r2, r8
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d1c3      	bne.n	8004b62 <_printf_float+0x32e>
 8004bda:	e686      	b.n	80048ea <_printf_float+0xb6>
 8004bdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004be0:	f1ba 0f01 	cmp.w	sl, #1
 8004be4:	dc01      	bgt.n	8004bea <_printf_float+0x3b6>
 8004be6:	07db      	lsls	r3, r3, #31
 8004be8:	d536      	bpl.n	8004c58 <_printf_float+0x424>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4642      	mov	r2, r8
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f43f ae78 	beq.w	80048ea <_printf_float+0xb6>
 8004bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f ae70 	beq.w	80048ea <_printf_float+0xb6>
 8004c0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2300      	movs	r3, #0
 8004c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c16:	f7fb ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c1a:	b9c0      	cbnz	r0, 8004c4e <_printf_float+0x41a>
 8004c1c:	4653      	mov	r3, sl
 8004c1e:	f108 0201 	add.w	r2, r8, #1
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d10c      	bne.n	8004c46 <_printf_float+0x412>
 8004c2c:	e65d      	b.n	80048ea <_printf_float+0xb6>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	465a      	mov	r2, fp
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f43f ae56 	beq.w	80048ea <_printf_float+0xb6>
 8004c3e:	f108 0801 	add.w	r8, r8, #1
 8004c42:	45d0      	cmp	r8, sl
 8004c44:	dbf3      	blt.n	8004c2e <_printf_float+0x3fa>
 8004c46:	464b      	mov	r3, r9
 8004c48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c4c:	e6df      	b.n	8004a0e <_printf_float+0x1da>
 8004c4e:	f04f 0800 	mov.w	r8, #0
 8004c52:	f104 0b1a 	add.w	fp, r4, #26
 8004c56:	e7f4      	b.n	8004c42 <_printf_float+0x40e>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	e7e1      	b.n	8004c22 <_printf_float+0x3ee>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	464a      	mov	r2, r9
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f ae3e 	beq.w	80048ea <_printf_float+0xb6>
 8004c6e:	f108 0801 	add.w	r8, r8, #1
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c76:	1a5b      	subs	r3, r3, r1
 8004c78:	4543      	cmp	r3, r8
 8004c7a:	dcf0      	bgt.n	8004c5e <_printf_float+0x42a>
 8004c7c:	e6fc      	b.n	8004a78 <_printf_float+0x244>
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	f104 0919 	add.w	r9, r4, #25
 8004c86:	e7f4      	b.n	8004c72 <_printf_float+0x43e>

08004c88 <_printf_common>:
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	4698      	mov	r8, r3
 8004c90:	688a      	ldr	r2, [r1, #8]
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bfb8      	it	lt
 8004c9c:	4613      	movlt	r3, r2
 8004c9e:	6033      	str	r3, [r6, #0]
 8004ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	b10a      	cbz	r2, 8004cae <_printf_common+0x26>
 8004caa:	3301      	adds	r3, #1
 8004cac:	6033      	str	r3, [r6, #0]
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	0699      	lsls	r1, r3, #26
 8004cb2:	bf42      	ittt	mi
 8004cb4:	6833      	ldrmi	r3, [r6, #0]
 8004cb6:	3302      	addmi	r3, #2
 8004cb8:	6033      	strmi	r3, [r6, #0]
 8004cba:	6825      	ldr	r5, [r4, #0]
 8004cbc:	f015 0506 	ands.w	r5, r5, #6
 8004cc0:	d106      	bne.n	8004cd0 <_printf_common+0x48>
 8004cc2:	f104 0a19 	add.w	sl, r4, #25
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	6832      	ldr	r2, [r6, #0]
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	42ab      	cmp	r3, r5
 8004cce:	dc26      	bgt.n	8004d1e <_printf_common+0x96>
 8004cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cd4:	6822      	ldr	r2, [r4, #0]
 8004cd6:	3b00      	subs	r3, #0
 8004cd8:	bf18      	it	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	0692      	lsls	r2, r2, #26
 8004cde:	d42b      	bmi.n	8004d38 <_printf_common+0xb0>
 8004ce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ce4:	4641      	mov	r1, r8
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	47c8      	blx	r9
 8004cea:	3001      	adds	r0, #1
 8004cec:	d01e      	beq.n	8004d2c <_printf_common+0xa4>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	f003 0306 	and.w	r3, r3, #6
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	bf02      	ittt	eq
 8004cfa:	68e5      	ldreq	r5, [r4, #12]
 8004cfc:	6833      	ldreq	r3, [r6, #0]
 8004cfe:	1aed      	subeq	r5, r5, r3
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	bf0c      	ite	eq
 8004d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d08:	2500      	movne	r5, #0
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	bfc4      	itt	gt
 8004d0e:	1a9b      	subgt	r3, r3, r2
 8004d10:	18ed      	addgt	r5, r5, r3
 8004d12:	2600      	movs	r6, #0
 8004d14:	341a      	adds	r4, #26
 8004d16:	42b5      	cmp	r5, r6
 8004d18:	d11a      	bne.n	8004d50 <_printf_common+0xc8>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e008      	b.n	8004d30 <_printf_common+0xa8>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4652      	mov	r2, sl
 8004d22:	4641      	mov	r1, r8
 8004d24:	4638      	mov	r0, r7
 8004d26:	47c8      	blx	r9
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d103      	bne.n	8004d34 <_printf_common+0xac>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d34:	3501      	adds	r5, #1
 8004d36:	e7c6      	b.n	8004cc6 <_printf_common+0x3e>
 8004d38:	18e1      	adds	r1, r4, r3
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	2030      	movs	r0, #48	@ 0x30
 8004d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d42:	4422      	add	r2, r4
 8004d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	e7c7      	b.n	8004ce0 <_printf_common+0x58>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4622      	mov	r2, r4
 8004d54:	4641      	mov	r1, r8
 8004d56:	4638      	mov	r0, r7
 8004d58:	47c8      	blx	r9
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d0e6      	beq.n	8004d2c <_printf_common+0xa4>
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7d9      	b.n	8004d16 <_printf_common+0x8e>
	...

08004d64 <_printf_i>:
 8004d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	7e0f      	ldrb	r7, [r1, #24]
 8004d6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d6c:	2f78      	cmp	r7, #120	@ 0x78
 8004d6e:	4691      	mov	r9, r2
 8004d70:	4680      	mov	r8, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	469a      	mov	sl, r3
 8004d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d7a:	d807      	bhi.n	8004d8c <_printf_i+0x28>
 8004d7c:	2f62      	cmp	r7, #98	@ 0x62
 8004d7e:	d80a      	bhi.n	8004d96 <_printf_i+0x32>
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	f000 80d2 	beq.w	8004f2a <_printf_i+0x1c6>
 8004d86:	2f58      	cmp	r7, #88	@ 0x58
 8004d88:	f000 80b9 	beq.w	8004efe <_printf_i+0x19a>
 8004d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d94:	e03a      	b.n	8004e0c <_printf_i+0xa8>
 8004d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d9a:	2b15      	cmp	r3, #21
 8004d9c:	d8f6      	bhi.n	8004d8c <_printf_i+0x28>
 8004d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004da4 <_printf_i+0x40>)
 8004da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da4:	08004dfd 	.word	0x08004dfd
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004d8d 	.word	0x08004d8d
 8004db0:	08004d8d 	.word	0x08004d8d
 8004db4:	08004d8d 	.word	0x08004d8d
 8004db8:	08004d8d 	.word	0x08004d8d
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004d8d 	.word	0x08004d8d
 8004dc4:	08004d8d 	.word	0x08004d8d
 8004dc8:	08004d8d 	.word	0x08004d8d
 8004dcc:	08004d8d 	.word	0x08004d8d
 8004dd0:	08004f11 	.word	0x08004f11
 8004dd4:	08004e3b 	.word	0x08004e3b
 8004dd8:	08004ecb 	.word	0x08004ecb
 8004ddc:	08004d8d 	.word	0x08004d8d
 8004de0:	08004d8d 	.word	0x08004d8d
 8004de4:	08004f33 	.word	0x08004f33
 8004de8:	08004d8d 	.word	0x08004d8d
 8004dec:	08004e3b 	.word	0x08004e3b
 8004df0:	08004d8d 	.word	0x08004d8d
 8004df4:	08004d8d 	.word	0x08004d8d
 8004df8:	08004ed3 	.word	0x08004ed3
 8004dfc:	6833      	ldr	r3, [r6, #0]
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6032      	str	r2, [r6, #0]
 8004e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e09d      	b.n	8004f4c <_printf_i+0x1e8>
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	6820      	ldr	r0, [r4, #0]
 8004e14:	1d19      	adds	r1, r3, #4
 8004e16:	6031      	str	r1, [r6, #0]
 8004e18:	0606      	lsls	r6, r0, #24
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0xbc>
 8004e1c:	681d      	ldr	r5, [r3, #0]
 8004e1e:	e003      	b.n	8004e28 <_printf_i+0xc4>
 8004e20:	0645      	lsls	r5, r0, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0xb8>
 8004e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	da03      	bge.n	8004e34 <_printf_i+0xd0>
 8004e2c:	232d      	movs	r3, #45	@ 0x2d
 8004e2e:	426d      	negs	r5, r5
 8004e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e34:	4859      	ldr	r0, [pc, #356]	@ (8004f9c <_printf_i+0x238>)
 8004e36:	230a      	movs	r3, #10
 8004e38:	e011      	b.n	8004e5e <_printf_i+0xfa>
 8004e3a:	6821      	ldr	r1, [r4, #0]
 8004e3c:	6833      	ldr	r3, [r6, #0]
 8004e3e:	0608      	lsls	r0, r1, #24
 8004e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e44:	d402      	bmi.n	8004e4c <_printf_i+0xe8>
 8004e46:	0649      	lsls	r1, r1, #25
 8004e48:	bf48      	it	mi
 8004e4a:	b2ad      	uxthmi	r5, r5
 8004e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e4e:	4853      	ldr	r0, [pc, #332]	@ (8004f9c <_printf_i+0x238>)
 8004e50:	6033      	str	r3, [r6, #0]
 8004e52:	bf14      	ite	ne
 8004e54:	230a      	movne	r3, #10
 8004e56:	2308      	moveq	r3, #8
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e5e:	6866      	ldr	r6, [r4, #4]
 8004e60:	60a6      	str	r6, [r4, #8]
 8004e62:	2e00      	cmp	r6, #0
 8004e64:	bfa2      	ittt	ge
 8004e66:	6821      	ldrge	r1, [r4, #0]
 8004e68:	f021 0104 	bicge.w	r1, r1, #4
 8004e6c:	6021      	strge	r1, [r4, #0]
 8004e6e:	b90d      	cbnz	r5, 8004e74 <_printf_i+0x110>
 8004e70:	2e00      	cmp	r6, #0
 8004e72:	d04b      	beq.n	8004f0c <_printf_i+0x1a8>
 8004e74:	4616      	mov	r6, r2
 8004e76:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e7a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e7e:	5dc7      	ldrb	r7, [r0, r7]
 8004e80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e84:	462f      	mov	r7, r5
 8004e86:	42bb      	cmp	r3, r7
 8004e88:	460d      	mov	r5, r1
 8004e8a:	d9f4      	bls.n	8004e76 <_printf_i+0x112>
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d10b      	bne.n	8004ea8 <_printf_i+0x144>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	07df      	lsls	r7, r3, #31
 8004e94:	d508      	bpl.n	8004ea8 <_printf_i+0x144>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	6861      	ldr	r1, [r4, #4]
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	bfde      	ittt	le
 8004e9e:	2330      	movle	r3, #48	@ 0x30
 8004ea0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ea4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ea8:	1b92      	subs	r2, r2, r6
 8004eaa:	6122      	str	r2, [r4, #16]
 8004eac:	f8cd a000 	str.w	sl, [sp]
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	aa03      	add	r2, sp, #12
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff fee6 	bl	8004c88 <_printf_common>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d14a      	bne.n	8004f56 <_printf_i+0x1f2>
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	b004      	add	sp, #16
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	f043 0320 	orr.w	r3, r3, #32
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	4833      	ldr	r0, [pc, #204]	@ (8004fa0 <_printf_i+0x23c>)
 8004ed4:	2778      	movs	r7, #120	@ 0x78
 8004ed6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	6831      	ldr	r1, [r6, #0]
 8004ede:	061f      	lsls	r7, r3, #24
 8004ee0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ee4:	d402      	bmi.n	8004eec <_printf_i+0x188>
 8004ee6:	065f      	lsls	r7, r3, #25
 8004ee8:	bf48      	it	mi
 8004eea:	b2ad      	uxthmi	r5, r5
 8004eec:	6031      	str	r1, [r6, #0]
 8004eee:	07d9      	lsls	r1, r3, #31
 8004ef0:	bf44      	itt	mi
 8004ef2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef6:	6023      	strmi	r3, [r4, #0]
 8004ef8:	b11d      	cbz	r5, 8004f02 <_printf_i+0x19e>
 8004efa:	2310      	movs	r3, #16
 8004efc:	e7ac      	b.n	8004e58 <_printf_i+0xf4>
 8004efe:	4827      	ldr	r0, [pc, #156]	@ (8004f9c <_printf_i+0x238>)
 8004f00:	e7e9      	b.n	8004ed6 <_printf_i+0x172>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f023 0320 	bic.w	r3, r3, #32
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	e7f6      	b.n	8004efa <_printf_i+0x196>
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	e7bd      	b.n	8004e8c <_printf_i+0x128>
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	6825      	ldr	r5, [r4, #0]
 8004f14:	6961      	ldr	r1, [r4, #20]
 8004f16:	1d18      	adds	r0, r3, #4
 8004f18:	6030      	str	r0, [r6, #0]
 8004f1a:	062e      	lsls	r6, r5, #24
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0x1c0>
 8004f20:	6019      	str	r1, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <_printf_i+0x1c6>
 8004f24:	0668      	lsls	r0, r5, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0x1bc>
 8004f28:	8019      	strh	r1, [r3, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	4616      	mov	r6, r2
 8004f30:	e7bc      	b.n	8004eac <_printf_i+0x148>
 8004f32:	6833      	ldr	r3, [r6, #0]
 8004f34:	1d1a      	adds	r2, r3, #4
 8004f36:	6032      	str	r2, [r6, #0]
 8004f38:	681e      	ldr	r6, [r3, #0]
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f7fb f946 	bl	80001d0 <memchr>
 8004f44:	b108      	cbz	r0, 8004f4a <_printf_i+0x1e6>
 8004f46:	1b80      	subs	r0, r0, r6
 8004f48:	6060      	str	r0, [r4, #4]
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f54:	e7aa      	b.n	8004eac <_printf_i+0x148>
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	4632      	mov	r2, r6
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	47d0      	blx	sl
 8004f60:	3001      	adds	r0, #1
 8004f62:	d0ad      	beq.n	8004ec0 <_printf_i+0x15c>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	079b      	lsls	r3, r3, #30
 8004f68:	d413      	bmi.n	8004f92 <_printf_i+0x22e>
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	bfb8      	it	lt
 8004f72:	4618      	movlt	r0, r3
 8004f74:	e7a6      	b.n	8004ec4 <_printf_i+0x160>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	47d0      	blx	sl
 8004f80:	3001      	adds	r0, #1
 8004f82:	d09d      	beq.n	8004ec0 <_printf_i+0x15c>
 8004f84:	3501      	adds	r5, #1
 8004f86:	68e3      	ldr	r3, [r4, #12]
 8004f88:	9903      	ldr	r1, [sp, #12]
 8004f8a:	1a5b      	subs	r3, r3, r1
 8004f8c:	42ab      	cmp	r3, r5
 8004f8e:	dcf2      	bgt.n	8004f76 <_printf_i+0x212>
 8004f90:	e7eb      	b.n	8004f6a <_printf_i+0x206>
 8004f92:	2500      	movs	r5, #0
 8004f94:	f104 0619 	add.w	r6, r4, #25
 8004f98:	e7f5      	b.n	8004f86 <_printf_i+0x222>
 8004f9a:	bf00      	nop
 8004f9c:	08008e56 	.word	0x08008e56
 8004fa0:	08008e67 	.word	0x08008e67

08004fa4 <_scanf_float>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	4617      	mov	r7, r2
 8004fac:	9303      	str	r3, [sp, #12]
 8004fae:	688b      	ldr	r3, [r1, #8]
 8004fb0:	1e5a      	subs	r2, r3, #1
 8004fb2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004fb6:	bf81      	itttt	hi
 8004fb8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004fbc:	eb03 0b05 	addhi.w	fp, r3, r5
 8004fc0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004fc4:	608b      	strhi	r3, [r1, #8]
 8004fc6:	680b      	ldr	r3, [r1, #0]
 8004fc8:	460a      	mov	r2, r1
 8004fca:	f04f 0500 	mov.w	r5, #0
 8004fce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004fd2:	f842 3b1c 	str.w	r3, [r2], #28
 8004fd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fda:	4680      	mov	r8, r0
 8004fdc:	460c      	mov	r4, r1
 8004fde:	bf98      	it	ls
 8004fe0:	f04f 0b00 	movls.w	fp, #0
 8004fe4:	9201      	str	r2, [sp, #4]
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	46aa      	mov	sl, r5
 8004fea:	46a9      	mov	r9, r5
 8004fec:	9502      	str	r5, [sp, #8]
 8004fee:	68a2      	ldr	r2, [r4, #8]
 8004ff0:	b152      	cbz	r2, 8005008 <_scanf_float+0x64>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ff8:	d864      	bhi.n	80050c4 <_scanf_float+0x120>
 8004ffa:	2b40      	cmp	r3, #64	@ 0x40
 8004ffc:	d83c      	bhi.n	8005078 <_scanf_float+0xd4>
 8004ffe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005002:	b2c8      	uxtb	r0, r1
 8005004:	280e      	cmp	r0, #14
 8005006:	d93a      	bls.n	800507e <_scanf_float+0xda>
 8005008:	f1b9 0f00 	cmp.w	r9, #0
 800500c:	d003      	beq.n	8005016 <_scanf_float+0x72>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800501a:	f1ba 0f01 	cmp.w	sl, #1
 800501e:	f200 8117 	bhi.w	8005250 <_scanf_float+0x2ac>
 8005022:	9b01      	ldr	r3, [sp, #4]
 8005024:	429e      	cmp	r6, r3
 8005026:	f200 8108 	bhi.w	800523a <_scanf_float+0x296>
 800502a:	2001      	movs	r0, #1
 800502c:	b007      	add	sp, #28
 800502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005032:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005036:	2a0d      	cmp	r2, #13
 8005038:	d8e6      	bhi.n	8005008 <_scanf_float+0x64>
 800503a:	a101      	add	r1, pc, #4	@ (adr r1, 8005040 <_scanf_float+0x9c>)
 800503c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005040:	08005187 	.word	0x08005187
 8005044:	08005009 	.word	0x08005009
 8005048:	08005009 	.word	0x08005009
 800504c:	08005009 	.word	0x08005009
 8005050:	080051e7 	.word	0x080051e7
 8005054:	080051bf 	.word	0x080051bf
 8005058:	08005009 	.word	0x08005009
 800505c:	08005009 	.word	0x08005009
 8005060:	08005195 	.word	0x08005195
 8005064:	08005009 	.word	0x08005009
 8005068:	08005009 	.word	0x08005009
 800506c:	08005009 	.word	0x08005009
 8005070:	08005009 	.word	0x08005009
 8005074:	0800514d 	.word	0x0800514d
 8005078:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800507c:	e7db      	b.n	8005036 <_scanf_float+0x92>
 800507e:	290e      	cmp	r1, #14
 8005080:	d8c2      	bhi.n	8005008 <_scanf_float+0x64>
 8005082:	a001      	add	r0, pc, #4	@ (adr r0, 8005088 <_scanf_float+0xe4>)
 8005084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005088:	0800513d 	.word	0x0800513d
 800508c:	08005009 	.word	0x08005009
 8005090:	0800513d 	.word	0x0800513d
 8005094:	080051d3 	.word	0x080051d3
 8005098:	08005009 	.word	0x08005009
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	08005123 	.word	0x08005123
 80050a4:	08005123 	.word	0x08005123
 80050a8:	08005123 	.word	0x08005123
 80050ac:	08005123 	.word	0x08005123
 80050b0:	08005123 	.word	0x08005123
 80050b4:	08005123 	.word	0x08005123
 80050b8:	08005123 	.word	0x08005123
 80050bc:	08005123 	.word	0x08005123
 80050c0:	08005123 	.word	0x08005123
 80050c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80050c6:	d809      	bhi.n	80050dc <_scanf_float+0x138>
 80050c8:	2b60      	cmp	r3, #96	@ 0x60
 80050ca:	d8b2      	bhi.n	8005032 <_scanf_float+0x8e>
 80050cc:	2b54      	cmp	r3, #84	@ 0x54
 80050ce:	d07b      	beq.n	80051c8 <_scanf_float+0x224>
 80050d0:	2b59      	cmp	r3, #89	@ 0x59
 80050d2:	d199      	bne.n	8005008 <_scanf_float+0x64>
 80050d4:	2d07      	cmp	r5, #7
 80050d6:	d197      	bne.n	8005008 <_scanf_float+0x64>
 80050d8:	2508      	movs	r5, #8
 80050da:	e02c      	b.n	8005136 <_scanf_float+0x192>
 80050dc:	2b74      	cmp	r3, #116	@ 0x74
 80050de:	d073      	beq.n	80051c8 <_scanf_float+0x224>
 80050e0:	2b79      	cmp	r3, #121	@ 0x79
 80050e2:	e7f6      	b.n	80050d2 <_scanf_float+0x12e>
 80050e4:	6821      	ldr	r1, [r4, #0]
 80050e6:	05c8      	lsls	r0, r1, #23
 80050e8:	d51b      	bpl.n	8005122 <_scanf_float+0x17e>
 80050ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80050ee:	6021      	str	r1, [r4, #0]
 80050f0:	f109 0901 	add.w	r9, r9, #1
 80050f4:	f1bb 0f00 	cmp.w	fp, #0
 80050f8:	d003      	beq.n	8005102 <_scanf_float+0x15e>
 80050fa:	3201      	adds	r2, #1
 80050fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005100:	60a2      	str	r2, [r4, #8]
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	3b01      	subs	r3, #1
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	3301      	adds	r3, #1
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3b01      	subs	r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	f340 8087 	ble.w	8005228 <_scanf_float+0x284>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	e765      	b.n	8004fee <_scanf_float+0x4a>
 8005122:	eb1a 0105 	adds.w	r1, sl, r5
 8005126:	f47f af6f 	bne.w	8005008 <_scanf_float+0x64>
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005130:	6022      	str	r2, [r4, #0]
 8005132:	460d      	mov	r5, r1
 8005134:	468a      	mov	sl, r1
 8005136:	f806 3b01 	strb.w	r3, [r6], #1
 800513a:	e7e2      	b.n	8005102 <_scanf_float+0x15e>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	0610      	lsls	r0, r2, #24
 8005140:	f57f af62 	bpl.w	8005008 <_scanf_float+0x64>
 8005144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005148:	6022      	str	r2, [r4, #0]
 800514a:	e7f4      	b.n	8005136 <_scanf_float+0x192>
 800514c:	f1ba 0f00 	cmp.w	sl, #0
 8005150:	d10e      	bne.n	8005170 <_scanf_float+0x1cc>
 8005152:	f1b9 0f00 	cmp.w	r9, #0
 8005156:	d10e      	bne.n	8005176 <_scanf_float+0x1d2>
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800515e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005162:	d108      	bne.n	8005176 <_scanf_float+0x1d2>
 8005164:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005168:	6022      	str	r2, [r4, #0]
 800516a:	f04f 0a01 	mov.w	sl, #1
 800516e:	e7e2      	b.n	8005136 <_scanf_float+0x192>
 8005170:	f1ba 0f02 	cmp.w	sl, #2
 8005174:	d055      	beq.n	8005222 <_scanf_float+0x27e>
 8005176:	2d01      	cmp	r5, #1
 8005178:	d002      	beq.n	8005180 <_scanf_float+0x1dc>
 800517a:	2d04      	cmp	r5, #4
 800517c:	f47f af44 	bne.w	8005008 <_scanf_float+0x64>
 8005180:	3501      	adds	r5, #1
 8005182:	b2ed      	uxtb	r5, r5
 8005184:	e7d7      	b.n	8005136 <_scanf_float+0x192>
 8005186:	f1ba 0f01 	cmp.w	sl, #1
 800518a:	f47f af3d 	bne.w	8005008 <_scanf_float+0x64>
 800518e:	f04f 0a02 	mov.w	sl, #2
 8005192:	e7d0      	b.n	8005136 <_scanf_float+0x192>
 8005194:	b97d      	cbnz	r5, 80051b6 <_scanf_float+0x212>
 8005196:	f1b9 0f00 	cmp.w	r9, #0
 800519a:	f47f af38 	bne.w	800500e <_scanf_float+0x6a>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80051a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80051a8:	f040 8108 	bne.w	80053bc <_scanf_float+0x418>
 80051ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80051b0:	6022      	str	r2, [r4, #0]
 80051b2:	2501      	movs	r5, #1
 80051b4:	e7bf      	b.n	8005136 <_scanf_float+0x192>
 80051b6:	2d03      	cmp	r5, #3
 80051b8:	d0e2      	beq.n	8005180 <_scanf_float+0x1dc>
 80051ba:	2d05      	cmp	r5, #5
 80051bc:	e7de      	b.n	800517c <_scanf_float+0x1d8>
 80051be:	2d02      	cmp	r5, #2
 80051c0:	f47f af22 	bne.w	8005008 <_scanf_float+0x64>
 80051c4:	2503      	movs	r5, #3
 80051c6:	e7b6      	b.n	8005136 <_scanf_float+0x192>
 80051c8:	2d06      	cmp	r5, #6
 80051ca:	f47f af1d 	bne.w	8005008 <_scanf_float+0x64>
 80051ce:	2507      	movs	r5, #7
 80051d0:	e7b1      	b.n	8005136 <_scanf_float+0x192>
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	0591      	lsls	r1, r2, #22
 80051d6:	f57f af17 	bpl.w	8005008 <_scanf_float+0x64>
 80051da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80051e4:	e7a7      	b.n	8005136 <_scanf_float+0x192>
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80051ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80051f0:	d006      	beq.n	8005200 <_scanf_float+0x25c>
 80051f2:	0550      	lsls	r0, r2, #21
 80051f4:	f57f af08 	bpl.w	8005008 <_scanf_float+0x64>
 80051f8:	f1b9 0f00 	cmp.w	r9, #0
 80051fc:	f000 80de 	beq.w	80053bc <_scanf_float+0x418>
 8005200:	0591      	lsls	r1, r2, #22
 8005202:	bf58      	it	pl
 8005204:	9902      	ldrpl	r1, [sp, #8]
 8005206:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800520a:	bf58      	it	pl
 800520c:	eba9 0101 	subpl.w	r1, r9, r1
 8005210:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005214:	bf58      	it	pl
 8005216:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800521a:	6022      	str	r2, [r4, #0]
 800521c:	f04f 0900 	mov.w	r9, #0
 8005220:	e789      	b.n	8005136 <_scanf_float+0x192>
 8005222:	f04f 0a03 	mov.w	sl, #3
 8005226:	e786      	b.n	8005136 <_scanf_float+0x192>
 8005228:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800522c:	4639      	mov	r1, r7
 800522e:	4640      	mov	r0, r8
 8005230:	4798      	blx	r3
 8005232:	2800      	cmp	r0, #0
 8005234:	f43f aedb 	beq.w	8004fee <_scanf_float+0x4a>
 8005238:	e6e6      	b.n	8005008 <_scanf_float+0x64>
 800523a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800523e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005242:	463a      	mov	r2, r7
 8005244:	4640      	mov	r0, r8
 8005246:	4798      	blx	r3
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	3b01      	subs	r3, #1
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	e6e8      	b.n	8005022 <_scanf_float+0x7e>
 8005250:	1e6b      	subs	r3, r5, #1
 8005252:	2b06      	cmp	r3, #6
 8005254:	d824      	bhi.n	80052a0 <_scanf_float+0x2fc>
 8005256:	2d02      	cmp	r5, #2
 8005258:	d836      	bhi.n	80052c8 <_scanf_float+0x324>
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	429e      	cmp	r6, r3
 800525e:	f67f aee4 	bls.w	800502a <_scanf_float+0x86>
 8005262:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005266:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800526a:	463a      	mov	r2, r7
 800526c:	4640      	mov	r0, r8
 800526e:	4798      	blx	r3
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	3b01      	subs	r3, #1
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	e7f0      	b.n	800525a <_scanf_float+0x2b6>
 8005278:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800527c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005280:	463a      	mov	r2, r7
 8005282:	4640      	mov	r0, r8
 8005284:	4798      	blx	r3
 8005286:	6923      	ldr	r3, [r4, #16]
 8005288:	3b01      	subs	r3, #1
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005290:	fa5f fa8a 	uxtb.w	sl, sl
 8005294:	f1ba 0f02 	cmp.w	sl, #2
 8005298:	d1ee      	bne.n	8005278 <_scanf_float+0x2d4>
 800529a:	3d03      	subs	r5, #3
 800529c:	b2ed      	uxtb	r5, r5
 800529e:	1b76      	subs	r6, r6, r5
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	05da      	lsls	r2, r3, #23
 80052a4:	d530      	bpl.n	8005308 <_scanf_float+0x364>
 80052a6:	055b      	lsls	r3, r3, #21
 80052a8:	d511      	bpl.n	80052ce <_scanf_float+0x32a>
 80052aa:	9b01      	ldr	r3, [sp, #4]
 80052ac:	429e      	cmp	r6, r3
 80052ae:	f67f aebc 	bls.w	800502a <_scanf_float+0x86>
 80052b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052ba:	463a      	mov	r2, r7
 80052bc:	4640      	mov	r0, r8
 80052be:	4798      	blx	r3
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	e7f0      	b.n	80052aa <_scanf_float+0x306>
 80052c8:	46aa      	mov	sl, r5
 80052ca:	46b3      	mov	fp, r6
 80052cc:	e7de      	b.n	800528c <_scanf_float+0x2e8>
 80052ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	2965      	cmp	r1, #101	@ 0x65
 80052d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80052da:	f106 35ff 	add.w	r5, r6, #4294967295
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	d00c      	beq.n	80052fc <_scanf_float+0x358>
 80052e2:	2945      	cmp	r1, #69	@ 0x45
 80052e4:	d00a      	beq.n	80052fc <_scanf_float+0x358>
 80052e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052ea:	463a      	mov	r2, r7
 80052ec:	4640      	mov	r0, r8
 80052ee:	4798      	blx	r3
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	1eb5      	subs	r5, r6, #2
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005300:	463a      	mov	r2, r7
 8005302:	4640      	mov	r0, r8
 8005304:	4798      	blx	r3
 8005306:	462e      	mov	r6, r5
 8005308:	6822      	ldr	r2, [r4, #0]
 800530a:	f012 0210 	ands.w	r2, r2, #16
 800530e:	d001      	beq.n	8005314 <_scanf_float+0x370>
 8005310:	2000      	movs	r0, #0
 8005312:	e68b      	b.n	800502c <_scanf_float+0x88>
 8005314:	7032      	strb	r2, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005320:	d11c      	bne.n	800535c <_scanf_float+0x3b8>
 8005322:	9b02      	ldr	r3, [sp, #8]
 8005324:	454b      	cmp	r3, r9
 8005326:	eba3 0209 	sub.w	r2, r3, r9
 800532a:	d123      	bne.n	8005374 <_scanf_float+0x3d0>
 800532c:	9901      	ldr	r1, [sp, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	4640      	mov	r0, r8
 8005332:	f002 fbf9 	bl	8007b28 <_strtod_r>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	6821      	ldr	r1, [r4, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f011 0f02 	tst.w	r1, #2
 8005340:	ec57 6b10 	vmov	r6, r7, d0
 8005344:	f103 0204 	add.w	r2, r3, #4
 8005348:	d01f      	beq.n	800538a <_scanf_float+0x3e6>
 800534a:	9903      	ldr	r1, [sp, #12]
 800534c:	600a      	str	r2, [r1, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	e9c3 6700 	strd	r6, r7, [r3]
 8005354:	68e3      	ldr	r3, [r4, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60e3      	str	r3, [r4, #12]
 800535a:	e7d9      	b.n	8005310 <_scanf_float+0x36c>
 800535c:	9b04      	ldr	r3, [sp, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0e4      	beq.n	800532c <_scanf_float+0x388>
 8005362:	9905      	ldr	r1, [sp, #20]
 8005364:	230a      	movs	r3, #10
 8005366:	3101      	adds	r1, #1
 8005368:	4640      	mov	r0, r8
 800536a:	f002 fc5d 	bl	8007c28 <_strtol_r>
 800536e:	9b04      	ldr	r3, [sp, #16]
 8005370:	9e05      	ldr	r6, [sp, #20]
 8005372:	1ac2      	subs	r2, r0, r3
 8005374:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005378:	429e      	cmp	r6, r3
 800537a:	bf28      	it	cs
 800537c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005380:	4910      	ldr	r1, [pc, #64]	@ (80053c4 <_scanf_float+0x420>)
 8005382:	4630      	mov	r0, r6
 8005384:	f000 f8e4 	bl	8005550 <siprintf>
 8005388:	e7d0      	b.n	800532c <_scanf_float+0x388>
 800538a:	f011 0f04 	tst.w	r1, #4
 800538e:	9903      	ldr	r1, [sp, #12]
 8005390:	600a      	str	r2, [r1, #0]
 8005392:	d1dc      	bne.n	800534e <_scanf_float+0x3aa>
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	4632      	mov	r2, r6
 8005398:	463b      	mov	r3, r7
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fb fbc5 	bl	8000b2c <__aeabi_dcmpun>
 80053a2:	b128      	cbz	r0, 80053b0 <_scanf_float+0x40c>
 80053a4:	4808      	ldr	r0, [pc, #32]	@ (80053c8 <_scanf_float+0x424>)
 80053a6:	f000 f9b7 	bl	8005718 <nanf>
 80053aa:	ed85 0a00 	vstr	s0, [r5]
 80053ae:	e7d1      	b.n	8005354 <_scanf_float+0x3b0>
 80053b0:	4630      	mov	r0, r6
 80053b2:	4639      	mov	r1, r7
 80053b4:	f7fb fc18 	bl	8000be8 <__aeabi_d2f>
 80053b8:	6028      	str	r0, [r5, #0]
 80053ba:	e7cb      	b.n	8005354 <_scanf_float+0x3b0>
 80053bc:	f04f 0900 	mov.w	r9, #0
 80053c0:	e629      	b.n	8005016 <_scanf_float+0x72>
 80053c2:	bf00      	nop
 80053c4:	08008e78 	.word	0x08008e78
 80053c8:	0800920d 	.word	0x0800920d

080053cc <std>:
 80053cc:	2300      	movs	r3, #0
 80053ce:	b510      	push	{r4, lr}
 80053d0:	4604      	mov	r4, r0
 80053d2:	e9c0 3300 	strd	r3, r3, [r0]
 80053d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053da:	6083      	str	r3, [r0, #8]
 80053dc:	8181      	strh	r1, [r0, #12]
 80053de:	6643      	str	r3, [r0, #100]	@ 0x64
 80053e0:	81c2      	strh	r2, [r0, #14]
 80053e2:	6183      	str	r3, [r0, #24]
 80053e4:	4619      	mov	r1, r3
 80053e6:	2208      	movs	r2, #8
 80053e8:	305c      	adds	r0, #92	@ 0x5c
 80053ea:	f000 f914 	bl	8005616 <memset>
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <std+0x58>)
 80053f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80053f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <std+0x5c>)
 80053f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053f6:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <std+0x60>)
 80053f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <std+0x64>)
 80053fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80053fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <std+0x68>)
 8005400:	6224      	str	r4, [r4, #32]
 8005402:	429c      	cmp	r4, r3
 8005404:	d006      	beq.n	8005414 <std+0x48>
 8005406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800540a:	4294      	cmp	r4, r2
 800540c:	d002      	beq.n	8005414 <std+0x48>
 800540e:	33d0      	adds	r3, #208	@ 0xd0
 8005410:	429c      	cmp	r4, r3
 8005412:	d105      	bne.n	8005420 <std+0x54>
 8005414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541c:	f000 b978 	b.w	8005710 <__retarget_lock_init_recursive>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	bf00      	nop
 8005424:	08005591 	.word	0x08005591
 8005428:	080055b3 	.word	0x080055b3
 800542c:	080055eb 	.word	0x080055eb
 8005430:	0800560f 	.word	0x0800560f
 8005434:	200003b8 	.word	0x200003b8

08005438 <stdio_exit_handler>:
 8005438:	4a02      	ldr	r2, [pc, #8]	@ (8005444 <stdio_exit_handler+0xc>)
 800543a:	4903      	ldr	r1, [pc, #12]	@ (8005448 <stdio_exit_handler+0x10>)
 800543c:	4803      	ldr	r0, [pc, #12]	@ (800544c <stdio_exit_handler+0x14>)
 800543e:	f000 b869 	b.w	8005514 <_fwalk_sglue>
 8005442:	bf00      	nop
 8005444:	20000008 	.word	0x20000008
 8005448:	08007fe5 	.word	0x08007fe5
 800544c:	20000018 	.word	0x20000018

08005450 <cleanup_stdio>:
 8005450:	6841      	ldr	r1, [r0, #4]
 8005452:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <cleanup_stdio+0x34>)
 8005454:	4299      	cmp	r1, r3
 8005456:	b510      	push	{r4, lr}
 8005458:	4604      	mov	r4, r0
 800545a:	d001      	beq.n	8005460 <cleanup_stdio+0x10>
 800545c:	f002 fdc2 	bl	8007fe4 <_fflush_r>
 8005460:	68a1      	ldr	r1, [r4, #8]
 8005462:	4b09      	ldr	r3, [pc, #36]	@ (8005488 <cleanup_stdio+0x38>)
 8005464:	4299      	cmp	r1, r3
 8005466:	d002      	beq.n	800546e <cleanup_stdio+0x1e>
 8005468:	4620      	mov	r0, r4
 800546a:	f002 fdbb 	bl	8007fe4 <_fflush_r>
 800546e:	68e1      	ldr	r1, [r4, #12]
 8005470:	4b06      	ldr	r3, [pc, #24]	@ (800548c <cleanup_stdio+0x3c>)
 8005472:	4299      	cmp	r1, r3
 8005474:	d004      	beq.n	8005480 <cleanup_stdio+0x30>
 8005476:	4620      	mov	r0, r4
 8005478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547c:	f002 bdb2 	b.w	8007fe4 <_fflush_r>
 8005480:	bd10      	pop	{r4, pc}
 8005482:	bf00      	nop
 8005484:	200003b8 	.word	0x200003b8
 8005488:	20000420 	.word	0x20000420
 800548c:	20000488 	.word	0x20000488

08005490 <global_stdio_init.part.0>:
 8005490:	b510      	push	{r4, lr}
 8005492:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <global_stdio_init.part.0+0x30>)
 8005494:	4c0b      	ldr	r4, [pc, #44]	@ (80054c4 <global_stdio_init.part.0+0x34>)
 8005496:	4a0c      	ldr	r2, [pc, #48]	@ (80054c8 <global_stdio_init.part.0+0x38>)
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	4620      	mov	r0, r4
 800549c:	2200      	movs	r2, #0
 800549e:	2104      	movs	r1, #4
 80054a0:	f7ff ff94 	bl	80053cc <std>
 80054a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054a8:	2201      	movs	r2, #1
 80054aa:	2109      	movs	r1, #9
 80054ac:	f7ff ff8e 	bl	80053cc <std>
 80054b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054b4:	2202      	movs	r2, #2
 80054b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ba:	2112      	movs	r1, #18
 80054bc:	f7ff bf86 	b.w	80053cc <std>
 80054c0:	200004f0 	.word	0x200004f0
 80054c4:	200003b8 	.word	0x200003b8
 80054c8:	08005439 	.word	0x08005439

080054cc <__sfp_lock_acquire>:
 80054cc:	4801      	ldr	r0, [pc, #4]	@ (80054d4 <__sfp_lock_acquire+0x8>)
 80054ce:	f000 b920 	b.w	8005712 <__retarget_lock_acquire_recursive>
 80054d2:	bf00      	nop
 80054d4:	200004f9 	.word	0x200004f9

080054d8 <__sfp_lock_release>:
 80054d8:	4801      	ldr	r0, [pc, #4]	@ (80054e0 <__sfp_lock_release+0x8>)
 80054da:	f000 b91b 	b.w	8005714 <__retarget_lock_release_recursive>
 80054de:	bf00      	nop
 80054e0:	200004f9 	.word	0x200004f9

080054e4 <__sinit>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4604      	mov	r4, r0
 80054e8:	f7ff fff0 	bl	80054cc <__sfp_lock_acquire>
 80054ec:	6a23      	ldr	r3, [r4, #32]
 80054ee:	b11b      	cbz	r3, 80054f8 <__sinit+0x14>
 80054f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f4:	f7ff bff0 	b.w	80054d8 <__sfp_lock_release>
 80054f8:	4b04      	ldr	r3, [pc, #16]	@ (800550c <__sinit+0x28>)
 80054fa:	6223      	str	r3, [r4, #32]
 80054fc:	4b04      	ldr	r3, [pc, #16]	@ (8005510 <__sinit+0x2c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f5      	bne.n	80054f0 <__sinit+0xc>
 8005504:	f7ff ffc4 	bl	8005490 <global_stdio_init.part.0>
 8005508:	e7f2      	b.n	80054f0 <__sinit+0xc>
 800550a:	bf00      	nop
 800550c:	08005451 	.word	0x08005451
 8005510:	200004f0 	.word	0x200004f0

08005514 <_fwalk_sglue>:
 8005514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005518:	4607      	mov	r7, r0
 800551a:	4688      	mov	r8, r1
 800551c:	4614      	mov	r4, r2
 800551e:	2600      	movs	r6, #0
 8005520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005524:	f1b9 0901 	subs.w	r9, r9, #1
 8005528:	d505      	bpl.n	8005536 <_fwalk_sglue+0x22>
 800552a:	6824      	ldr	r4, [r4, #0]
 800552c:	2c00      	cmp	r4, #0
 800552e:	d1f7      	bne.n	8005520 <_fwalk_sglue+0xc>
 8005530:	4630      	mov	r0, r6
 8005532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005536:	89ab      	ldrh	r3, [r5, #12]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d907      	bls.n	800554c <_fwalk_sglue+0x38>
 800553c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005540:	3301      	adds	r3, #1
 8005542:	d003      	beq.n	800554c <_fwalk_sglue+0x38>
 8005544:	4629      	mov	r1, r5
 8005546:	4638      	mov	r0, r7
 8005548:	47c0      	blx	r8
 800554a:	4306      	orrs	r6, r0
 800554c:	3568      	adds	r5, #104	@ 0x68
 800554e:	e7e9      	b.n	8005524 <_fwalk_sglue+0x10>

08005550 <siprintf>:
 8005550:	b40e      	push	{r1, r2, r3}
 8005552:	b500      	push	{lr}
 8005554:	b09c      	sub	sp, #112	@ 0x70
 8005556:	ab1d      	add	r3, sp, #116	@ 0x74
 8005558:	9002      	str	r0, [sp, #8]
 800555a:	9006      	str	r0, [sp, #24]
 800555c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005560:	4809      	ldr	r0, [pc, #36]	@ (8005588 <siprintf+0x38>)
 8005562:	9107      	str	r1, [sp, #28]
 8005564:	9104      	str	r1, [sp, #16]
 8005566:	4909      	ldr	r1, [pc, #36]	@ (800558c <siprintf+0x3c>)
 8005568:	f853 2b04 	ldr.w	r2, [r3], #4
 800556c:	9105      	str	r1, [sp, #20]
 800556e:	6800      	ldr	r0, [r0, #0]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	a902      	add	r1, sp, #8
 8005574:	f002 fbb6 	bl	8007ce4 <_svfiprintf_r>
 8005578:	9b02      	ldr	r3, [sp, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	b01c      	add	sp, #112	@ 0x70
 8005580:	f85d eb04 	ldr.w	lr, [sp], #4
 8005584:	b003      	add	sp, #12
 8005586:	4770      	bx	lr
 8005588:	20000014 	.word	0x20000014
 800558c:	ffff0208 	.word	0xffff0208

08005590 <__sread>:
 8005590:	b510      	push	{r4, lr}
 8005592:	460c      	mov	r4, r1
 8005594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005598:	f000 f86c 	bl	8005674 <_read_r>
 800559c:	2800      	cmp	r0, #0
 800559e:	bfab      	itete	ge
 80055a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055a2:	89a3      	ldrhlt	r3, [r4, #12]
 80055a4:	181b      	addge	r3, r3, r0
 80055a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055aa:	bfac      	ite	ge
 80055ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055ae:	81a3      	strhlt	r3, [r4, #12]
 80055b0:	bd10      	pop	{r4, pc}

080055b2 <__swrite>:
 80055b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b6:	461f      	mov	r7, r3
 80055b8:	898b      	ldrh	r3, [r1, #12]
 80055ba:	05db      	lsls	r3, r3, #23
 80055bc:	4605      	mov	r5, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	4616      	mov	r6, r2
 80055c2:	d505      	bpl.n	80055d0 <__swrite+0x1e>
 80055c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c8:	2302      	movs	r3, #2
 80055ca:	2200      	movs	r2, #0
 80055cc:	f000 f840 	bl	8005650 <_lseek_r>
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	4632      	mov	r2, r6
 80055de:	463b      	mov	r3, r7
 80055e0:	4628      	mov	r0, r5
 80055e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055e6:	f000 b857 	b.w	8005698 <_write_r>

080055ea <__sseek>:
 80055ea:	b510      	push	{r4, lr}
 80055ec:	460c      	mov	r4, r1
 80055ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f2:	f000 f82d 	bl	8005650 <_lseek_r>
 80055f6:	1c43      	adds	r3, r0, #1
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	bf15      	itete	ne
 80055fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005602:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005606:	81a3      	strheq	r3, [r4, #12]
 8005608:	bf18      	it	ne
 800560a:	81a3      	strhne	r3, [r4, #12]
 800560c:	bd10      	pop	{r4, pc}

0800560e <__sclose>:
 800560e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005612:	f000 b80d 	b.w	8005630 <_close_r>

08005616 <memset>:
 8005616:	4402      	add	r2, r0
 8005618:	4603      	mov	r3, r0
 800561a:	4293      	cmp	r3, r2
 800561c:	d100      	bne.n	8005620 <memset+0xa>
 800561e:	4770      	bx	lr
 8005620:	f803 1b01 	strb.w	r1, [r3], #1
 8005624:	e7f9      	b.n	800561a <memset+0x4>
	...

08005628 <_localeconv_r>:
 8005628:	4800      	ldr	r0, [pc, #0]	@ (800562c <_localeconv_r+0x4>)
 800562a:	4770      	bx	lr
 800562c:	20000154 	.word	0x20000154

08005630 <_close_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4d06      	ldr	r5, [pc, #24]	@ (800564c <_close_r+0x1c>)
 8005634:	2300      	movs	r3, #0
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	602b      	str	r3, [r5, #0]
 800563c:	f7fc fc32 	bl	8001ea4 <_close>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_close_r+0x1a>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b103      	cbz	r3, 800564a <_close_r+0x1a>
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	200004f4 	.word	0x200004f4

08005650 <_lseek_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4d07      	ldr	r5, [pc, #28]	@ (8005670 <_lseek_r+0x20>)
 8005654:	4604      	mov	r4, r0
 8005656:	4608      	mov	r0, r1
 8005658:	4611      	mov	r1, r2
 800565a:	2200      	movs	r2, #0
 800565c:	602a      	str	r2, [r5, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f7fc fc47 	bl	8001ef2 <_lseek>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_lseek_r+0x1e>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_lseek_r+0x1e>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	200004f4 	.word	0x200004f4

08005674 <_read_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d07      	ldr	r5, [pc, #28]	@ (8005694 <_read_r+0x20>)
 8005678:	4604      	mov	r4, r0
 800567a:	4608      	mov	r0, r1
 800567c:	4611      	mov	r1, r2
 800567e:	2200      	movs	r2, #0
 8005680:	602a      	str	r2, [r5, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f7fc fbd5 	bl	8001e32 <_read>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d102      	bne.n	8005692 <_read_r+0x1e>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	b103      	cbz	r3, 8005692 <_read_r+0x1e>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	200004f4 	.word	0x200004f4

08005698 <_write_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d07      	ldr	r5, [pc, #28]	@ (80056b8 <_write_r+0x20>)
 800569c:	4604      	mov	r4, r0
 800569e:	4608      	mov	r0, r1
 80056a0:	4611      	mov	r1, r2
 80056a2:	2200      	movs	r2, #0
 80056a4:	602a      	str	r2, [r5, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f7fc fbe0 	bl	8001e6c <_write>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_write_r+0x1e>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_write_r+0x1e>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200004f4 	.word	0x200004f4

080056bc <__errno>:
 80056bc:	4b01      	ldr	r3, [pc, #4]	@ (80056c4 <__errno+0x8>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000014 	.word	0x20000014

080056c8 <__libc_init_array>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005700 <__libc_init_array+0x38>)
 80056cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005704 <__libc_init_array+0x3c>)
 80056ce:	1b64      	subs	r4, r4, r5
 80056d0:	10a4      	asrs	r4, r4, #2
 80056d2:	2600      	movs	r6, #0
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	d109      	bne.n	80056ec <__libc_init_array+0x24>
 80056d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005708 <__libc_init_array+0x40>)
 80056da:	4c0c      	ldr	r4, [pc, #48]	@ (800570c <__libc_init_array+0x44>)
 80056dc:	f003 fb72 	bl	8008dc4 <_init>
 80056e0:	1b64      	subs	r4, r4, r5
 80056e2:	10a4      	asrs	r4, r4, #2
 80056e4:	2600      	movs	r6, #0
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d105      	bne.n	80056f6 <__libc_init_array+0x2e>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f0:	4798      	blx	r3
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7ee      	b.n	80056d4 <__libc_init_array+0xc>
 80056f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fa:	4798      	blx	r3
 80056fc:	3601      	adds	r6, #1
 80056fe:	e7f2      	b.n	80056e6 <__libc_init_array+0x1e>
 8005700:	08009278 	.word	0x08009278
 8005704:	08009278 	.word	0x08009278
 8005708:	08009278 	.word	0x08009278
 800570c:	0800927c 	.word	0x0800927c

08005710 <__retarget_lock_init_recursive>:
 8005710:	4770      	bx	lr

08005712 <__retarget_lock_acquire_recursive>:
 8005712:	4770      	bx	lr

08005714 <__retarget_lock_release_recursive>:
 8005714:	4770      	bx	lr
	...

08005718 <nanf>:
 8005718:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005720 <nanf+0x8>
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	7fc00000 	.word	0x7fc00000

08005724 <quorem>:
 8005724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005728:	6903      	ldr	r3, [r0, #16]
 800572a:	690c      	ldr	r4, [r1, #16]
 800572c:	42a3      	cmp	r3, r4
 800572e:	4607      	mov	r7, r0
 8005730:	db7e      	blt.n	8005830 <quorem+0x10c>
 8005732:	3c01      	subs	r4, #1
 8005734:	f101 0814 	add.w	r8, r1, #20
 8005738:	00a3      	lsls	r3, r4, #2
 800573a:	f100 0514 	add.w	r5, r0, #20
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800574a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800574e:	3301      	adds	r3, #1
 8005750:	429a      	cmp	r2, r3
 8005752:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005756:	fbb2 f6f3 	udiv	r6, r2, r3
 800575a:	d32e      	bcc.n	80057ba <quorem+0x96>
 800575c:	f04f 0a00 	mov.w	sl, #0
 8005760:	46c4      	mov	ip, r8
 8005762:	46ae      	mov	lr, r5
 8005764:	46d3      	mov	fp, sl
 8005766:	f85c 3b04 	ldr.w	r3, [ip], #4
 800576a:	b298      	uxth	r0, r3
 800576c:	fb06 a000 	mla	r0, r6, r0, sl
 8005770:	0c02      	lsrs	r2, r0, #16
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	fb06 2303 	mla	r3, r6, r3, r2
 8005778:	f8de 2000 	ldr.w	r2, [lr]
 800577c:	b280      	uxth	r0, r0
 800577e:	b292      	uxth	r2, r2
 8005780:	1a12      	subs	r2, r2, r0
 8005782:	445a      	add	r2, fp
 8005784:	f8de 0000 	ldr.w	r0, [lr]
 8005788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800578c:	b29b      	uxth	r3, r3
 800578e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005792:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005796:	b292      	uxth	r2, r2
 8005798:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800579c:	45e1      	cmp	r9, ip
 800579e:	f84e 2b04 	str.w	r2, [lr], #4
 80057a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80057a6:	d2de      	bcs.n	8005766 <quorem+0x42>
 80057a8:	9b00      	ldr	r3, [sp, #0]
 80057aa:	58eb      	ldr	r3, [r5, r3]
 80057ac:	b92b      	cbnz	r3, 80057ba <quorem+0x96>
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	429d      	cmp	r5, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	d32f      	bcc.n	8005818 <quorem+0xf4>
 80057b8:	613c      	str	r4, [r7, #16]
 80057ba:	4638      	mov	r0, r7
 80057bc:	f001 f9c4 	bl	8006b48 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	db25      	blt.n	8005810 <quorem+0xec>
 80057c4:	4629      	mov	r1, r5
 80057c6:	2000      	movs	r0, #0
 80057c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80057cc:	f8d1 c000 	ldr.w	ip, [r1]
 80057d0:	fa1f fe82 	uxth.w	lr, r2
 80057d4:	fa1f f38c 	uxth.w	r3, ip
 80057d8:	eba3 030e 	sub.w	r3, r3, lr
 80057dc:	4403      	add	r3, r0
 80057de:	0c12      	lsrs	r2, r2, #16
 80057e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80057e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057ee:	45c1      	cmp	r9, r8
 80057f0:	f841 3b04 	str.w	r3, [r1], #4
 80057f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057f8:	d2e6      	bcs.n	80057c8 <quorem+0xa4>
 80057fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005802:	b922      	cbnz	r2, 800580e <quorem+0xea>
 8005804:	3b04      	subs	r3, #4
 8005806:	429d      	cmp	r5, r3
 8005808:	461a      	mov	r2, r3
 800580a:	d30b      	bcc.n	8005824 <quorem+0x100>
 800580c:	613c      	str	r4, [r7, #16]
 800580e:	3601      	adds	r6, #1
 8005810:	4630      	mov	r0, r6
 8005812:	b003      	add	sp, #12
 8005814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	3b04      	subs	r3, #4
 800581c:	2a00      	cmp	r2, #0
 800581e:	d1cb      	bne.n	80057b8 <quorem+0x94>
 8005820:	3c01      	subs	r4, #1
 8005822:	e7c6      	b.n	80057b2 <quorem+0x8e>
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	3b04      	subs	r3, #4
 8005828:	2a00      	cmp	r2, #0
 800582a:	d1ef      	bne.n	800580c <quorem+0xe8>
 800582c:	3c01      	subs	r4, #1
 800582e:	e7ea      	b.n	8005806 <quorem+0xe2>
 8005830:	2000      	movs	r0, #0
 8005832:	e7ee      	b.n	8005812 <quorem+0xee>
 8005834:	0000      	movs	r0, r0
	...

08005838 <_dtoa_r>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	69c7      	ldr	r7, [r0, #28]
 800583e:	b099      	sub	sp, #100	@ 0x64
 8005840:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005844:	ec55 4b10 	vmov	r4, r5, d0
 8005848:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800584a:	9109      	str	r1, [sp, #36]	@ 0x24
 800584c:	4683      	mov	fp, r0
 800584e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005850:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005852:	b97f      	cbnz	r7, 8005874 <_dtoa_r+0x3c>
 8005854:	2010      	movs	r0, #16
 8005856:	f000 fdfd 	bl	8006454 <malloc>
 800585a:	4602      	mov	r2, r0
 800585c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005860:	b920      	cbnz	r0, 800586c <_dtoa_r+0x34>
 8005862:	4ba7      	ldr	r3, [pc, #668]	@ (8005b00 <_dtoa_r+0x2c8>)
 8005864:	21ef      	movs	r1, #239	@ 0xef
 8005866:	48a7      	ldr	r0, [pc, #668]	@ (8005b04 <_dtoa_r+0x2cc>)
 8005868:	f002 fc36 	bl	80080d8 <__assert_func>
 800586c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005870:	6007      	str	r7, [r0, #0]
 8005872:	60c7      	str	r7, [r0, #12]
 8005874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	b159      	cbz	r1, 8005894 <_dtoa_r+0x5c>
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	604a      	str	r2, [r1, #4]
 8005880:	2301      	movs	r3, #1
 8005882:	4093      	lsls	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
 8005886:	4658      	mov	r0, fp
 8005888:	f000 feda 	bl	8006640 <_Bfree>
 800588c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	1e2b      	subs	r3, r5, #0
 8005896:	bfb9      	ittee	lt
 8005898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800589c:	9303      	strlt	r3, [sp, #12]
 800589e:	2300      	movge	r3, #0
 80058a0:	6033      	strge	r3, [r6, #0]
 80058a2:	9f03      	ldr	r7, [sp, #12]
 80058a4:	4b98      	ldr	r3, [pc, #608]	@ (8005b08 <_dtoa_r+0x2d0>)
 80058a6:	bfbc      	itt	lt
 80058a8:	2201      	movlt	r2, #1
 80058aa:	6032      	strlt	r2, [r6, #0]
 80058ac:	43bb      	bics	r3, r7
 80058ae:	d112      	bne.n	80058d6 <_dtoa_r+0x9e>
 80058b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80058b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80058bc:	4323      	orrs	r3, r4
 80058be:	f000 854d 	beq.w	800635c <_dtoa_r+0xb24>
 80058c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005b1c <_dtoa_r+0x2e4>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 854f 	beq.w	800636c <_dtoa_r+0xb34>
 80058ce:	f10a 0303 	add.w	r3, sl, #3
 80058d2:	f000 bd49 	b.w	8006368 <_dtoa_r+0xb30>
 80058d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058da:	2200      	movs	r2, #0
 80058dc:	ec51 0b17 	vmov	r0, r1, d7
 80058e0:	2300      	movs	r3, #0
 80058e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80058e6:	f7fb f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ea:	4680      	mov	r8, r0
 80058ec:	b158      	cbz	r0, 8005906 <_dtoa_r+0xce>
 80058ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80058f0:	2301      	movs	r3, #1
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058f6:	b113      	cbz	r3, 80058fe <_dtoa_r+0xc6>
 80058f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80058fa:	4b84      	ldr	r3, [pc, #528]	@ (8005b0c <_dtoa_r+0x2d4>)
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005b20 <_dtoa_r+0x2e8>
 8005902:	f000 bd33 	b.w	800636c <_dtoa_r+0xb34>
 8005906:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800590a:	aa16      	add	r2, sp, #88	@ 0x58
 800590c:	a917      	add	r1, sp, #92	@ 0x5c
 800590e:	4658      	mov	r0, fp
 8005910:	f001 fa3a 	bl	8006d88 <__d2b>
 8005914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005918:	4681      	mov	r9, r0
 800591a:	2e00      	cmp	r6, #0
 800591c:	d077      	beq.n	8005a0e <_dtoa_r+0x1d6>
 800591e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005920:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800592c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005938:	4619      	mov	r1, r3
 800593a:	2200      	movs	r2, #0
 800593c:	4b74      	ldr	r3, [pc, #464]	@ (8005b10 <_dtoa_r+0x2d8>)
 800593e:	f7fa fca3 	bl	8000288 <__aeabi_dsub>
 8005942:	a369      	add	r3, pc, #420	@ (adr r3, 8005ae8 <_dtoa_r+0x2b0>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f7fa fe56 	bl	80005f8 <__aeabi_dmul>
 800594c:	a368      	add	r3, pc, #416	@ (adr r3, 8005af0 <_dtoa_r+0x2b8>)
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f7fa fc9b 	bl	800028c <__adddf3>
 8005956:	4604      	mov	r4, r0
 8005958:	4630      	mov	r0, r6
 800595a:	460d      	mov	r5, r1
 800595c:	f7fa fde2 	bl	8000524 <__aeabi_i2d>
 8005960:	a365      	add	r3, pc, #404	@ (adr r3, 8005af8 <_dtoa_r+0x2c0>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fe47 	bl	80005f8 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	f7fa fc8b 	bl	800028c <__adddf3>
 8005976:	4604      	mov	r4, r0
 8005978:	460d      	mov	r5, r1
 800597a:	f7fb f8ed 	bl	8000b58 <__aeabi_d2iz>
 800597e:	2200      	movs	r2, #0
 8005980:	4607      	mov	r7, r0
 8005982:	2300      	movs	r3, #0
 8005984:	4620      	mov	r0, r4
 8005986:	4629      	mov	r1, r5
 8005988:	f7fb f8a8 	bl	8000adc <__aeabi_dcmplt>
 800598c:	b140      	cbz	r0, 80059a0 <_dtoa_r+0x168>
 800598e:	4638      	mov	r0, r7
 8005990:	f7fa fdc8 	bl	8000524 <__aeabi_i2d>
 8005994:	4622      	mov	r2, r4
 8005996:	462b      	mov	r3, r5
 8005998:	f7fb f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800599c:	b900      	cbnz	r0, 80059a0 <_dtoa_r+0x168>
 800599e:	3f01      	subs	r7, #1
 80059a0:	2f16      	cmp	r7, #22
 80059a2:	d851      	bhi.n	8005a48 <_dtoa_r+0x210>
 80059a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005b14 <_dtoa_r+0x2dc>)
 80059a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059b2:	f7fb f893 	bl	8000adc <__aeabi_dcmplt>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d048      	beq.n	8005a4c <_dtoa_r+0x214>
 80059ba:	3f01      	subs	r7, #1
 80059bc:	2300      	movs	r3, #0
 80059be:	9312      	str	r3, [sp, #72]	@ 0x48
 80059c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80059c2:	1b9b      	subs	r3, r3, r6
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	bf44      	itt	mi
 80059c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80059cc:	2300      	movmi	r3, #0
 80059ce:	9208      	str	r2, [sp, #32]
 80059d0:	bf54      	ite	pl
 80059d2:	f04f 0800 	movpl.w	r8, #0
 80059d6:	9308      	strmi	r3, [sp, #32]
 80059d8:	2f00      	cmp	r7, #0
 80059da:	db39      	blt.n	8005a50 <_dtoa_r+0x218>
 80059dc:	9b08      	ldr	r3, [sp, #32]
 80059de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80059e0:	443b      	add	r3, r7
 80059e2:	9308      	str	r3, [sp, #32]
 80059e4:	2300      	movs	r3, #0
 80059e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80059e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d864      	bhi.n	8005ab8 <_dtoa_r+0x280>
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	bfc4      	itt	gt
 80059f2:	3b04      	subgt	r3, #4
 80059f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80059f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f8:	f1a3 0302 	sub.w	r3, r3, #2
 80059fc:	bfcc      	ite	gt
 80059fe:	2400      	movgt	r4, #0
 8005a00:	2401      	movle	r4, #1
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d863      	bhi.n	8005ace <_dtoa_r+0x296>
 8005a06:	e8df f003 	tbb	[pc, r3]
 8005a0a:	372a      	.short	0x372a
 8005a0c:	5535      	.short	0x5535
 8005a0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005a12:	441e      	add	r6, r3
 8005a14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	bfc1      	itttt	gt
 8005a1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005a20:	409f      	lslgt	r7, r3
 8005a22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005a26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005a2a:	bfd6      	itet	le
 8005a2c:	f1c3 0320 	rsble	r3, r3, #32
 8005a30:	ea47 0003 	orrgt.w	r0, r7, r3
 8005a34:	fa04 f003 	lslle.w	r0, r4, r3
 8005a38:	f7fa fd64 	bl	8000504 <__aeabi_ui2d>
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005a42:	3e01      	subs	r6, #1
 8005a44:	9214      	str	r2, [sp, #80]	@ 0x50
 8005a46:	e777      	b.n	8005938 <_dtoa_r+0x100>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e7b8      	b.n	80059be <_dtoa_r+0x186>
 8005a4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005a4e:	e7b7      	b.n	80059c0 <_dtoa_r+0x188>
 8005a50:	427b      	negs	r3, r7
 8005a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a54:	2300      	movs	r3, #0
 8005a56:	eba8 0807 	sub.w	r8, r8, r7
 8005a5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a5c:	e7c4      	b.n	80059e8 <_dtoa_r+0x1b0>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dc35      	bgt.n	8005ad4 <_dtoa_r+0x29c>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	9307      	str	r3, [sp, #28]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a72:	e00b      	b.n	8005a8c <_dtoa_r+0x254>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e7f3      	b.n	8005a60 <_dtoa_r+0x228>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	9307      	str	r3, [sp, #28]
 8005a88:	bfb8      	it	lt
 8005a8a:	2301      	movlt	r3, #1
 8005a8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a90:	2100      	movs	r1, #0
 8005a92:	2204      	movs	r2, #4
 8005a94:	f102 0514 	add.w	r5, r2, #20
 8005a98:	429d      	cmp	r5, r3
 8005a9a:	d91f      	bls.n	8005adc <_dtoa_r+0x2a4>
 8005a9c:	6041      	str	r1, [r0, #4]
 8005a9e:	4658      	mov	r0, fp
 8005aa0:	f000 fd8e 	bl	80065c0 <_Balloc>
 8005aa4:	4682      	mov	sl, r0
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d13c      	bne.n	8005b24 <_dtoa_r+0x2ec>
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <_dtoa_r+0x2e0>)
 8005aac:	4602      	mov	r2, r0
 8005aae:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ab2:	e6d8      	b.n	8005866 <_dtoa_r+0x2e>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e7e0      	b.n	8005a7a <_dtoa_r+0x242>
 8005ab8:	2401      	movs	r4, #1
 8005aba:	2300      	movs	r3, #0
 8005abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005abe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	9307      	str	r3, [sp, #28]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2312      	movs	r3, #18
 8005acc:	e7d0      	b.n	8005a70 <_dtoa_r+0x238>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ad2:	e7f5      	b.n	8005ac0 <_dtoa_r+0x288>
 8005ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	9307      	str	r3, [sp, #28]
 8005ada:	e7d7      	b.n	8005a8c <_dtoa_r+0x254>
 8005adc:	3101      	adds	r1, #1
 8005ade:	0052      	lsls	r2, r2, #1
 8005ae0:	e7d8      	b.n	8005a94 <_dtoa_r+0x25c>
 8005ae2:	bf00      	nop
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	636f4361 	.word	0x636f4361
 8005aec:	3fd287a7 	.word	0x3fd287a7
 8005af0:	8b60c8b3 	.word	0x8b60c8b3
 8005af4:	3fc68a28 	.word	0x3fc68a28
 8005af8:	509f79fb 	.word	0x509f79fb
 8005afc:	3fd34413 	.word	0x3fd34413
 8005b00:	08008e8a 	.word	0x08008e8a
 8005b04:	08008ea1 	.word	0x08008ea1
 8005b08:	7ff00000 	.word	0x7ff00000
 8005b0c:	08008e55 	.word	0x08008e55
 8005b10:	3ff80000 	.word	0x3ff80000
 8005b14:	08008f98 	.word	0x08008f98
 8005b18:	08008ef9 	.word	0x08008ef9
 8005b1c:	08008e86 	.word	0x08008e86
 8005b20:	08008e54 	.word	0x08008e54
 8005b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b28:	6018      	str	r0, [r3, #0]
 8005b2a:	9b07      	ldr	r3, [sp, #28]
 8005b2c:	2b0e      	cmp	r3, #14
 8005b2e:	f200 80a4 	bhi.w	8005c7a <_dtoa_r+0x442>
 8005b32:	2c00      	cmp	r4, #0
 8005b34:	f000 80a1 	beq.w	8005c7a <_dtoa_r+0x442>
 8005b38:	2f00      	cmp	r7, #0
 8005b3a:	dd33      	ble.n	8005ba4 <_dtoa_r+0x36c>
 8005b3c:	4bad      	ldr	r3, [pc, #692]	@ (8005df4 <_dtoa_r+0x5bc>)
 8005b3e:	f007 020f 	and.w	r2, r7, #15
 8005b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b46:	ed93 7b00 	vldr	d7, [r3]
 8005b4a:	05f8      	lsls	r0, r7, #23
 8005b4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b54:	d516      	bpl.n	8005b84 <_dtoa_r+0x34c>
 8005b56:	4ba8      	ldr	r3, [pc, #672]	@ (8005df8 <_dtoa_r+0x5c0>)
 8005b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b60:	f7fa fe74 	bl	800084c <__aeabi_ddiv>
 8005b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b68:	f004 040f 	and.w	r4, r4, #15
 8005b6c:	2603      	movs	r6, #3
 8005b6e:	4da2      	ldr	r5, [pc, #648]	@ (8005df8 <_dtoa_r+0x5c0>)
 8005b70:	b954      	cbnz	r4, 8005b88 <_dtoa_r+0x350>
 8005b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b7a:	f7fa fe67 	bl	800084c <__aeabi_ddiv>
 8005b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b82:	e028      	b.n	8005bd6 <_dtoa_r+0x39e>
 8005b84:	2602      	movs	r6, #2
 8005b86:	e7f2      	b.n	8005b6e <_dtoa_r+0x336>
 8005b88:	07e1      	lsls	r1, r4, #31
 8005b8a:	d508      	bpl.n	8005b9e <_dtoa_r+0x366>
 8005b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b94:	f7fa fd30 	bl	80005f8 <__aeabi_dmul>
 8005b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b9c:	3601      	adds	r6, #1
 8005b9e:	1064      	asrs	r4, r4, #1
 8005ba0:	3508      	adds	r5, #8
 8005ba2:	e7e5      	b.n	8005b70 <_dtoa_r+0x338>
 8005ba4:	f000 80d2 	beq.w	8005d4c <_dtoa_r+0x514>
 8005ba8:	427c      	negs	r4, r7
 8005baa:	4b92      	ldr	r3, [pc, #584]	@ (8005df4 <_dtoa_r+0x5bc>)
 8005bac:	4d92      	ldr	r5, [pc, #584]	@ (8005df8 <_dtoa_r+0x5c0>)
 8005bae:	f004 020f 	and.w	r2, r4, #15
 8005bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bbe:	f7fa fd1b 	bl	80005f8 <__aeabi_dmul>
 8005bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc6:	1124      	asrs	r4, r4, #4
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2602      	movs	r6, #2
 8005bcc:	2c00      	cmp	r4, #0
 8005bce:	f040 80b2 	bne.w	8005d36 <_dtoa_r+0x4fe>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1d3      	bne.n	8005b7e <_dtoa_r+0x346>
 8005bd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80b7 	beq.w	8005d50 <_dtoa_r+0x518>
 8005be2:	4b86      	ldr	r3, [pc, #536]	@ (8005dfc <_dtoa_r+0x5c4>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa ff77 	bl	8000adc <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f000 80ae 	beq.w	8005d50 <_dtoa_r+0x518>
 8005bf4:	9b07      	ldr	r3, [sp, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80aa 	beq.w	8005d50 <_dtoa_r+0x518>
 8005bfc:	9b00      	ldr	r3, [sp, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	dd37      	ble.n	8005c72 <_dtoa_r+0x43a>
 8005c02:	1e7b      	subs	r3, r7, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	4620      	mov	r0, r4
 8005c08:	4b7d      	ldr	r3, [pc, #500]	@ (8005e00 <_dtoa_r+0x5c8>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7fa fcf3 	bl	80005f8 <__aeabi_dmul>
 8005c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c16:	9c00      	ldr	r4, [sp, #0]
 8005c18:	3601      	adds	r6, #1
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f7fa fc82 	bl	8000524 <__aeabi_i2d>
 8005c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c24:	f7fa fce8 	bl	80005f8 <__aeabi_dmul>
 8005c28:	4b76      	ldr	r3, [pc, #472]	@ (8005e04 <_dtoa_r+0x5cc>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f7fa fb2e 	bl	800028c <__adddf3>
 8005c30:	4605      	mov	r5, r0
 8005c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005c36:	2c00      	cmp	r4, #0
 8005c38:	f040 808d 	bne.w	8005d56 <_dtoa_r+0x51e>
 8005c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c40:	4b71      	ldr	r3, [pc, #452]	@ (8005e08 <_dtoa_r+0x5d0>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	f7fa fb20 	bl	8000288 <__aeabi_dsub>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c50:	462a      	mov	r2, r5
 8005c52:	4633      	mov	r3, r6
 8005c54:	f7fa ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	f040 828b 	bne.w	8006174 <_dtoa_r+0x93c>
 8005c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c62:	462a      	mov	r2, r5
 8005c64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c68:	f7fa ff38 	bl	8000adc <__aeabi_dcmplt>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	f040 8128 	bne.w	8005ec2 <_dtoa_r+0x68a>
 8005c72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005c7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f2c0 815a 	blt.w	8005f36 <_dtoa_r+0x6fe>
 8005c82:	2f0e      	cmp	r7, #14
 8005c84:	f300 8157 	bgt.w	8005f36 <_dtoa_r+0x6fe>
 8005c88:	4b5a      	ldr	r3, [pc, #360]	@ (8005df4 <_dtoa_r+0x5bc>)
 8005c8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c8e:	ed93 7b00 	vldr	d7, [r3]
 8005c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	ed8d 7b00 	vstr	d7, [sp]
 8005c9a:	da03      	bge.n	8005ca4 <_dtoa_r+0x46c>
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f340 8101 	ble.w	8005ea6 <_dtoa_r+0x66e>
 8005ca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ca8:	4656      	mov	r6, sl
 8005caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cae:	4620      	mov	r0, r4
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	f7fa fdcb 	bl	800084c <__aeabi_ddiv>
 8005cb6:	f7fa ff4f 	bl	8000b58 <__aeabi_d2iz>
 8005cba:	4680      	mov	r8, r0
 8005cbc:	f7fa fc32 	bl	8000524 <__aeabi_i2d>
 8005cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc4:	f7fa fc98 	bl	80005f8 <__aeabi_dmul>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4620      	mov	r0, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005cd4:	f7fa fad8 	bl	8000288 <__aeabi_dsub>
 8005cd8:	f806 4b01 	strb.w	r4, [r6], #1
 8005cdc:	9d07      	ldr	r5, [sp, #28]
 8005cde:	eba6 040a 	sub.w	r4, r6, sl
 8005ce2:	42a5      	cmp	r5, r4
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	f040 8117 	bne.w	8005f1a <_dtoa_r+0x6e2>
 8005cec:	f7fa face 	bl	800028c <__adddf3>
 8005cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	f7fa ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f040 80f9 	bne.w	8005ef4 <_dtoa_r+0x6bc>
 8005d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d06:	4620      	mov	r0, r4
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f7fa fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d0e:	b118      	cbz	r0, 8005d18 <_dtoa_r+0x4e0>
 8005d10:	f018 0f01 	tst.w	r8, #1
 8005d14:	f040 80ee 	bne.w	8005ef4 <_dtoa_r+0x6bc>
 8005d18:	4649      	mov	r1, r9
 8005d1a:	4658      	mov	r0, fp
 8005d1c:	f000 fc90 	bl	8006640 <_Bfree>
 8005d20:	2300      	movs	r3, #0
 8005d22:	7033      	strb	r3, [r6, #0]
 8005d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d26:	3701      	adds	r7, #1
 8005d28:	601f      	str	r7, [r3, #0]
 8005d2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 831d 	beq.w	800636c <_dtoa_r+0xb34>
 8005d32:	601e      	str	r6, [r3, #0]
 8005d34:	e31a      	b.n	800636c <_dtoa_r+0xb34>
 8005d36:	07e2      	lsls	r2, r4, #31
 8005d38:	d505      	bpl.n	8005d46 <_dtoa_r+0x50e>
 8005d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d3e:	f7fa fc5b 	bl	80005f8 <__aeabi_dmul>
 8005d42:	3601      	adds	r6, #1
 8005d44:	2301      	movs	r3, #1
 8005d46:	1064      	asrs	r4, r4, #1
 8005d48:	3508      	adds	r5, #8
 8005d4a:	e73f      	b.n	8005bcc <_dtoa_r+0x394>
 8005d4c:	2602      	movs	r6, #2
 8005d4e:	e742      	b.n	8005bd6 <_dtoa_r+0x39e>
 8005d50:	9c07      	ldr	r4, [sp, #28]
 8005d52:	9704      	str	r7, [sp, #16]
 8005d54:	e761      	b.n	8005c1a <_dtoa_r+0x3e2>
 8005d56:	4b27      	ldr	r3, [pc, #156]	@ (8005df4 <_dtoa_r+0x5bc>)
 8005d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d62:	4454      	add	r4, sl
 8005d64:	2900      	cmp	r1, #0
 8005d66:	d053      	beq.n	8005e10 <_dtoa_r+0x5d8>
 8005d68:	4928      	ldr	r1, [pc, #160]	@ (8005e0c <_dtoa_r+0x5d4>)
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	f7fa fd6e 	bl	800084c <__aeabi_ddiv>
 8005d70:	4633      	mov	r3, r6
 8005d72:	462a      	mov	r2, r5
 8005d74:	f7fa fa88 	bl	8000288 <__aeabi_dsub>
 8005d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d7c:	4656      	mov	r6, sl
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	f7fa fee9 	bl	8000b58 <__aeabi_d2iz>
 8005d86:	4605      	mov	r5, r0
 8005d88:	f7fa fbcc 	bl	8000524 <__aeabi_i2d>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d94:	f7fa fa78 	bl	8000288 <__aeabi_dsub>
 8005d98:	3530      	adds	r5, #48	@ 0x30
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005da2:	f806 5b01 	strb.w	r5, [r6], #1
 8005da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005daa:	f7fa fe97 	bl	8000adc <__aeabi_dcmplt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d171      	bne.n	8005e96 <_dtoa_r+0x65e>
 8005db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005db6:	4911      	ldr	r1, [pc, #68]	@ (8005dfc <_dtoa_r+0x5c4>)
 8005db8:	2000      	movs	r0, #0
 8005dba:	f7fa fa65 	bl	8000288 <__aeabi_dsub>
 8005dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dc2:	f7fa fe8b 	bl	8000adc <__aeabi_dcmplt>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f040 8095 	bne.w	8005ef6 <_dtoa_r+0x6be>
 8005dcc:	42a6      	cmp	r6, r4
 8005dce:	f43f af50 	beq.w	8005c72 <_dtoa_r+0x43a>
 8005dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <_dtoa_r+0x5c8>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f7fa fc0d 	bl	80005f8 <__aeabi_dmul>
 8005dde:	4b08      	ldr	r3, [pc, #32]	@ (8005e00 <_dtoa_r+0x5c8>)
 8005de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005de4:	2200      	movs	r2, #0
 8005de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dea:	f7fa fc05 	bl	80005f8 <__aeabi_dmul>
 8005dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df2:	e7c4      	b.n	8005d7e <_dtoa_r+0x546>
 8005df4:	08008f98 	.word	0x08008f98
 8005df8:	08008f70 	.word	0x08008f70
 8005dfc:	3ff00000 	.word	0x3ff00000
 8005e00:	40240000 	.word	0x40240000
 8005e04:	401c0000 	.word	0x401c0000
 8005e08:	40140000 	.word	0x40140000
 8005e0c:	3fe00000 	.word	0x3fe00000
 8005e10:	4631      	mov	r1, r6
 8005e12:	4628      	mov	r0, r5
 8005e14:	f7fa fbf0 	bl	80005f8 <__aeabi_dmul>
 8005e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005e1e:	4656      	mov	r6, sl
 8005e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e24:	f7fa fe98 	bl	8000b58 <__aeabi_d2iz>
 8005e28:	4605      	mov	r5, r0
 8005e2a:	f7fa fb7b 	bl	8000524 <__aeabi_i2d>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e36:	f7fa fa27 	bl	8000288 <__aeabi_dsub>
 8005e3a:	3530      	adds	r5, #48	@ 0x30
 8005e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	42a6      	cmp	r6, r4
 8005e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	d124      	bne.n	8005e9a <_dtoa_r+0x662>
 8005e50:	4bac      	ldr	r3, [pc, #688]	@ (8006104 <_dtoa_r+0x8cc>)
 8005e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e56:	f7fa fa19 	bl	800028c <__adddf3>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e62:	f7fa fe59 	bl	8000b18 <__aeabi_dcmpgt>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d145      	bne.n	8005ef6 <_dtoa_r+0x6be>
 8005e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e6e:	49a5      	ldr	r1, [pc, #660]	@ (8006104 <_dtoa_r+0x8cc>)
 8005e70:	2000      	movs	r0, #0
 8005e72:	f7fa fa09 	bl	8000288 <__aeabi_dsub>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e7e:	f7fa fe2d 	bl	8000adc <__aeabi_dcmplt>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	f43f aef5 	beq.w	8005c72 <_dtoa_r+0x43a>
 8005e88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005e8a:	1e73      	subs	r3, r6, #1
 8005e8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e92:	2b30      	cmp	r3, #48	@ 0x30
 8005e94:	d0f8      	beq.n	8005e88 <_dtoa_r+0x650>
 8005e96:	9f04      	ldr	r7, [sp, #16]
 8005e98:	e73e      	b.n	8005d18 <_dtoa_r+0x4e0>
 8005e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8006108 <_dtoa_r+0x8d0>)
 8005e9c:	f7fa fbac 	bl	80005f8 <__aeabi_dmul>
 8005ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea4:	e7bc      	b.n	8005e20 <_dtoa_r+0x5e8>
 8005ea6:	d10c      	bne.n	8005ec2 <_dtoa_r+0x68a>
 8005ea8:	4b98      	ldr	r3, [pc, #608]	@ (800610c <_dtoa_r+0x8d4>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005eb0:	f7fa fba2 	bl	80005f8 <__aeabi_dmul>
 8005eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eb8:	f7fa fe24 	bl	8000b04 <__aeabi_dcmpge>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f000 8157 	beq.w	8006170 <_dtoa_r+0x938>
 8005ec2:	2400      	movs	r4, #0
 8005ec4:	4625      	mov	r5, r4
 8005ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	4656      	mov	r6, sl
 8005ece:	2700      	movs	r7, #0
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4658      	mov	r0, fp
 8005ed4:	f000 fbb4 	bl	8006640 <_Bfree>
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	d0dc      	beq.n	8005e96 <_dtoa_r+0x65e>
 8005edc:	b12f      	cbz	r7, 8005eea <_dtoa_r+0x6b2>
 8005ede:	42af      	cmp	r7, r5
 8005ee0:	d003      	beq.n	8005eea <_dtoa_r+0x6b2>
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4658      	mov	r0, fp
 8005ee6:	f000 fbab 	bl	8006640 <_Bfree>
 8005eea:	4629      	mov	r1, r5
 8005eec:	4658      	mov	r0, fp
 8005eee:	f000 fba7 	bl	8006640 <_Bfree>
 8005ef2:	e7d0      	b.n	8005e96 <_dtoa_r+0x65e>
 8005ef4:	9704      	str	r7, [sp, #16]
 8005ef6:	4633      	mov	r3, r6
 8005ef8:	461e      	mov	r6, r3
 8005efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005efe:	2a39      	cmp	r2, #57	@ 0x39
 8005f00:	d107      	bne.n	8005f12 <_dtoa_r+0x6da>
 8005f02:	459a      	cmp	sl, r3
 8005f04:	d1f8      	bne.n	8005ef8 <_dtoa_r+0x6c0>
 8005f06:	9a04      	ldr	r2, [sp, #16]
 8005f08:	3201      	adds	r2, #1
 8005f0a:	9204      	str	r2, [sp, #16]
 8005f0c:	2230      	movs	r2, #48	@ 0x30
 8005f0e:	f88a 2000 	strb.w	r2, [sl]
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	3201      	adds	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e7bd      	b.n	8005e96 <_dtoa_r+0x65e>
 8005f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006108 <_dtoa_r+0x8d0>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f7fa fb6b 	bl	80005f8 <__aeabi_dmul>
 8005f22:	2200      	movs	r2, #0
 8005f24:	2300      	movs	r3, #0
 8005f26:	4604      	mov	r4, r0
 8005f28:	460d      	mov	r5, r1
 8005f2a:	f7fa fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f43f aebb 	beq.w	8005caa <_dtoa_r+0x472>
 8005f34:	e6f0      	b.n	8005d18 <_dtoa_r+0x4e0>
 8005f36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	f000 80db 	beq.w	80060f4 <_dtoa_r+0x8bc>
 8005f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f40:	2a01      	cmp	r2, #1
 8005f42:	f300 80bf 	bgt.w	80060c4 <_dtoa_r+0x88c>
 8005f46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	f000 80b7 	beq.w	80060bc <_dtoa_r+0x884>
 8005f4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f54:	4646      	mov	r6, r8
 8005f56:	9a08      	ldr	r2, [sp, #32]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	441a      	add	r2, r3
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	4498      	add	r8, r3
 8005f60:	9208      	str	r2, [sp, #32]
 8005f62:	f000 fc6b 	bl	800683c <__i2b>
 8005f66:	4605      	mov	r5, r0
 8005f68:	b15e      	cbz	r6, 8005f82 <_dtoa_r+0x74a>
 8005f6a:	9b08      	ldr	r3, [sp, #32]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dd08      	ble.n	8005f82 <_dtoa_r+0x74a>
 8005f70:	42b3      	cmp	r3, r6
 8005f72:	9a08      	ldr	r2, [sp, #32]
 8005f74:	bfa8      	it	ge
 8005f76:	4633      	movge	r3, r6
 8005f78:	eba8 0803 	sub.w	r8, r8, r3
 8005f7c:	1af6      	subs	r6, r6, r3
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	9308      	str	r3, [sp, #32]
 8005f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f84:	b1f3      	cbz	r3, 8005fc4 <_dtoa_r+0x78c>
 8005f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80b7 	beq.w	80060fc <_dtoa_r+0x8c4>
 8005f8e:	b18c      	cbz	r4, 8005fb4 <_dtoa_r+0x77c>
 8005f90:	4629      	mov	r1, r5
 8005f92:	4622      	mov	r2, r4
 8005f94:	4658      	mov	r0, fp
 8005f96:	f000 fd11 	bl	80069bc <__pow5mult>
 8005f9a:	464a      	mov	r2, r9
 8005f9c:	4601      	mov	r1, r0
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	4658      	mov	r0, fp
 8005fa2:	f000 fc61 	bl	8006868 <__multiply>
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	9004      	str	r0, [sp, #16]
 8005faa:	4658      	mov	r0, fp
 8005fac:	f000 fb48 	bl	8006640 <_Bfree>
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	4699      	mov	r9, r3
 8005fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fb6:	1b1a      	subs	r2, r3, r4
 8005fb8:	d004      	beq.n	8005fc4 <_dtoa_r+0x78c>
 8005fba:	4649      	mov	r1, r9
 8005fbc:	4658      	mov	r0, fp
 8005fbe:	f000 fcfd 	bl	80069bc <__pow5mult>
 8005fc2:	4681      	mov	r9, r0
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4658      	mov	r0, fp
 8005fc8:	f000 fc38 	bl	800683c <__i2b>
 8005fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fce:	4604      	mov	r4, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 81cf 	beq.w	8006374 <_dtoa_r+0xb3c>
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4601      	mov	r1, r0
 8005fda:	4658      	mov	r0, fp
 8005fdc:	f000 fcee 	bl	80069bc <__pow5mult>
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	f300 8095 	bgt.w	8006114 <_dtoa_r+0x8dc>
 8005fea:	9b02      	ldr	r3, [sp, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 8087 	bne.w	8006100 <_dtoa_r+0x8c8>
 8005ff2:	9b03      	ldr	r3, [sp, #12]
 8005ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8089 	bne.w	8006110 <_dtoa_r+0x8d8>
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006004:	0d1b      	lsrs	r3, r3, #20
 8006006:	051b      	lsls	r3, r3, #20
 8006008:	b12b      	cbz	r3, 8006016 <_dtoa_r+0x7de>
 800600a:	9b08      	ldr	r3, [sp, #32]
 800600c:	3301      	adds	r3, #1
 800600e:	9308      	str	r3, [sp, #32]
 8006010:	f108 0801 	add.w	r8, r8, #1
 8006014:	2301      	movs	r3, #1
 8006016:	930a      	str	r3, [sp, #40]	@ 0x28
 8006018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 81b0 	beq.w	8006380 <_dtoa_r+0xb48>
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006026:	6918      	ldr	r0, [r3, #16]
 8006028:	f000 fbbc 	bl	80067a4 <__hi0bits>
 800602c:	f1c0 0020 	rsb	r0, r0, #32
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	4418      	add	r0, r3
 8006034:	f010 001f 	ands.w	r0, r0, #31
 8006038:	d077      	beq.n	800612a <_dtoa_r+0x8f2>
 800603a:	f1c0 0320 	rsb	r3, r0, #32
 800603e:	2b04      	cmp	r3, #4
 8006040:	dd6b      	ble.n	800611a <_dtoa_r+0x8e2>
 8006042:	9b08      	ldr	r3, [sp, #32]
 8006044:	f1c0 001c 	rsb	r0, r0, #28
 8006048:	4403      	add	r3, r0
 800604a:	4480      	add	r8, r0
 800604c:	4406      	add	r6, r0
 800604e:	9308      	str	r3, [sp, #32]
 8006050:	f1b8 0f00 	cmp.w	r8, #0
 8006054:	dd05      	ble.n	8006062 <_dtoa_r+0x82a>
 8006056:	4649      	mov	r1, r9
 8006058:	4642      	mov	r2, r8
 800605a:	4658      	mov	r0, fp
 800605c:	f000 fd08 	bl	8006a70 <__lshift>
 8006060:	4681      	mov	r9, r0
 8006062:	9b08      	ldr	r3, [sp, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dd05      	ble.n	8006074 <_dtoa_r+0x83c>
 8006068:	4621      	mov	r1, r4
 800606a:	461a      	mov	r2, r3
 800606c:	4658      	mov	r0, fp
 800606e:	f000 fcff 	bl	8006a70 <__lshift>
 8006072:	4604      	mov	r4, r0
 8006074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006076:	2b00      	cmp	r3, #0
 8006078:	d059      	beq.n	800612e <_dtoa_r+0x8f6>
 800607a:	4621      	mov	r1, r4
 800607c:	4648      	mov	r0, r9
 800607e:	f000 fd63 	bl	8006b48 <__mcmp>
 8006082:	2800      	cmp	r0, #0
 8006084:	da53      	bge.n	800612e <_dtoa_r+0x8f6>
 8006086:	1e7b      	subs	r3, r7, #1
 8006088:	9304      	str	r3, [sp, #16]
 800608a:	4649      	mov	r1, r9
 800608c:	2300      	movs	r3, #0
 800608e:	220a      	movs	r2, #10
 8006090:	4658      	mov	r0, fp
 8006092:	f000 faf7 	bl	8006684 <__multadd>
 8006096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006098:	4681      	mov	r9, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8172 	beq.w	8006384 <_dtoa_r+0xb4c>
 80060a0:	2300      	movs	r3, #0
 80060a2:	4629      	mov	r1, r5
 80060a4:	220a      	movs	r2, #10
 80060a6:	4658      	mov	r0, fp
 80060a8:	f000 faec 	bl	8006684 <__multadd>
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	4605      	mov	r5, r0
 80060b2:	dc67      	bgt.n	8006184 <_dtoa_r+0x94c>
 80060b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	dc41      	bgt.n	800613e <_dtoa_r+0x906>
 80060ba:	e063      	b.n	8006184 <_dtoa_r+0x94c>
 80060bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80060be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80060c2:	e746      	b.n	8005f52 <_dtoa_r+0x71a>
 80060c4:	9b07      	ldr	r3, [sp, #28]
 80060c6:	1e5c      	subs	r4, r3, #1
 80060c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	bfbf      	itttt	lt
 80060ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80060d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80060d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80060d4:	1ae3      	sublt	r3, r4, r3
 80060d6:	bfb4      	ite	lt
 80060d8:	18d2      	addlt	r2, r2, r3
 80060da:	1b1c      	subge	r4, r3, r4
 80060dc:	9b07      	ldr	r3, [sp, #28]
 80060de:	bfbc      	itt	lt
 80060e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80060e2:	2400      	movlt	r4, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bfb5      	itete	lt
 80060e8:	eba8 0603 	sublt.w	r6, r8, r3
 80060ec:	9b07      	ldrge	r3, [sp, #28]
 80060ee:	2300      	movlt	r3, #0
 80060f0:	4646      	movge	r6, r8
 80060f2:	e730      	b.n	8005f56 <_dtoa_r+0x71e>
 80060f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80060f8:	4646      	mov	r6, r8
 80060fa:	e735      	b.n	8005f68 <_dtoa_r+0x730>
 80060fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060fe:	e75c      	b.n	8005fba <_dtoa_r+0x782>
 8006100:	2300      	movs	r3, #0
 8006102:	e788      	b.n	8006016 <_dtoa_r+0x7de>
 8006104:	3fe00000 	.word	0x3fe00000
 8006108:	40240000 	.word	0x40240000
 800610c:	40140000 	.word	0x40140000
 8006110:	9b02      	ldr	r3, [sp, #8]
 8006112:	e780      	b.n	8006016 <_dtoa_r+0x7de>
 8006114:	2300      	movs	r3, #0
 8006116:	930a      	str	r3, [sp, #40]	@ 0x28
 8006118:	e782      	b.n	8006020 <_dtoa_r+0x7e8>
 800611a:	d099      	beq.n	8006050 <_dtoa_r+0x818>
 800611c:	9a08      	ldr	r2, [sp, #32]
 800611e:	331c      	adds	r3, #28
 8006120:	441a      	add	r2, r3
 8006122:	4498      	add	r8, r3
 8006124:	441e      	add	r6, r3
 8006126:	9208      	str	r2, [sp, #32]
 8006128:	e792      	b.n	8006050 <_dtoa_r+0x818>
 800612a:	4603      	mov	r3, r0
 800612c:	e7f6      	b.n	800611c <_dtoa_r+0x8e4>
 800612e:	9b07      	ldr	r3, [sp, #28]
 8006130:	9704      	str	r7, [sp, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	dc20      	bgt.n	8006178 <_dtoa_r+0x940>
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800613a:	2b02      	cmp	r3, #2
 800613c:	dd1e      	ble.n	800617c <_dtoa_r+0x944>
 800613e:	9b00      	ldr	r3, [sp, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f aec0 	bne.w	8005ec6 <_dtoa_r+0x68e>
 8006146:	4621      	mov	r1, r4
 8006148:	2205      	movs	r2, #5
 800614a:	4658      	mov	r0, fp
 800614c:	f000 fa9a 	bl	8006684 <__multadd>
 8006150:	4601      	mov	r1, r0
 8006152:	4604      	mov	r4, r0
 8006154:	4648      	mov	r0, r9
 8006156:	f000 fcf7 	bl	8006b48 <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	f77f aeb3 	ble.w	8005ec6 <_dtoa_r+0x68e>
 8006160:	4656      	mov	r6, sl
 8006162:	2331      	movs	r3, #49	@ 0x31
 8006164:	f806 3b01 	strb.w	r3, [r6], #1
 8006168:	9b04      	ldr	r3, [sp, #16]
 800616a:	3301      	adds	r3, #1
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	e6ae      	b.n	8005ece <_dtoa_r+0x696>
 8006170:	9c07      	ldr	r4, [sp, #28]
 8006172:	9704      	str	r7, [sp, #16]
 8006174:	4625      	mov	r5, r4
 8006176:	e7f3      	b.n	8006160 <_dtoa_r+0x928>
 8006178:	9b07      	ldr	r3, [sp, #28]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8104 	beq.w	800638c <_dtoa_r+0xb54>
 8006184:	2e00      	cmp	r6, #0
 8006186:	dd05      	ble.n	8006194 <_dtoa_r+0x95c>
 8006188:	4629      	mov	r1, r5
 800618a:	4632      	mov	r2, r6
 800618c:	4658      	mov	r0, fp
 800618e:	f000 fc6f 	bl	8006a70 <__lshift>
 8006192:	4605      	mov	r5, r0
 8006194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d05a      	beq.n	8006250 <_dtoa_r+0xa18>
 800619a:	6869      	ldr	r1, [r5, #4]
 800619c:	4658      	mov	r0, fp
 800619e:	f000 fa0f 	bl	80065c0 <_Balloc>
 80061a2:	4606      	mov	r6, r0
 80061a4:	b928      	cbnz	r0, 80061b2 <_dtoa_r+0x97a>
 80061a6:	4b84      	ldr	r3, [pc, #528]	@ (80063b8 <_dtoa_r+0xb80>)
 80061a8:	4602      	mov	r2, r0
 80061aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80061ae:	f7ff bb5a 	b.w	8005866 <_dtoa_r+0x2e>
 80061b2:	692a      	ldr	r2, [r5, #16]
 80061b4:	3202      	adds	r2, #2
 80061b6:	0092      	lsls	r2, r2, #2
 80061b8:	f105 010c 	add.w	r1, r5, #12
 80061bc:	300c      	adds	r0, #12
 80061be:	f001 ff75 	bl	80080ac <memcpy>
 80061c2:	2201      	movs	r2, #1
 80061c4:	4631      	mov	r1, r6
 80061c6:	4658      	mov	r0, fp
 80061c8:	f000 fc52 	bl	8006a70 <__lshift>
 80061cc:	f10a 0301 	add.w	r3, sl, #1
 80061d0:	9307      	str	r3, [sp, #28]
 80061d2:	9b00      	ldr	r3, [sp, #0]
 80061d4:	4453      	add	r3, sl
 80061d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	462f      	mov	r7, r5
 80061e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80061e2:	4605      	mov	r5, r0
 80061e4:	9b07      	ldr	r3, [sp, #28]
 80061e6:	4621      	mov	r1, r4
 80061e8:	3b01      	subs	r3, #1
 80061ea:	4648      	mov	r0, r9
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	f7ff fa99 	bl	8005724 <quorem>
 80061f2:	4639      	mov	r1, r7
 80061f4:	9002      	str	r0, [sp, #8]
 80061f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061fa:	4648      	mov	r0, r9
 80061fc:	f000 fca4 	bl	8006b48 <__mcmp>
 8006200:	462a      	mov	r2, r5
 8006202:	9008      	str	r0, [sp, #32]
 8006204:	4621      	mov	r1, r4
 8006206:	4658      	mov	r0, fp
 8006208:	f000 fcba 	bl	8006b80 <__mdiff>
 800620c:	68c2      	ldr	r2, [r0, #12]
 800620e:	4606      	mov	r6, r0
 8006210:	bb02      	cbnz	r2, 8006254 <_dtoa_r+0xa1c>
 8006212:	4601      	mov	r1, r0
 8006214:	4648      	mov	r0, r9
 8006216:	f000 fc97 	bl	8006b48 <__mcmp>
 800621a:	4602      	mov	r2, r0
 800621c:	4631      	mov	r1, r6
 800621e:	4658      	mov	r0, fp
 8006220:	920e      	str	r2, [sp, #56]	@ 0x38
 8006222:	f000 fa0d 	bl	8006640 <_Bfree>
 8006226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800622a:	9e07      	ldr	r6, [sp, #28]
 800622c:	ea43 0102 	orr.w	r1, r3, r2
 8006230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006232:	4319      	orrs	r1, r3
 8006234:	d110      	bne.n	8006258 <_dtoa_r+0xa20>
 8006236:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800623a:	d029      	beq.n	8006290 <_dtoa_r+0xa58>
 800623c:	9b08      	ldr	r3, [sp, #32]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dd02      	ble.n	8006248 <_dtoa_r+0xa10>
 8006242:	9b02      	ldr	r3, [sp, #8]
 8006244:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006248:	9b00      	ldr	r3, [sp, #0]
 800624a:	f883 8000 	strb.w	r8, [r3]
 800624e:	e63f      	b.n	8005ed0 <_dtoa_r+0x698>
 8006250:	4628      	mov	r0, r5
 8006252:	e7bb      	b.n	80061cc <_dtoa_r+0x994>
 8006254:	2201      	movs	r2, #1
 8006256:	e7e1      	b.n	800621c <_dtoa_r+0x9e4>
 8006258:	9b08      	ldr	r3, [sp, #32]
 800625a:	2b00      	cmp	r3, #0
 800625c:	db04      	blt.n	8006268 <_dtoa_r+0xa30>
 800625e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006260:	430b      	orrs	r3, r1
 8006262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006264:	430b      	orrs	r3, r1
 8006266:	d120      	bne.n	80062aa <_dtoa_r+0xa72>
 8006268:	2a00      	cmp	r2, #0
 800626a:	dded      	ble.n	8006248 <_dtoa_r+0xa10>
 800626c:	4649      	mov	r1, r9
 800626e:	2201      	movs	r2, #1
 8006270:	4658      	mov	r0, fp
 8006272:	f000 fbfd 	bl	8006a70 <__lshift>
 8006276:	4621      	mov	r1, r4
 8006278:	4681      	mov	r9, r0
 800627a:	f000 fc65 	bl	8006b48 <__mcmp>
 800627e:	2800      	cmp	r0, #0
 8006280:	dc03      	bgt.n	800628a <_dtoa_r+0xa52>
 8006282:	d1e1      	bne.n	8006248 <_dtoa_r+0xa10>
 8006284:	f018 0f01 	tst.w	r8, #1
 8006288:	d0de      	beq.n	8006248 <_dtoa_r+0xa10>
 800628a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800628e:	d1d8      	bne.n	8006242 <_dtoa_r+0xa0a>
 8006290:	9a00      	ldr	r2, [sp, #0]
 8006292:	2339      	movs	r3, #57	@ 0x39
 8006294:	7013      	strb	r3, [r2, #0]
 8006296:	4633      	mov	r3, r6
 8006298:	461e      	mov	r6, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80062a0:	2a39      	cmp	r2, #57	@ 0x39
 80062a2:	d052      	beq.n	800634a <_dtoa_r+0xb12>
 80062a4:	3201      	adds	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e612      	b.n	8005ed0 <_dtoa_r+0x698>
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	dd07      	ble.n	80062be <_dtoa_r+0xa86>
 80062ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062b2:	d0ed      	beq.n	8006290 <_dtoa_r+0xa58>
 80062b4:	9a00      	ldr	r2, [sp, #0]
 80062b6:	f108 0301 	add.w	r3, r8, #1
 80062ba:	7013      	strb	r3, [r2, #0]
 80062bc:	e608      	b.n	8005ed0 <_dtoa_r+0x698>
 80062be:	9b07      	ldr	r3, [sp, #28]
 80062c0:	9a07      	ldr	r2, [sp, #28]
 80062c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80062c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d028      	beq.n	800631e <_dtoa_r+0xae6>
 80062cc:	4649      	mov	r1, r9
 80062ce:	2300      	movs	r3, #0
 80062d0:	220a      	movs	r2, #10
 80062d2:	4658      	mov	r0, fp
 80062d4:	f000 f9d6 	bl	8006684 <__multadd>
 80062d8:	42af      	cmp	r7, r5
 80062da:	4681      	mov	r9, r0
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	f04f 020a 	mov.w	r2, #10
 80062e4:	4639      	mov	r1, r7
 80062e6:	4658      	mov	r0, fp
 80062e8:	d107      	bne.n	80062fa <_dtoa_r+0xac2>
 80062ea:	f000 f9cb 	bl	8006684 <__multadd>
 80062ee:	4607      	mov	r7, r0
 80062f0:	4605      	mov	r5, r0
 80062f2:	9b07      	ldr	r3, [sp, #28]
 80062f4:	3301      	adds	r3, #1
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	e774      	b.n	80061e4 <_dtoa_r+0x9ac>
 80062fa:	f000 f9c3 	bl	8006684 <__multadd>
 80062fe:	4629      	mov	r1, r5
 8006300:	4607      	mov	r7, r0
 8006302:	2300      	movs	r3, #0
 8006304:	220a      	movs	r2, #10
 8006306:	4658      	mov	r0, fp
 8006308:	f000 f9bc 	bl	8006684 <__multadd>
 800630c:	4605      	mov	r5, r0
 800630e:	e7f0      	b.n	80062f2 <_dtoa_r+0xaba>
 8006310:	9b00      	ldr	r3, [sp, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	bfcc      	ite	gt
 8006316:	461e      	movgt	r6, r3
 8006318:	2601      	movle	r6, #1
 800631a:	4456      	add	r6, sl
 800631c:	2700      	movs	r7, #0
 800631e:	4649      	mov	r1, r9
 8006320:	2201      	movs	r2, #1
 8006322:	4658      	mov	r0, fp
 8006324:	f000 fba4 	bl	8006a70 <__lshift>
 8006328:	4621      	mov	r1, r4
 800632a:	4681      	mov	r9, r0
 800632c:	f000 fc0c 	bl	8006b48 <__mcmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	dcb0      	bgt.n	8006296 <_dtoa_r+0xa5e>
 8006334:	d102      	bne.n	800633c <_dtoa_r+0xb04>
 8006336:	f018 0f01 	tst.w	r8, #1
 800633a:	d1ac      	bne.n	8006296 <_dtoa_r+0xa5e>
 800633c:	4633      	mov	r3, r6
 800633e:	461e      	mov	r6, r3
 8006340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006344:	2a30      	cmp	r2, #48	@ 0x30
 8006346:	d0fa      	beq.n	800633e <_dtoa_r+0xb06>
 8006348:	e5c2      	b.n	8005ed0 <_dtoa_r+0x698>
 800634a:	459a      	cmp	sl, r3
 800634c:	d1a4      	bne.n	8006298 <_dtoa_r+0xa60>
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	3301      	adds	r3, #1
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	2331      	movs	r3, #49	@ 0x31
 8006356:	f88a 3000 	strb.w	r3, [sl]
 800635a:	e5b9      	b.n	8005ed0 <_dtoa_r+0x698>
 800635c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800635e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80063bc <_dtoa_r+0xb84>
 8006362:	b11b      	cbz	r3, 800636c <_dtoa_r+0xb34>
 8006364:	f10a 0308 	add.w	r3, sl, #8
 8006368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	4650      	mov	r0, sl
 800636e:	b019      	add	sp, #100	@ 0x64
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006376:	2b01      	cmp	r3, #1
 8006378:	f77f ae37 	ble.w	8005fea <_dtoa_r+0x7b2>
 800637c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800637e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006380:	2001      	movs	r0, #1
 8006382:	e655      	b.n	8006030 <_dtoa_r+0x7f8>
 8006384:	9b00      	ldr	r3, [sp, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f77f aed6 	ble.w	8006138 <_dtoa_r+0x900>
 800638c:	4656      	mov	r6, sl
 800638e:	4621      	mov	r1, r4
 8006390:	4648      	mov	r0, r9
 8006392:	f7ff f9c7 	bl	8005724 <quorem>
 8006396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800639a:	f806 8b01 	strb.w	r8, [r6], #1
 800639e:	9b00      	ldr	r3, [sp, #0]
 80063a0:	eba6 020a 	sub.w	r2, r6, sl
 80063a4:	4293      	cmp	r3, r2
 80063a6:	ddb3      	ble.n	8006310 <_dtoa_r+0xad8>
 80063a8:	4649      	mov	r1, r9
 80063aa:	2300      	movs	r3, #0
 80063ac:	220a      	movs	r2, #10
 80063ae:	4658      	mov	r0, fp
 80063b0:	f000 f968 	bl	8006684 <__multadd>
 80063b4:	4681      	mov	r9, r0
 80063b6:	e7ea      	b.n	800638e <_dtoa_r+0xb56>
 80063b8:	08008ef9 	.word	0x08008ef9
 80063bc:	08008e7d 	.word	0x08008e7d

080063c0 <_free_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4605      	mov	r5, r0
 80063c4:	2900      	cmp	r1, #0
 80063c6:	d041      	beq.n	800644c <_free_r+0x8c>
 80063c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063cc:	1f0c      	subs	r4, r1, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bfb8      	it	lt
 80063d2:	18e4      	addlt	r4, r4, r3
 80063d4:	f000 f8e8 	bl	80065a8 <__malloc_lock>
 80063d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006450 <_free_r+0x90>)
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	b933      	cbnz	r3, 80063ec <_free_r+0x2c>
 80063de:	6063      	str	r3, [r4, #4]
 80063e0:	6014      	str	r4, [r2, #0]
 80063e2:	4628      	mov	r0, r5
 80063e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e8:	f000 b8e4 	b.w	80065b4 <__malloc_unlock>
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d908      	bls.n	8006402 <_free_r+0x42>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	1821      	adds	r1, r4, r0
 80063f4:	428b      	cmp	r3, r1
 80063f6:	bf01      	itttt	eq
 80063f8:	6819      	ldreq	r1, [r3, #0]
 80063fa:	685b      	ldreq	r3, [r3, #4]
 80063fc:	1809      	addeq	r1, r1, r0
 80063fe:	6021      	streq	r1, [r4, #0]
 8006400:	e7ed      	b.n	80063de <_free_r+0x1e>
 8006402:	461a      	mov	r2, r3
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b10b      	cbz	r3, 800640c <_free_r+0x4c>
 8006408:	42a3      	cmp	r3, r4
 800640a:	d9fa      	bls.n	8006402 <_free_r+0x42>
 800640c:	6811      	ldr	r1, [r2, #0]
 800640e:	1850      	adds	r0, r2, r1
 8006410:	42a0      	cmp	r0, r4
 8006412:	d10b      	bne.n	800642c <_free_r+0x6c>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	4401      	add	r1, r0
 8006418:	1850      	adds	r0, r2, r1
 800641a:	4283      	cmp	r3, r0
 800641c:	6011      	str	r1, [r2, #0]
 800641e:	d1e0      	bne.n	80063e2 <_free_r+0x22>
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	6053      	str	r3, [r2, #4]
 8006426:	4408      	add	r0, r1
 8006428:	6010      	str	r0, [r2, #0]
 800642a:	e7da      	b.n	80063e2 <_free_r+0x22>
 800642c:	d902      	bls.n	8006434 <_free_r+0x74>
 800642e:	230c      	movs	r3, #12
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	e7d6      	b.n	80063e2 <_free_r+0x22>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	1821      	adds	r1, r4, r0
 8006438:	428b      	cmp	r3, r1
 800643a:	bf04      	itt	eq
 800643c:	6819      	ldreq	r1, [r3, #0]
 800643e:	685b      	ldreq	r3, [r3, #4]
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	bf04      	itt	eq
 8006444:	1809      	addeq	r1, r1, r0
 8006446:	6021      	streq	r1, [r4, #0]
 8006448:	6054      	str	r4, [r2, #4]
 800644a:	e7ca      	b.n	80063e2 <_free_r+0x22>
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	20000500 	.word	0x20000500

08006454 <malloc>:
 8006454:	4b02      	ldr	r3, [pc, #8]	@ (8006460 <malloc+0xc>)
 8006456:	4601      	mov	r1, r0
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f000 b825 	b.w	80064a8 <_malloc_r>
 800645e:	bf00      	nop
 8006460:	20000014 	.word	0x20000014

08006464 <sbrk_aligned>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	4e0f      	ldr	r6, [pc, #60]	@ (80064a4 <sbrk_aligned+0x40>)
 8006468:	460c      	mov	r4, r1
 800646a:	6831      	ldr	r1, [r6, #0]
 800646c:	4605      	mov	r5, r0
 800646e:	b911      	cbnz	r1, 8006476 <sbrk_aligned+0x12>
 8006470:	f001 fe0c 	bl	800808c <_sbrk_r>
 8006474:	6030      	str	r0, [r6, #0]
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f001 fe07 	bl	800808c <_sbrk_r>
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	d103      	bne.n	800648a <sbrk_aligned+0x26>
 8006482:	f04f 34ff 	mov.w	r4, #4294967295
 8006486:	4620      	mov	r0, r4
 8006488:	bd70      	pop	{r4, r5, r6, pc}
 800648a:	1cc4      	adds	r4, r0, #3
 800648c:	f024 0403 	bic.w	r4, r4, #3
 8006490:	42a0      	cmp	r0, r4
 8006492:	d0f8      	beq.n	8006486 <sbrk_aligned+0x22>
 8006494:	1a21      	subs	r1, r4, r0
 8006496:	4628      	mov	r0, r5
 8006498:	f001 fdf8 	bl	800808c <_sbrk_r>
 800649c:	3001      	adds	r0, #1
 800649e:	d1f2      	bne.n	8006486 <sbrk_aligned+0x22>
 80064a0:	e7ef      	b.n	8006482 <sbrk_aligned+0x1e>
 80064a2:	bf00      	nop
 80064a4:	200004fc 	.word	0x200004fc

080064a8 <_malloc_r>:
 80064a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ac:	1ccd      	adds	r5, r1, #3
 80064ae:	f025 0503 	bic.w	r5, r5, #3
 80064b2:	3508      	adds	r5, #8
 80064b4:	2d0c      	cmp	r5, #12
 80064b6:	bf38      	it	cc
 80064b8:	250c      	movcc	r5, #12
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	4606      	mov	r6, r0
 80064be:	db01      	blt.n	80064c4 <_malloc_r+0x1c>
 80064c0:	42a9      	cmp	r1, r5
 80064c2:	d904      	bls.n	80064ce <_malloc_r+0x26>
 80064c4:	230c      	movs	r3, #12
 80064c6:	6033      	str	r3, [r6, #0]
 80064c8:	2000      	movs	r0, #0
 80064ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065a4 <_malloc_r+0xfc>
 80064d2:	f000 f869 	bl	80065a8 <__malloc_lock>
 80064d6:	f8d8 3000 	ldr.w	r3, [r8]
 80064da:	461c      	mov	r4, r3
 80064dc:	bb44      	cbnz	r4, 8006530 <_malloc_r+0x88>
 80064de:	4629      	mov	r1, r5
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff ffbf 	bl	8006464 <sbrk_aligned>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	4604      	mov	r4, r0
 80064ea:	d158      	bne.n	800659e <_malloc_r+0xf6>
 80064ec:	f8d8 4000 	ldr.w	r4, [r8]
 80064f0:	4627      	mov	r7, r4
 80064f2:	2f00      	cmp	r7, #0
 80064f4:	d143      	bne.n	800657e <_malloc_r+0xd6>
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	d04b      	beq.n	8006592 <_malloc_r+0xea>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	4639      	mov	r1, r7
 80064fe:	4630      	mov	r0, r6
 8006500:	eb04 0903 	add.w	r9, r4, r3
 8006504:	f001 fdc2 	bl	800808c <_sbrk_r>
 8006508:	4581      	cmp	r9, r0
 800650a:	d142      	bne.n	8006592 <_malloc_r+0xea>
 800650c:	6821      	ldr	r1, [r4, #0]
 800650e:	1a6d      	subs	r5, r5, r1
 8006510:	4629      	mov	r1, r5
 8006512:	4630      	mov	r0, r6
 8006514:	f7ff ffa6 	bl	8006464 <sbrk_aligned>
 8006518:	3001      	adds	r0, #1
 800651a:	d03a      	beq.n	8006592 <_malloc_r+0xea>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	442b      	add	r3, r5
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	f8d8 3000 	ldr.w	r3, [r8]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	bb62      	cbnz	r2, 8006584 <_malloc_r+0xdc>
 800652a:	f8c8 7000 	str.w	r7, [r8]
 800652e:	e00f      	b.n	8006550 <_malloc_r+0xa8>
 8006530:	6822      	ldr	r2, [r4, #0]
 8006532:	1b52      	subs	r2, r2, r5
 8006534:	d420      	bmi.n	8006578 <_malloc_r+0xd0>
 8006536:	2a0b      	cmp	r2, #11
 8006538:	d917      	bls.n	800656a <_malloc_r+0xc2>
 800653a:	1961      	adds	r1, r4, r5
 800653c:	42a3      	cmp	r3, r4
 800653e:	6025      	str	r5, [r4, #0]
 8006540:	bf18      	it	ne
 8006542:	6059      	strne	r1, [r3, #4]
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	bf08      	it	eq
 8006548:	f8c8 1000 	streq.w	r1, [r8]
 800654c:	5162      	str	r2, [r4, r5]
 800654e:	604b      	str	r3, [r1, #4]
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f82f 	bl	80065b4 <__malloc_unlock>
 8006556:	f104 000b 	add.w	r0, r4, #11
 800655a:	1d23      	adds	r3, r4, #4
 800655c:	f020 0007 	bic.w	r0, r0, #7
 8006560:	1ac2      	subs	r2, r0, r3
 8006562:	bf1c      	itt	ne
 8006564:	1a1b      	subne	r3, r3, r0
 8006566:	50a3      	strne	r3, [r4, r2]
 8006568:	e7af      	b.n	80064ca <_malloc_r+0x22>
 800656a:	6862      	ldr	r2, [r4, #4]
 800656c:	42a3      	cmp	r3, r4
 800656e:	bf0c      	ite	eq
 8006570:	f8c8 2000 	streq.w	r2, [r8]
 8006574:	605a      	strne	r2, [r3, #4]
 8006576:	e7eb      	b.n	8006550 <_malloc_r+0xa8>
 8006578:	4623      	mov	r3, r4
 800657a:	6864      	ldr	r4, [r4, #4]
 800657c:	e7ae      	b.n	80064dc <_malloc_r+0x34>
 800657e:	463c      	mov	r4, r7
 8006580:	687f      	ldr	r7, [r7, #4]
 8006582:	e7b6      	b.n	80064f2 <_malloc_r+0x4a>
 8006584:	461a      	mov	r2, r3
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	42a3      	cmp	r3, r4
 800658a:	d1fb      	bne.n	8006584 <_malloc_r+0xdc>
 800658c:	2300      	movs	r3, #0
 800658e:	6053      	str	r3, [r2, #4]
 8006590:	e7de      	b.n	8006550 <_malloc_r+0xa8>
 8006592:	230c      	movs	r3, #12
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	4630      	mov	r0, r6
 8006598:	f000 f80c 	bl	80065b4 <__malloc_unlock>
 800659c:	e794      	b.n	80064c8 <_malloc_r+0x20>
 800659e:	6005      	str	r5, [r0, #0]
 80065a0:	e7d6      	b.n	8006550 <_malloc_r+0xa8>
 80065a2:	bf00      	nop
 80065a4:	20000500 	.word	0x20000500

080065a8 <__malloc_lock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	@ (80065b0 <__malloc_lock+0x8>)
 80065aa:	f7ff b8b2 	b.w	8005712 <__retarget_lock_acquire_recursive>
 80065ae:	bf00      	nop
 80065b0:	200004f8 	.word	0x200004f8

080065b4 <__malloc_unlock>:
 80065b4:	4801      	ldr	r0, [pc, #4]	@ (80065bc <__malloc_unlock+0x8>)
 80065b6:	f7ff b8ad 	b.w	8005714 <__retarget_lock_release_recursive>
 80065ba:	bf00      	nop
 80065bc:	200004f8 	.word	0x200004f8

080065c0 <_Balloc>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	69c6      	ldr	r6, [r0, #28]
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	b976      	cbnz	r6, 80065e8 <_Balloc+0x28>
 80065ca:	2010      	movs	r0, #16
 80065cc:	f7ff ff42 	bl	8006454 <malloc>
 80065d0:	4602      	mov	r2, r0
 80065d2:	61e0      	str	r0, [r4, #28]
 80065d4:	b920      	cbnz	r0, 80065e0 <_Balloc+0x20>
 80065d6:	4b18      	ldr	r3, [pc, #96]	@ (8006638 <_Balloc+0x78>)
 80065d8:	4818      	ldr	r0, [pc, #96]	@ (800663c <_Balloc+0x7c>)
 80065da:	216b      	movs	r1, #107	@ 0x6b
 80065dc:	f001 fd7c 	bl	80080d8 <__assert_func>
 80065e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065e4:	6006      	str	r6, [r0, #0]
 80065e6:	60c6      	str	r6, [r0, #12]
 80065e8:	69e6      	ldr	r6, [r4, #28]
 80065ea:	68f3      	ldr	r3, [r6, #12]
 80065ec:	b183      	cbz	r3, 8006610 <_Balloc+0x50>
 80065ee:	69e3      	ldr	r3, [r4, #28]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065f6:	b9b8      	cbnz	r0, 8006628 <_Balloc+0x68>
 80065f8:	2101      	movs	r1, #1
 80065fa:	fa01 f605 	lsl.w	r6, r1, r5
 80065fe:	1d72      	adds	r2, r6, #5
 8006600:	0092      	lsls	r2, r2, #2
 8006602:	4620      	mov	r0, r4
 8006604:	f001 fd86 	bl	8008114 <_calloc_r>
 8006608:	b160      	cbz	r0, 8006624 <_Balloc+0x64>
 800660a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800660e:	e00e      	b.n	800662e <_Balloc+0x6e>
 8006610:	2221      	movs	r2, #33	@ 0x21
 8006612:	2104      	movs	r1, #4
 8006614:	4620      	mov	r0, r4
 8006616:	f001 fd7d 	bl	8008114 <_calloc_r>
 800661a:	69e3      	ldr	r3, [r4, #28]
 800661c:	60f0      	str	r0, [r6, #12]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e4      	bne.n	80065ee <_Balloc+0x2e>
 8006624:	2000      	movs	r0, #0
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	6802      	ldr	r2, [r0, #0]
 800662a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800662e:	2300      	movs	r3, #0
 8006630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006634:	e7f7      	b.n	8006626 <_Balloc+0x66>
 8006636:	bf00      	nop
 8006638:	08008e8a 	.word	0x08008e8a
 800663c:	08008f0a 	.word	0x08008f0a

08006640 <_Bfree>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	69c6      	ldr	r6, [r0, #28]
 8006644:	4605      	mov	r5, r0
 8006646:	460c      	mov	r4, r1
 8006648:	b976      	cbnz	r6, 8006668 <_Bfree+0x28>
 800664a:	2010      	movs	r0, #16
 800664c:	f7ff ff02 	bl	8006454 <malloc>
 8006650:	4602      	mov	r2, r0
 8006652:	61e8      	str	r0, [r5, #28]
 8006654:	b920      	cbnz	r0, 8006660 <_Bfree+0x20>
 8006656:	4b09      	ldr	r3, [pc, #36]	@ (800667c <_Bfree+0x3c>)
 8006658:	4809      	ldr	r0, [pc, #36]	@ (8006680 <_Bfree+0x40>)
 800665a:	218f      	movs	r1, #143	@ 0x8f
 800665c:	f001 fd3c 	bl	80080d8 <__assert_func>
 8006660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006664:	6006      	str	r6, [r0, #0]
 8006666:	60c6      	str	r6, [r0, #12]
 8006668:	b13c      	cbz	r4, 800667a <_Bfree+0x3a>
 800666a:	69eb      	ldr	r3, [r5, #28]
 800666c:	6862      	ldr	r2, [r4, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006674:	6021      	str	r1, [r4, #0]
 8006676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	08008e8a 	.word	0x08008e8a
 8006680:	08008f0a 	.word	0x08008f0a

08006684 <__multadd>:
 8006684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006688:	690d      	ldr	r5, [r1, #16]
 800668a:	4607      	mov	r7, r0
 800668c:	460c      	mov	r4, r1
 800668e:	461e      	mov	r6, r3
 8006690:	f101 0c14 	add.w	ip, r1, #20
 8006694:	2000      	movs	r0, #0
 8006696:	f8dc 3000 	ldr.w	r3, [ip]
 800669a:	b299      	uxth	r1, r3
 800669c:	fb02 6101 	mla	r1, r2, r1, r6
 80066a0:	0c1e      	lsrs	r6, r3, #16
 80066a2:	0c0b      	lsrs	r3, r1, #16
 80066a4:	fb02 3306 	mla	r3, r2, r6, r3
 80066a8:	b289      	uxth	r1, r1
 80066aa:	3001      	adds	r0, #1
 80066ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066b0:	4285      	cmp	r5, r0
 80066b2:	f84c 1b04 	str.w	r1, [ip], #4
 80066b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066ba:	dcec      	bgt.n	8006696 <__multadd+0x12>
 80066bc:	b30e      	cbz	r6, 8006702 <__multadd+0x7e>
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dc19      	bgt.n	80066f8 <__multadd+0x74>
 80066c4:	6861      	ldr	r1, [r4, #4]
 80066c6:	4638      	mov	r0, r7
 80066c8:	3101      	adds	r1, #1
 80066ca:	f7ff ff79 	bl	80065c0 <_Balloc>
 80066ce:	4680      	mov	r8, r0
 80066d0:	b928      	cbnz	r0, 80066de <__multadd+0x5a>
 80066d2:	4602      	mov	r2, r0
 80066d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006708 <__multadd+0x84>)
 80066d6:	480d      	ldr	r0, [pc, #52]	@ (800670c <__multadd+0x88>)
 80066d8:	21ba      	movs	r1, #186	@ 0xba
 80066da:	f001 fcfd 	bl	80080d8 <__assert_func>
 80066de:	6922      	ldr	r2, [r4, #16]
 80066e0:	3202      	adds	r2, #2
 80066e2:	f104 010c 	add.w	r1, r4, #12
 80066e6:	0092      	lsls	r2, r2, #2
 80066e8:	300c      	adds	r0, #12
 80066ea:	f001 fcdf 	bl	80080ac <memcpy>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4638      	mov	r0, r7
 80066f2:	f7ff ffa5 	bl	8006640 <_Bfree>
 80066f6:	4644      	mov	r4, r8
 80066f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066fc:	3501      	adds	r5, #1
 80066fe:	615e      	str	r6, [r3, #20]
 8006700:	6125      	str	r5, [r4, #16]
 8006702:	4620      	mov	r0, r4
 8006704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006708:	08008ef9 	.word	0x08008ef9
 800670c:	08008f0a 	.word	0x08008f0a

08006710 <__s2b>:
 8006710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006714:	460c      	mov	r4, r1
 8006716:	4615      	mov	r5, r2
 8006718:	461f      	mov	r7, r3
 800671a:	2209      	movs	r2, #9
 800671c:	3308      	adds	r3, #8
 800671e:	4606      	mov	r6, r0
 8006720:	fb93 f3f2 	sdiv	r3, r3, r2
 8006724:	2100      	movs	r1, #0
 8006726:	2201      	movs	r2, #1
 8006728:	429a      	cmp	r2, r3
 800672a:	db09      	blt.n	8006740 <__s2b+0x30>
 800672c:	4630      	mov	r0, r6
 800672e:	f7ff ff47 	bl	80065c0 <_Balloc>
 8006732:	b940      	cbnz	r0, 8006746 <__s2b+0x36>
 8006734:	4602      	mov	r2, r0
 8006736:	4b19      	ldr	r3, [pc, #100]	@ (800679c <__s2b+0x8c>)
 8006738:	4819      	ldr	r0, [pc, #100]	@ (80067a0 <__s2b+0x90>)
 800673a:	21d3      	movs	r1, #211	@ 0xd3
 800673c:	f001 fccc 	bl	80080d8 <__assert_func>
 8006740:	0052      	lsls	r2, r2, #1
 8006742:	3101      	adds	r1, #1
 8006744:	e7f0      	b.n	8006728 <__s2b+0x18>
 8006746:	9b08      	ldr	r3, [sp, #32]
 8006748:	6143      	str	r3, [r0, #20]
 800674a:	2d09      	cmp	r5, #9
 800674c:	f04f 0301 	mov.w	r3, #1
 8006750:	6103      	str	r3, [r0, #16]
 8006752:	dd16      	ble.n	8006782 <__s2b+0x72>
 8006754:	f104 0909 	add.w	r9, r4, #9
 8006758:	46c8      	mov	r8, r9
 800675a:	442c      	add	r4, r5
 800675c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006760:	4601      	mov	r1, r0
 8006762:	3b30      	subs	r3, #48	@ 0x30
 8006764:	220a      	movs	r2, #10
 8006766:	4630      	mov	r0, r6
 8006768:	f7ff ff8c 	bl	8006684 <__multadd>
 800676c:	45a0      	cmp	r8, r4
 800676e:	d1f5      	bne.n	800675c <__s2b+0x4c>
 8006770:	f1a5 0408 	sub.w	r4, r5, #8
 8006774:	444c      	add	r4, r9
 8006776:	1b2d      	subs	r5, r5, r4
 8006778:	1963      	adds	r3, r4, r5
 800677a:	42bb      	cmp	r3, r7
 800677c:	db04      	blt.n	8006788 <__s2b+0x78>
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006782:	340a      	adds	r4, #10
 8006784:	2509      	movs	r5, #9
 8006786:	e7f6      	b.n	8006776 <__s2b+0x66>
 8006788:	f814 3b01 	ldrb.w	r3, [r4], #1
 800678c:	4601      	mov	r1, r0
 800678e:	3b30      	subs	r3, #48	@ 0x30
 8006790:	220a      	movs	r2, #10
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ff76 	bl	8006684 <__multadd>
 8006798:	e7ee      	b.n	8006778 <__s2b+0x68>
 800679a:	bf00      	nop
 800679c:	08008ef9 	.word	0x08008ef9
 80067a0:	08008f0a 	.word	0x08008f0a

080067a4 <__hi0bits>:
 80067a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80067a8:	4603      	mov	r3, r0
 80067aa:	bf36      	itet	cc
 80067ac:	0403      	lslcc	r3, r0, #16
 80067ae:	2000      	movcs	r0, #0
 80067b0:	2010      	movcc	r0, #16
 80067b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067b6:	bf3c      	itt	cc
 80067b8:	021b      	lslcc	r3, r3, #8
 80067ba:	3008      	addcc	r0, #8
 80067bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067c0:	bf3c      	itt	cc
 80067c2:	011b      	lslcc	r3, r3, #4
 80067c4:	3004      	addcc	r0, #4
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ca:	bf3c      	itt	cc
 80067cc:	009b      	lslcc	r3, r3, #2
 80067ce:	3002      	addcc	r0, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	db05      	blt.n	80067e0 <__hi0bits+0x3c>
 80067d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80067d8:	f100 0001 	add.w	r0, r0, #1
 80067dc:	bf08      	it	eq
 80067de:	2020      	moveq	r0, #32
 80067e0:	4770      	bx	lr

080067e2 <__lo0bits>:
 80067e2:	6803      	ldr	r3, [r0, #0]
 80067e4:	4602      	mov	r2, r0
 80067e6:	f013 0007 	ands.w	r0, r3, #7
 80067ea:	d00b      	beq.n	8006804 <__lo0bits+0x22>
 80067ec:	07d9      	lsls	r1, r3, #31
 80067ee:	d421      	bmi.n	8006834 <__lo0bits+0x52>
 80067f0:	0798      	lsls	r0, r3, #30
 80067f2:	bf49      	itett	mi
 80067f4:	085b      	lsrmi	r3, r3, #1
 80067f6:	089b      	lsrpl	r3, r3, #2
 80067f8:	2001      	movmi	r0, #1
 80067fa:	6013      	strmi	r3, [r2, #0]
 80067fc:	bf5c      	itt	pl
 80067fe:	6013      	strpl	r3, [r2, #0]
 8006800:	2002      	movpl	r0, #2
 8006802:	4770      	bx	lr
 8006804:	b299      	uxth	r1, r3
 8006806:	b909      	cbnz	r1, 800680c <__lo0bits+0x2a>
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	2010      	movs	r0, #16
 800680c:	b2d9      	uxtb	r1, r3
 800680e:	b909      	cbnz	r1, 8006814 <__lo0bits+0x32>
 8006810:	3008      	adds	r0, #8
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	0719      	lsls	r1, r3, #28
 8006816:	bf04      	itt	eq
 8006818:	091b      	lsreq	r3, r3, #4
 800681a:	3004      	addeq	r0, #4
 800681c:	0799      	lsls	r1, r3, #30
 800681e:	bf04      	itt	eq
 8006820:	089b      	lsreq	r3, r3, #2
 8006822:	3002      	addeq	r0, #2
 8006824:	07d9      	lsls	r1, r3, #31
 8006826:	d403      	bmi.n	8006830 <__lo0bits+0x4e>
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	f100 0001 	add.w	r0, r0, #1
 800682e:	d003      	beq.n	8006838 <__lo0bits+0x56>
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	4770      	bx	lr
 8006834:	2000      	movs	r0, #0
 8006836:	4770      	bx	lr
 8006838:	2020      	movs	r0, #32
 800683a:	4770      	bx	lr

0800683c <__i2b>:
 800683c:	b510      	push	{r4, lr}
 800683e:	460c      	mov	r4, r1
 8006840:	2101      	movs	r1, #1
 8006842:	f7ff febd 	bl	80065c0 <_Balloc>
 8006846:	4602      	mov	r2, r0
 8006848:	b928      	cbnz	r0, 8006856 <__i2b+0x1a>
 800684a:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <__i2b+0x24>)
 800684c:	4805      	ldr	r0, [pc, #20]	@ (8006864 <__i2b+0x28>)
 800684e:	f240 1145 	movw	r1, #325	@ 0x145
 8006852:	f001 fc41 	bl	80080d8 <__assert_func>
 8006856:	2301      	movs	r3, #1
 8006858:	6144      	str	r4, [r0, #20]
 800685a:	6103      	str	r3, [r0, #16]
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	08008ef9 	.word	0x08008ef9
 8006864:	08008f0a 	.word	0x08008f0a

08006868 <__multiply>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	4614      	mov	r4, r2
 800686e:	690a      	ldr	r2, [r1, #16]
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	429a      	cmp	r2, r3
 8006874:	bfa8      	it	ge
 8006876:	4623      	movge	r3, r4
 8006878:	460f      	mov	r7, r1
 800687a:	bfa4      	itt	ge
 800687c:	460c      	movge	r4, r1
 800687e:	461f      	movge	r7, r3
 8006880:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006884:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006888:	68a3      	ldr	r3, [r4, #8]
 800688a:	6861      	ldr	r1, [r4, #4]
 800688c:	eb0a 0609 	add.w	r6, sl, r9
 8006890:	42b3      	cmp	r3, r6
 8006892:	b085      	sub	sp, #20
 8006894:	bfb8      	it	lt
 8006896:	3101      	addlt	r1, #1
 8006898:	f7ff fe92 	bl	80065c0 <_Balloc>
 800689c:	b930      	cbnz	r0, 80068ac <__multiply+0x44>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b44      	ldr	r3, [pc, #272]	@ (80069b4 <__multiply+0x14c>)
 80068a2:	4845      	ldr	r0, [pc, #276]	@ (80069b8 <__multiply+0x150>)
 80068a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80068a8:	f001 fc16 	bl	80080d8 <__assert_func>
 80068ac:	f100 0514 	add.w	r5, r0, #20
 80068b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068b4:	462b      	mov	r3, r5
 80068b6:	2200      	movs	r2, #0
 80068b8:	4543      	cmp	r3, r8
 80068ba:	d321      	bcc.n	8006900 <__multiply+0x98>
 80068bc:	f107 0114 	add.w	r1, r7, #20
 80068c0:	f104 0214 	add.w	r2, r4, #20
 80068c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80068c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80068cc:	9302      	str	r3, [sp, #8]
 80068ce:	1b13      	subs	r3, r2, r4
 80068d0:	3b15      	subs	r3, #21
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	3304      	adds	r3, #4
 80068d8:	f104 0715 	add.w	r7, r4, #21
 80068dc:	42ba      	cmp	r2, r7
 80068de:	bf38      	it	cc
 80068e0:	2304      	movcc	r3, #4
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	9103      	str	r1, [sp, #12]
 80068e8:	428b      	cmp	r3, r1
 80068ea:	d80c      	bhi.n	8006906 <__multiply+0x9e>
 80068ec:	2e00      	cmp	r6, #0
 80068ee:	dd03      	ble.n	80068f8 <__multiply+0x90>
 80068f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d05b      	beq.n	80069b0 <__multiply+0x148>
 80068f8:	6106      	str	r6, [r0, #16]
 80068fa:	b005      	add	sp, #20
 80068fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006900:	f843 2b04 	str.w	r2, [r3], #4
 8006904:	e7d8      	b.n	80068b8 <__multiply+0x50>
 8006906:	f8b1 a000 	ldrh.w	sl, [r1]
 800690a:	f1ba 0f00 	cmp.w	sl, #0
 800690e:	d024      	beq.n	800695a <__multiply+0xf2>
 8006910:	f104 0e14 	add.w	lr, r4, #20
 8006914:	46a9      	mov	r9, r5
 8006916:	f04f 0c00 	mov.w	ip, #0
 800691a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800691e:	f8d9 3000 	ldr.w	r3, [r9]
 8006922:	fa1f fb87 	uxth.w	fp, r7
 8006926:	b29b      	uxth	r3, r3
 8006928:	fb0a 330b 	mla	r3, sl, fp, r3
 800692c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006930:	f8d9 7000 	ldr.w	r7, [r9]
 8006934:	4463      	add	r3, ip
 8006936:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800693a:	fb0a c70b 	mla	r7, sl, fp, ip
 800693e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006942:	b29b      	uxth	r3, r3
 8006944:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006948:	4572      	cmp	r2, lr
 800694a:	f849 3b04 	str.w	r3, [r9], #4
 800694e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006952:	d8e2      	bhi.n	800691a <__multiply+0xb2>
 8006954:	9b01      	ldr	r3, [sp, #4]
 8006956:	f845 c003 	str.w	ip, [r5, r3]
 800695a:	9b03      	ldr	r3, [sp, #12]
 800695c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006960:	3104      	adds	r1, #4
 8006962:	f1b9 0f00 	cmp.w	r9, #0
 8006966:	d021      	beq.n	80069ac <__multiply+0x144>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	f104 0c14 	add.w	ip, r4, #20
 800696e:	46ae      	mov	lr, r5
 8006970:	f04f 0a00 	mov.w	sl, #0
 8006974:	f8bc b000 	ldrh.w	fp, [ip]
 8006978:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800697c:	fb09 770b 	mla	r7, r9, fp, r7
 8006980:	4457      	add	r7, sl
 8006982:	b29b      	uxth	r3, r3
 8006984:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006988:	f84e 3b04 	str.w	r3, [lr], #4
 800698c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006990:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006994:	f8be 3000 	ldrh.w	r3, [lr]
 8006998:	fb09 330a 	mla	r3, r9, sl, r3
 800699c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80069a0:	4562      	cmp	r2, ip
 80069a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069a6:	d8e5      	bhi.n	8006974 <__multiply+0x10c>
 80069a8:	9f01      	ldr	r7, [sp, #4]
 80069aa:	51eb      	str	r3, [r5, r7]
 80069ac:	3504      	adds	r5, #4
 80069ae:	e799      	b.n	80068e4 <__multiply+0x7c>
 80069b0:	3e01      	subs	r6, #1
 80069b2:	e79b      	b.n	80068ec <__multiply+0x84>
 80069b4:	08008ef9 	.word	0x08008ef9
 80069b8:	08008f0a 	.word	0x08008f0a

080069bc <__pow5mult>:
 80069bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	4615      	mov	r5, r2
 80069c2:	f012 0203 	ands.w	r2, r2, #3
 80069c6:	4607      	mov	r7, r0
 80069c8:	460e      	mov	r6, r1
 80069ca:	d007      	beq.n	80069dc <__pow5mult+0x20>
 80069cc:	4c25      	ldr	r4, [pc, #148]	@ (8006a64 <__pow5mult+0xa8>)
 80069ce:	3a01      	subs	r2, #1
 80069d0:	2300      	movs	r3, #0
 80069d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069d6:	f7ff fe55 	bl	8006684 <__multadd>
 80069da:	4606      	mov	r6, r0
 80069dc:	10ad      	asrs	r5, r5, #2
 80069de:	d03d      	beq.n	8006a5c <__pow5mult+0xa0>
 80069e0:	69fc      	ldr	r4, [r7, #28]
 80069e2:	b97c      	cbnz	r4, 8006a04 <__pow5mult+0x48>
 80069e4:	2010      	movs	r0, #16
 80069e6:	f7ff fd35 	bl	8006454 <malloc>
 80069ea:	4602      	mov	r2, r0
 80069ec:	61f8      	str	r0, [r7, #28]
 80069ee:	b928      	cbnz	r0, 80069fc <__pow5mult+0x40>
 80069f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a68 <__pow5mult+0xac>)
 80069f2:	481e      	ldr	r0, [pc, #120]	@ (8006a6c <__pow5mult+0xb0>)
 80069f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80069f8:	f001 fb6e 	bl	80080d8 <__assert_func>
 80069fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a00:	6004      	str	r4, [r0, #0]
 8006a02:	60c4      	str	r4, [r0, #12]
 8006a04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a0c:	b94c      	cbnz	r4, 8006a22 <__pow5mult+0x66>
 8006a0e:	f240 2171 	movw	r1, #625	@ 0x271
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7ff ff12 	bl	800683c <__i2b>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a1e:	4604      	mov	r4, r0
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	f04f 0900 	mov.w	r9, #0
 8006a26:	07eb      	lsls	r3, r5, #31
 8006a28:	d50a      	bpl.n	8006a40 <__pow5mult+0x84>
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4638      	mov	r0, r7
 8006a30:	f7ff ff1a 	bl	8006868 <__multiply>
 8006a34:	4631      	mov	r1, r6
 8006a36:	4680      	mov	r8, r0
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f7ff fe01 	bl	8006640 <_Bfree>
 8006a3e:	4646      	mov	r6, r8
 8006a40:	106d      	asrs	r5, r5, #1
 8006a42:	d00b      	beq.n	8006a5c <__pow5mult+0xa0>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	b938      	cbnz	r0, 8006a58 <__pow5mult+0x9c>
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f7ff ff0b 	bl	8006868 <__multiply>
 8006a52:	6020      	str	r0, [r4, #0]
 8006a54:	f8c0 9000 	str.w	r9, [r0]
 8006a58:	4604      	mov	r4, r0
 8006a5a:	e7e4      	b.n	8006a26 <__pow5mult+0x6a>
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	bf00      	nop
 8006a64:	08008f64 	.word	0x08008f64
 8006a68:	08008e8a 	.word	0x08008e8a
 8006a6c:	08008f0a 	.word	0x08008f0a

08006a70 <__lshift>:
 8006a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	460c      	mov	r4, r1
 8006a76:	6849      	ldr	r1, [r1, #4]
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	4607      	mov	r7, r0
 8006a82:	4691      	mov	r9, r2
 8006a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a88:	f108 0601 	add.w	r6, r8, #1
 8006a8c:	42b3      	cmp	r3, r6
 8006a8e:	db0b      	blt.n	8006aa8 <__lshift+0x38>
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7ff fd95 	bl	80065c0 <_Balloc>
 8006a96:	4605      	mov	r5, r0
 8006a98:	b948      	cbnz	r0, 8006aae <__lshift+0x3e>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b28      	ldr	r3, [pc, #160]	@ (8006b40 <__lshift+0xd0>)
 8006a9e:	4829      	ldr	r0, [pc, #164]	@ (8006b44 <__lshift+0xd4>)
 8006aa0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006aa4:	f001 fb18 	bl	80080d8 <__assert_func>
 8006aa8:	3101      	adds	r1, #1
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	e7ee      	b.n	8006a8c <__lshift+0x1c>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f100 0114 	add.w	r1, r0, #20
 8006ab4:	f100 0210 	add.w	r2, r0, #16
 8006ab8:	4618      	mov	r0, r3
 8006aba:	4553      	cmp	r3, sl
 8006abc:	db33      	blt.n	8006b26 <__lshift+0xb6>
 8006abe:	6920      	ldr	r0, [r4, #16]
 8006ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ac4:	f104 0314 	add.w	r3, r4, #20
 8006ac8:	f019 091f 	ands.w	r9, r9, #31
 8006acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ad4:	d02b      	beq.n	8006b2e <__lshift+0xbe>
 8006ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8006ada:	468a      	mov	sl, r1
 8006adc:	2200      	movs	r2, #0
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ae4:	4310      	orrs	r0, r2
 8006ae6:	f84a 0b04 	str.w	r0, [sl], #4
 8006aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aee:	459c      	cmp	ip, r3
 8006af0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006af4:	d8f3      	bhi.n	8006ade <__lshift+0x6e>
 8006af6:	ebac 0304 	sub.w	r3, ip, r4
 8006afa:	3b15      	subs	r3, #21
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	3304      	adds	r3, #4
 8006b02:	f104 0015 	add.w	r0, r4, #21
 8006b06:	4584      	cmp	ip, r0
 8006b08:	bf38      	it	cc
 8006b0a:	2304      	movcc	r3, #4
 8006b0c:	50ca      	str	r2, [r1, r3]
 8006b0e:	b10a      	cbz	r2, 8006b14 <__lshift+0xa4>
 8006b10:	f108 0602 	add.w	r6, r8, #2
 8006b14:	3e01      	subs	r6, #1
 8006b16:	4638      	mov	r0, r7
 8006b18:	612e      	str	r6, [r5, #16]
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	f7ff fd90 	bl	8006640 <_Bfree>
 8006b20:	4628      	mov	r0, r5
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	e7c5      	b.n	8006aba <__lshift+0x4a>
 8006b2e:	3904      	subs	r1, #4
 8006b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b34:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b38:	459c      	cmp	ip, r3
 8006b3a:	d8f9      	bhi.n	8006b30 <__lshift+0xc0>
 8006b3c:	e7ea      	b.n	8006b14 <__lshift+0xa4>
 8006b3e:	bf00      	nop
 8006b40:	08008ef9 	.word	0x08008ef9
 8006b44:	08008f0a 	.word	0x08008f0a

08006b48 <__mcmp>:
 8006b48:	690a      	ldr	r2, [r1, #16]
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	6900      	ldr	r0, [r0, #16]
 8006b4e:	1a80      	subs	r0, r0, r2
 8006b50:	b530      	push	{r4, r5, lr}
 8006b52:	d10e      	bne.n	8006b72 <__mcmp+0x2a>
 8006b54:	3314      	adds	r3, #20
 8006b56:	3114      	adds	r1, #20
 8006b58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b68:	4295      	cmp	r5, r2
 8006b6a:	d003      	beq.n	8006b74 <__mcmp+0x2c>
 8006b6c:	d205      	bcs.n	8006b7a <__mcmp+0x32>
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b72:	bd30      	pop	{r4, r5, pc}
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	d3f3      	bcc.n	8006b60 <__mcmp+0x18>
 8006b78:	e7fb      	b.n	8006b72 <__mcmp+0x2a>
 8006b7a:	2001      	movs	r0, #1
 8006b7c:	e7f9      	b.n	8006b72 <__mcmp+0x2a>
	...

08006b80 <__mdiff>:
 8006b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	4689      	mov	r9, r1
 8006b86:	4606      	mov	r6, r0
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4648      	mov	r0, r9
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	f7ff ffdb 	bl	8006b48 <__mcmp>
 8006b92:	1e05      	subs	r5, r0, #0
 8006b94:	d112      	bne.n	8006bbc <__mdiff+0x3c>
 8006b96:	4629      	mov	r1, r5
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff fd11 	bl	80065c0 <_Balloc>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <__mdiff+0x2e>
 8006ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ca0 <__mdiff+0x120>)
 8006ba4:	f240 2137 	movw	r1, #567	@ 0x237
 8006ba8:	483e      	ldr	r0, [pc, #248]	@ (8006ca4 <__mdiff+0x124>)
 8006baa:	f001 fa95 	bl	80080d8 <__assert_func>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	b003      	add	sp, #12
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	bfbc      	itt	lt
 8006bbe:	464b      	movlt	r3, r9
 8006bc0:	46a1      	movlt	r9, r4
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006bc8:	bfba      	itte	lt
 8006bca:	461c      	movlt	r4, r3
 8006bcc:	2501      	movlt	r5, #1
 8006bce:	2500      	movge	r5, #0
 8006bd0:	f7ff fcf6 	bl	80065c0 <_Balloc>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	b918      	cbnz	r0, 8006be0 <__mdiff+0x60>
 8006bd8:	4b31      	ldr	r3, [pc, #196]	@ (8006ca0 <__mdiff+0x120>)
 8006bda:	f240 2145 	movw	r1, #581	@ 0x245
 8006bde:	e7e3      	b.n	8006ba8 <__mdiff+0x28>
 8006be0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006be4:	6926      	ldr	r6, [r4, #16]
 8006be6:	60c5      	str	r5, [r0, #12]
 8006be8:	f109 0310 	add.w	r3, r9, #16
 8006bec:	f109 0514 	add.w	r5, r9, #20
 8006bf0:	f104 0e14 	add.w	lr, r4, #20
 8006bf4:	f100 0b14 	add.w	fp, r0, #20
 8006bf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006bfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	46d9      	mov	r9, fp
 8006c04:	f04f 0c00 	mov.w	ip, #0
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	fa1f f38a 	uxth.w	r3, sl
 8006c18:	4619      	mov	r1, r3
 8006c1a:	b283      	uxth	r3, r0
 8006c1c:	1acb      	subs	r3, r1, r3
 8006c1e:	0c00      	lsrs	r0, r0, #16
 8006c20:	4463      	add	r3, ip
 8006c22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c30:	4576      	cmp	r6, lr
 8006c32:	f849 3b04 	str.w	r3, [r9], #4
 8006c36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c3a:	d8e5      	bhi.n	8006c08 <__mdiff+0x88>
 8006c3c:	1b33      	subs	r3, r6, r4
 8006c3e:	3b15      	subs	r3, #21
 8006c40:	f023 0303 	bic.w	r3, r3, #3
 8006c44:	3415      	adds	r4, #21
 8006c46:	3304      	adds	r3, #4
 8006c48:	42a6      	cmp	r6, r4
 8006c4a:	bf38      	it	cc
 8006c4c:	2304      	movcc	r3, #4
 8006c4e:	441d      	add	r5, r3
 8006c50:	445b      	add	r3, fp
 8006c52:	461e      	mov	r6, r3
 8006c54:	462c      	mov	r4, r5
 8006c56:	4544      	cmp	r4, r8
 8006c58:	d30e      	bcc.n	8006c78 <__mdiff+0xf8>
 8006c5a:	f108 0103 	add.w	r1, r8, #3
 8006c5e:	1b49      	subs	r1, r1, r5
 8006c60:	f021 0103 	bic.w	r1, r1, #3
 8006c64:	3d03      	subs	r5, #3
 8006c66:	45a8      	cmp	r8, r5
 8006c68:	bf38      	it	cc
 8006c6a:	2100      	movcc	r1, #0
 8006c6c:	440b      	add	r3, r1
 8006c6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c72:	b191      	cbz	r1, 8006c9a <__mdiff+0x11a>
 8006c74:	6117      	str	r7, [r2, #16]
 8006c76:	e79d      	b.n	8006bb4 <__mdiff+0x34>
 8006c78:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c7c:	46e6      	mov	lr, ip
 8006c7e:	0c08      	lsrs	r0, r1, #16
 8006c80:	fa1c fc81 	uxtah	ip, ip, r1
 8006c84:	4471      	add	r1, lr
 8006c86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c8a:	b289      	uxth	r1, r1
 8006c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c90:	f846 1b04 	str.w	r1, [r6], #4
 8006c94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c98:	e7dd      	b.n	8006c56 <__mdiff+0xd6>
 8006c9a:	3f01      	subs	r7, #1
 8006c9c:	e7e7      	b.n	8006c6e <__mdiff+0xee>
 8006c9e:	bf00      	nop
 8006ca0:	08008ef9 	.word	0x08008ef9
 8006ca4:	08008f0a 	.word	0x08008f0a

08006ca8 <__ulp>:
 8006ca8:	b082      	sub	sp, #8
 8006caa:	ed8d 0b00 	vstr	d0, [sp]
 8006cae:	9a01      	ldr	r2, [sp, #4]
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <__ulp+0x48>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc08      	bgt.n	8006cce <__ulp+0x26>
 8006cbc:	425b      	negs	r3, r3
 8006cbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006cc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006cc6:	da04      	bge.n	8006cd2 <__ulp+0x2a>
 8006cc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006ccc:	4113      	asrs	r3, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	e008      	b.n	8006ce4 <__ulp+0x3c>
 8006cd2:	f1a2 0314 	sub.w	r3, r2, #20
 8006cd6:	2b1e      	cmp	r3, #30
 8006cd8:	bfda      	itte	le
 8006cda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006cde:	40da      	lsrle	r2, r3
 8006ce0:	2201      	movgt	r2, #1
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	ec41 0b10 	vmov	d0, r0, r1
 8006cec:	b002      	add	sp, #8
 8006cee:	4770      	bx	lr
 8006cf0:	7ff00000 	.word	0x7ff00000

08006cf4 <__b2d>:
 8006cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf8:	6906      	ldr	r6, [r0, #16]
 8006cfa:	f100 0814 	add.w	r8, r0, #20
 8006cfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006d02:	1f37      	subs	r7, r6, #4
 8006d04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7ff fd4b 	bl	80067a4 <__hi0bits>
 8006d0e:	f1c0 0320 	rsb	r3, r0, #32
 8006d12:	280a      	cmp	r0, #10
 8006d14:	600b      	str	r3, [r1, #0]
 8006d16:	491b      	ldr	r1, [pc, #108]	@ (8006d84 <__b2d+0x90>)
 8006d18:	dc15      	bgt.n	8006d46 <__b2d+0x52>
 8006d1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006d1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006d22:	45b8      	cmp	r8, r7
 8006d24:	ea43 0501 	orr.w	r5, r3, r1
 8006d28:	bf34      	ite	cc
 8006d2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006d2e:	2300      	movcs	r3, #0
 8006d30:	3015      	adds	r0, #21
 8006d32:	fa02 f000 	lsl.w	r0, r2, r0
 8006d36:	fa23 f30c 	lsr.w	r3, r3, ip
 8006d3a:	4303      	orrs	r3, r0
 8006d3c:	461c      	mov	r4, r3
 8006d3e:	ec45 4b10 	vmov	d0, r4, r5
 8006d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d46:	45b8      	cmp	r8, r7
 8006d48:	bf3a      	itte	cc
 8006d4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006d4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006d52:	2300      	movcs	r3, #0
 8006d54:	380b      	subs	r0, #11
 8006d56:	d012      	beq.n	8006d7e <__b2d+0x8a>
 8006d58:	f1c0 0120 	rsb	r1, r0, #32
 8006d5c:	fa23 f401 	lsr.w	r4, r3, r1
 8006d60:	4082      	lsls	r2, r0
 8006d62:	4322      	orrs	r2, r4
 8006d64:	4547      	cmp	r7, r8
 8006d66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006d6a:	bf8c      	ite	hi
 8006d6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006d70:	2200      	movls	r2, #0
 8006d72:	4083      	lsls	r3, r0
 8006d74:	40ca      	lsrs	r2, r1
 8006d76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	e7de      	b.n	8006d3c <__b2d+0x48>
 8006d7e:	ea42 0501 	orr.w	r5, r2, r1
 8006d82:	e7db      	b.n	8006d3c <__b2d+0x48>
 8006d84:	3ff00000 	.word	0x3ff00000

08006d88 <__d2b>:
 8006d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d8c:	460f      	mov	r7, r1
 8006d8e:	2101      	movs	r1, #1
 8006d90:	ec59 8b10 	vmov	r8, r9, d0
 8006d94:	4616      	mov	r6, r2
 8006d96:	f7ff fc13 	bl	80065c0 <_Balloc>
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	b930      	cbnz	r0, 8006dac <__d2b+0x24>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	4b23      	ldr	r3, [pc, #140]	@ (8006e30 <__d2b+0xa8>)
 8006da2:	4824      	ldr	r0, [pc, #144]	@ (8006e34 <__d2b+0xac>)
 8006da4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006da8:	f001 f996 	bl	80080d8 <__assert_func>
 8006dac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006db4:	b10d      	cbz	r5, 8006dba <__d2b+0x32>
 8006db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	f1b8 0300 	subs.w	r3, r8, #0
 8006dc0:	d023      	beq.n	8006e0a <__d2b+0x82>
 8006dc2:	4668      	mov	r0, sp
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	f7ff fd0c 	bl	80067e2 <__lo0bits>
 8006dca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006dce:	b1d0      	cbz	r0, 8006e06 <__d2b+0x7e>
 8006dd0:	f1c0 0320 	rsb	r3, r0, #32
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	40c2      	lsrs	r2, r0
 8006ddc:	6163      	str	r3, [r4, #20]
 8006dde:	9201      	str	r2, [sp, #4]
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	61a3      	str	r3, [r4, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf0c      	ite	eq
 8006de8:	2201      	moveq	r2, #1
 8006dea:	2202      	movne	r2, #2
 8006dec:	6122      	str	r2, [r4, #16]
 8006dee:	b1a5      	cbz	r5, 8006e1a <__d2b+0x92>
 8006df0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006df4:	4405      	add	r5, r0
 8006df6:	603d      	str	r5, [r7, #0]
 8006df8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006dfc:	6030      	str	r0, [r6, #0]
 8006dfe:	4620      	mov	r0, r4
 8006e00:	b003      	add	sp, #12
 8006e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e06:	6161      	str	r1, [r4, #20]
 8006e08:	e7ea      	b.n	8006de0 <__d2b+0x58>
 8006e0a:	a801      	add	r0, sp, #4
 8006e0c:	f7ff fce9 	bl	80067e2 <__lo0bits>
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	6163      	str	r3, [r4, #20]
 8006e14:	3020      	adds	r0, #32
 8006e16:	2201      	movs	r2, #1
 8006e18:	e7e8      	b.n	8006dec <__d2b+0x64>
 8006e1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e22:	6038      	str	r0, [r7, #0]
 8006e24:	6918      	ldr	r0, [r3, #16]
 8006e26:	f7ff fcbd 	bl	80067a4 <__hi0bits>
 8006e2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e2e:	e7e5      	b.n	8006dfc <__d2b+0x74>
 8006e30:	08008ef9 	.word	0x08008ef9
 8006e34:	08008f0a 	.word	0x08008f0a

08006e38 <__ratio>:
 8006e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	e9cd 1000 	strd	r1, r0, [sp]
 8006e42:	a902      	add	r1, sp, #8
 8006e44:	f7ff ff56 	bl	8006cf4 <__b2d>
 8006e48:	9800      	ldr	r0, [sp, #0]
 8006e4a:	a903      	add	r1, sp, #12
 8006e4c:	ec55 4b10 	vmov	r4, r5, d0
 8006e50:	f7ff ff50 	bl	8006cf4 <__b2d>
 8006e54:	9b01      	ldr	r3, [sp, #4]
 8006e56:	6919      	ldr	r1, [r3, #16]
 8006e58:	9b00      	ldr	r3, [sp, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	1ac9      	subs	r1, r1, r3
 8006e5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	ec5b ab10 	vmov	sl, fp, d0
 8006e68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bfce      	itee	gt
 8006e70:	462a      	movgt	r2, r5
 8006e72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e76:	465a      	movle	r2, fp
 8006e78:	462f      	mov	r7, r5
 8006e7a:	46d9      	mov	r9, fp
 8006e7c:	bfcc      	ite	gt
 8006e7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006e86:	464b      	mov	r3, r9
 8006e88:	4652      	mov	r2, sl
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	f7f9 fcdd 	bl	800084c <__aeabi_ddiv>
 8006e92:	ec41 0b10 	vmov	d0, r0, r1
 8006e96:	b005      	add	sp, #20
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e9c <__copybits>:
 8006e9c:	3901      	subs	r1, #1
 8006e9e:	b570      	push	{r4, r5, r6, lr}
 8006ea0:	1149      	asrs	r1, r1, #5
 8006ea2:	6914      	ldr	r4, [r2, #16]
 8006ea4:	3101      	adds	r1, #1
 8006ea6:	f102 0314 	add.w	r3, r2, #20
 8006eaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006eae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006eb2:	1f05      	subs	r5, r0, #4
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d30c      	bcc.n	8006ed2 <__copybits+0x36>
 8006eb8:	1aa3      	subs	r3, r4, r2
 8006eba:	3b11      	subs	r3, #17
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	3211      	adds	r2, #17
 8006ec2:	42a2      	cmp	r2, r4
 8006ec4:	bf88      	it	hi
 8006ec6:	2300      	movhi	r3, #0
 8006ec8:	4418      	add	r0, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4288      	cmp	r0, r1
 8006ece:	d305      	bcc.n	8006edc <__copybits+0x40>
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
 8006ed2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ed6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006eda:	e7eb      	b.n	8006eb4 <__copybits+0x18>
 8006edc:	f840 3b04 	str.w	r3, [r0], #4
 8006ee0:	e7f4      	b.n	8006ecc <__copybits+0x30>

08006ee2 <__any_on>:
 8006ee2:	f100 0214 	add.w	r2, r0, #20
 8006ee6:	6900      	ldr	r0, [r0, #16]
 8006ee8:	114b      	asrs	r3, r1, #5
 8006eea:	4298      	cmp	r0, r3
 8006eec:	b510      	push	{r4, lr}
 8006eee:	db11      	blt.n	8006f14 <__any_on+0x32>
 8006ef0:	dd0a      	ble.n	8006f08 <__any_on+0x26>
 8006ef2:	f011 011f 	ands.w	r1, r1, #31
 8006ef6:	d007      	beq.n	8006f08 <__any_on+0x26>
 8006ef8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006efc:	fa24 f001 	lsr.w	r0, r4, r1
 8006f00:	fa00 f101 	lsl.w	r1, r0, r1
 8006f04:	428c      	cmp	r4, r1
 8006f06:	d10b      	bne.n	8006f20 <__any_on+0x3e>
 8006f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d803      	bhi.n	8006f18 <__any_on+0x36>
 8006f10:	2000      	movs	r0, #0
 8006f12:	bd10      	pop	{r4, pc}
 8006f14:	4603      	mov	r3, r0
 8006f16:	e7f7      	b.n	8006f08 <__any_on+0x26>
 8006f18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	d0f5      	beq.n	8006f0c <__any_on+0x2a>
 8006f20:	2001      	movs	r0, #1
 8006f22:	e7f6      	b.n	8006f12 <__any_on+0x30>

08006f24 <sulp>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	4604      	mov	r4, r0
 8006f28:	460d      	mov	r5, r1
 8006f2a:	ec45 4b10 	vmov	d0, r4, r5
 8006f2e:	4616      	mov	r6, r2
 8006f30:	f7ff feba 	bl	8006ca8 <__ulp>
 8006f34:	ec51 0b10 	vmov	r0, r1, d0
 8006f38:	b17e      	cbz	r6, 8006f5a <sulp+0x36>
 8006f3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006f3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	dd09      	ble.n	8006f5a <sulp+0x36>
 8006f46:	051b      	lsls	r3, r3, #20
 8006f48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006f52:	4622      	mov	r2, r4
 8006f54:	462b      	mov	r3, r5
 8006f56:	f7f9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8006f5a:	ec41 0b10 	vmov	d0, r0, r1
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}

08006f60 <_strtod_l>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	b09f      	sub	sp, #124	@ 0x7c
 8006f66:	460c      	mov	r4, r1
 8006f68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006f6e:	9005      	str	r0, [sp, #20]
 8006f70:	f04f 0a00 	mov.w	sl, #0
 8006f74:	f04f 0b00 	mov.w	fp, #0
 8006f78:	460a      	mov	r2, r1
 8006f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f7c:	7811      	ldrb	r1, [r2, #0]
 8006f7e:	292b      	cmp	r1, #43	@ 0x2b
 8006f80:	d04a      	beq.n	8007018 <_strtod_l+0xb8>
 8006f82:	d838      	bhi.n	8006ff6 <_strtod_l+0x96>
 8006f84:	290d      	cmp	r1, #13
 8006f86:	d832      	bhi.n	8006fee <_strtod_l+0x8e>
 8006f88:	2908      	cmp	r1, #8
 8006f8a:	d832      	bhi.n	8006ff2 <_strtod_l+0x92>
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	d03b      	beq.n	8007008 <_strtod_l+0xa8>
 8006f90:	2200      	movs	r2, #0
 8006f92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006f94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006f96:	782a      	ldrb	r2, [r5, #0]
 8006f98:	2a30      	cmp	r2, #48	@ 0x30
 8006f9a:	f040 80b3 	bne.w	8007104 <_strtod_l+0x1a4>
 8006f9e:	786a      	ldrb	r2, [r5, #1]
 8006fa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006fa4:	2a58      	cmp	r2, #88	@ 0x58
 8006fa6:	d16e      	bne.n	8007086 <_strtod_l+0x126>
 8006fa8:	9302      	str	r3, [sp, #8]
 8006faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	ab1a      	add	r3, sp, #104	@ 0x68
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	4a8e      	ldr	r2, [pc, #568]	@ (80071ec <_strtod_l+0x28c>)
 8006fb4:	9805      	ldr	r0, [sp, #20]
 8006fb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006fb8:	a919      	add	r1, sp, #100	@ 0x64
 8006fba:	f001 f927 	bl	800820c <__gethex>
 8006fbe:	f010 060f 	ands.w	r6, r0, #15
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	d005      	beq.n	8006fd2 <_strtod_l+0x72>
 8006fc6:	2e06      	cmp	r6, #6
 8006fc8:	d128      	bne.n	800701c <_strtod_l+0xbc>
 8006fca:	3501      	adds	r5, #1
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9519      	str	r5, [sp, #100]	@ 0x64
 8006fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 858e 	bne.w	8007af6 <_strtod_l+0xb96>
 8006fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fdc:	b1cb      	cbz	r3, 8007012 <_strtod_l+0xb2>
 8006fde:	4652      	mov	r2, sl
 8006fe0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006fe4:	ec43 2b10 	vmov	d0, r2, r3
 8006fe8:	b01f      	add	sp, #124	@ 0x7c
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	2920      	cmp	r1, #32
 8006ff0:	d1ce      	bne.n	8006f90 <_strtod_l+0x30>
 8006ff2:	3201      	adds	r2, #1
 8006ff4:	e7c1      	b.n	8006f7a <_strtod_l+0x1a>
 8006ff6:	292d      	cmp	r1, #45	@ 0x2d
 8006ff8:	d1ca      	bne.n	8006f90 <_strtod_l+0x30>
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ffe:	1c51      	adds	r1, r2, #1
 8007000:	9119      	str	r1, [sp, #100]	@ 0x64
 8007002:	7852      	ldrb	r2, [r2, #1]
 8007004:	2a00      	cmp	r2, #0
 8007006:	d1c5      	bne.n	8006f94 <_strtod_l+0x34>
 8007008:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800700a:	9419      	str	r4, [sp, #100]	@ 0x64
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 8570 	bne.w	8007af2 <_strtod_l+0xb92>
 8007012:	4652      	mov	r2, sl
 8007014:	465b      	mov	r3, fp
 8007016:	e7e5      	b.n	8006fe4 <_strtod_l+0x84>
 8007018:	2100      	movs	r1, #0
 800701a:	e7ef      	b.n	8006ffc <_strtod_l+0x9c>
 800701c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800701e:	b13a      	cbz	r2, 8007030 <_strtod_l+0xd0>
 8007020:	2135      	movs	r1, #53	@ 0x35
 8007022:	a81c      	add	r0, sp, #112	@ 0x70
 8007024:	f7ff ff3a 	bl	8006e9c <__copybits>
 8007028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800702a:	9805      	ldr	r0, [sp, #20]
 800702c:	f7ff fb08 	bl	8006640 <_Bfree>
 8007030:	3e01      	subs	r6, #1
 8007032:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007034:	2e04      	cmp	r6, #4
 8007036:	d806      	bhi.n	8007046 <_strtod_l+0xe6>
 8007038:	e8df f006 	tbb	[pc, r6]
 800703c:	201d0314 	.word	0x201d0314
 8007040:	14          	.byte	0x14
 8007041:	00          	.byte	0x00
 8007042:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007046:	05e1      	lsls	r1, r4, #23
 8007048:	bf48      	it	mi
 800704a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800704e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007052:	0d1b      	lsrs	r3, r3, #20
 8007054:	051b      	lsls	r3, r3, #20
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1bb      	bne.n	8006fd2 <_strtod_l+0x72>
 800705a:	f7fe fb2f 	bl	80056bc <__errno>
 800705e:	2322      	movs	r3, #34	@ 0x22
 8007060:	6003      	str	r3, [r0, #0]
 8007062:	e7b6      	b.n	8006fd2 <_strtod_l+0x72>
 8007064:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007068:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800706c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007070:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007074:	e7e7      	b.n	8007046 <_strtod_l+0xe6>
 8007076:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80071f4 <_strtod_l+0x294>
 800707a:	e7e4      	b.n	8007046 <_strtod_l+0xe6>
 800707c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007080:	f04f 3aff 	mov.w	sl, #4294967295
 8007084:	e7df      	b.n	8007046 <_strtod_l+0xe6>
 8007086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	9219      	str	r2, [sp, #100]	@ 0x64
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b30      	cmp	r3, #48	@ 0x30
 8007090:	d0f9      	beq.n	8007086 <_strtod_l+0x126>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d09d      	beq.n	8006fd2 <_strtod_l+0x72>
 8007096:	2301      	movs	r3, #1
 8007098:	9309      	str	r3, [sp, #36]	@ 0x24
 800709a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800709c:	930c      	str	r3, [sp, #48]	@ 0x30
 800709e:	2300      	movs	r3, #0
 80070a0:	9308      	str	r3, [sp, #32]
 80070a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070a4:	461f      	mov	r7, r3
 80070a6:	220a      	movs	r2, #10
 80070a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80070aa:	7805      	ldrb	r5, [r0, #0]
 80070ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80070b0:	b2d9      	uxtb	r1, r3
 80070b2:	2909      	cmp	r1, #9
 80070b4:	d928      	bls.n	8007108 <_strtod_l+0x1a8>
 80070b6:	494e      	ldr	r1, [pc, #312]	@ (80071f0 <_strtod_l+0x290>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	f000 ffd5 	bl	8008068 <strncmp>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d032      	beq.n	8007128 <_strtod_l+0x1c8>
 80070c2:	2000      	movs	r0, #0
 80070c4:	462a      	mov	r2, r5
 80070c6:	4681      	mov	r9, r0
 80070c8:	463d      	mov	r5, r7
 80070ca:	4603      	mov	r3, r0
 80070cc:	2a65      	cmp	r2, #101	@ 0x65
 80070ce:	d001      	beq.n	80070d4 <_strtod_l+0x174>
 80070d0:	2a45      	cmp	r2, #69	@ 0x45
 80070d2:	d114      	bne.n	80070fe <_strtod_l+0x19e>
 80070d4:	b91d      	cbnz	r5, 80070de <_strtod_l+0x17e>
 80070d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070d8:	4302      	orrs	r2, r0
 80070da:	d095      	beq.n	8007008 <_strtod_l+0xa8>
 80070dc:	2500      	movs	r5, #0
 80070de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80070e0:	1c62      	adds	r2, r4, #1
 80070e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80070e4:	7862      	ldrb	r2, [r4, #1]
 80070e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80070e8:	d077      	beq.n	80071da <_strtod_l+0x27a>
 80070ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80070ec:	d07b      	beq.n	80071e6 <_strtod_l+0x286>
 80070ee:	f04f 0c00 	mov.w	ip, #0
 80070f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80070f6:	2909      	cmp	r1, #9
 80070f8:	f240 8082 	bls.w	8007200 <_strtod_l+0x2a0>
 80070fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80070fe:	f04f 0800 	mov.w	r8, #0
 8007102:	e0a2      	b.n	800724a <_strtod_l+0x2ea>
 8007104:	2300      	movs	r3, #0
 8007106:	e7c7      	b.n	8007098 <_strtod_l+0x138>
 8007108:	2f08      	cmp	r7, #8
 800710a:	bfd5      	itete	le
 800710c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800710e:	9908      	ldrgt	r1, [sp, #32]
 8007110:	fb02 3301 	mlale	r3, r2, r1, r3
 8007114:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007118:	f100 0001 	add.w	r0, r0, #1
 800711c:	bfd4      	ite	le
 800711e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007120:	9308      	strgt	r3, [sp, #32]
 8007122:	3701      	adds	r7, #1
 8007124:	9019      	str	r0, [sp, #100]	@ 0x64
 8007126:	e7bf      	b.n	80070a8 <_strtod_l+0x148>
 8007128:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	9219      	str	r2, [sp, #100]	@ 0x64
 800712e:	785a      	ldrb	r2, [r3, #1]
 8007130:	b37f      	cbz	r7, 8007192 <_strtod_l+0x232>
 8007132:	4681      	mov	r9, r0
 8007134:	463d      	mov	r5, r7
 8007136:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800713a:	2b09      	cmp	r3, #9
 800713c:	d912      	bls.n	8007164 <_strtod_l+0x204>
 800713e:	2301      	movs	r3, #1
 8007140:	e7c4      	b.n	80070cc <_strtod_l+0x16c>
 8007142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	9219      	str	r2, [sp, #100]	@ 0x64
 8007148:	785a      	ldrb	r2, [r3, #1]
 800714a:	3001      	adds	r0, #1
 800714c:	2a30      	cmp	r2, #48	@ 0x30
 800714e:	d0f8      	beq.n	8007142 <_strtod_l+0x1e2>
 8007150:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007154:	2b08      	cmp	r3, #8
 8007156:	f200 84d3 	bhi.w	8007b00 <_strtod_l+0xba0>
 800715a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800715c:	930c      	str	r3, [sp, #48]	@ 0x30
 800715e:	4681      	mov	r9, r0
 8007160:	2000      	movs	r0, #0
 8007162:	4605      	mov	r5, r0
 8007164:	3a30      	subs	r2, #48	@ 0x30
 8007166:	f100 0301 	add.w	r3, r0, #1
 800716a:	d02a      	beq.n	80071c2 <_strtod_l+0x262>
 800716c:	4499      	add	r9, r3
 800716e:	eb00 0c05 	add.w	ip, r0, r5
 8007172:	462b      	mov	r3, r5
 8007174:	210a      	movs	r1, #10
 8007176:	4563      	cmp	r3, ip
 8007178:	d10d      	bne.n	8007196 <_strtod_l+0x236>
 800717a:	1c69      	adds	r1, r5, #1
 800717c:	4401      	add	r1, r0
 800717e:	4428      	add	r0, r5
 8007180:	2808      	cmp	r0, #8
 8007182:	dc16      	bgt.n	80071b2 <_strtod_l+0x252>
 8007184:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007186:	230a      	movs	r3, #10
 8007188:	fb03 2300 	mla	r3, r3, r0, r2
 800718c:	930a      	str	r3, [sp, #40]	@ 0x28
 800718e:	2300      	movs	r3, #0
 8007190:	e018      	b.n	80071c4 <_strtod_l+0x264>
 8007192:	4638      	mov	r0, r7
 8007194:	e7da      	b.n	800714c <_strtod_l+0x1ec>
 8007196:	2b08      	cmp	r3, #8
 8007198:	f103 0301 	add.w	r3, r3, #1
 800719c:	dc03      	bgt.n	80071a6 <_strtod_l+0x246>
 800719e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80071a0:	434e      	muls	r6, r1
 80071a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80071a4:	e7e7      	b.n	8007176 <_strtod_l+0x216>
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	bfde      	ittt	le
 80071aa:	9e08      	ldrle	r6, [sp, #32]
 80071ac:	434e      	mulle	r6, r1
 80071ae:	9608      	strle	r6, [sp, #32]
 80071b0:	e7e1      	b.n	8007176 <_strtod_l+0x216>
 80071b2:	280f      	cmp	r0, #15
 80071b4:	dceb      	bgt.n	800718e <_strtod_l+0x22e>
 80071b6:	9808      	ldr	r0, [sp, #32]
 80071b8:	230a      	movs	r3, #10
 80071ba:	fb03 2300 	mla	r3, r3, r0, r2
 80071be:	9308      	str	r3, [sp, #32]
 80071c0:	e7e5      	b.n	800718e <_strtod_l+0x22e>
 80071c2:	4629      	mov	r1, r5
 80071c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071c6:	1c50      	adds	r0, r2, #1
 80071c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80071ca:	7852      	ldrb	r2, [r2, #1]
 80071cc:	4618      	mov	r0, r3
 80071ce:	460d      	mov	r5, r1
 80071d0:	e7b1      	b.n	8007136 <_strtod_l+0x1d6>
 80071d2:	f04f 0900 	mov.w	r9, #0
 80071d6:	2301      	movs	r3, #1
 80071d8:	e77d      	b.n	80070d6 <_strtod_l+0x176>
 80071da:	f04f 0c00 	mov.w	ip, #0
 80071de:	1ca2      	adds	r2, r4, #2
 80071e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80071e2:	78a2      	ldrb	r2, [r4, #2]
 80071e4:	e785      	b.n	80070f2 <_strtod_l+0x192>
 80071e6:	f04f 0c01 	mov.w	ip, #1
 80071ea:	e7f8      	b.n	80071de <_strtod_l+0x27e>
 80071ec:	08009078 	.word	0x08009078
 80071f0:	08009060 	.word	0x08009060
 80071f4:	7ff00000 	.word	0x7ff00000
 80071f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071fa:	1c51      	adds	r1, r2, #1
 80071fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80071fe:	7852      	ldrb	r2, [r2, #1]
 8007200:	2a30      	cmp	r2, #48	@ 0x30
 8007202:	d0f9      	beq.n	80071f8 <_strtod_l+0x298>
 8007204:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007208:	2908      	cmp	r1, #8
 800720a:	f63f af78 	bhi.w	80070fe <_strtod_l+0x19e>
 800720e:	3a30      	subs	r2, #48	@ 0x30
 8007210:	920e      	str	r2, [sp, #56]	@ 0x38
 8007212:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007214:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007216:	f04f 080a 	mov.w	r8, #10
 800721a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800721c:	1c56      	adds	r6, r2, #1
 800721e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007220:	7852      	ldrb	r2, [r2, #1]
 8007222:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007226:	f1be 0f09 	cmp.w	lr, #9
 800722a:	d939      	bls.n	80072a0 <_strtod_l+0x340>
 800722c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800722e:	1a76      	subs	r6, r6, r1
 8007230:	2e08      	cmp	r6, #8
 8007232:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007236:	dc03      	bgt.n	8007240 <_strtod_l+0x2e0>
 8007238:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800723a:	4588      	cmp	r8, r1
 800723c:	bfa8      	it	ge
 800723e:	4688      	movge	r8, r1
 8007240:	f1bc 0f00 	cmp.w	ip, #0
 8007244:	d001      	beq.n	800724a <_strtod_l+0x2ea>
 8007246:	f1c8 0800 	rsb	r8, r8, #0
 800724a:	2d00      	cmp	r5, #0
 800724c:	d14e      	bne.n	80072ec <_strtod_l+0x38c>
 800724e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007250:	4308      	orrs	r0, r1
 8007252:	f47f aebe 	bne.w	8006fd2 <_strtod_l+0x72>
 8007256:	2b00      	cmp	r3, #0
 8007258:	f47f aed6 	bne.w	8007008 <_strtod_l+0xa8>
 800725c:	2a69      	cmp	r2, #105	@ 0x69
 800725e:	d028      	beq.n	80072b2 <_strtod_l+0x352>
 8007260:	dc25      	bgt.n	80072ae <_strtod_l+0x34e>
 8007262:	2a49      	cmp	r2, #73	@ 0x49
 8007264:	d025      	beq.n	80072b2 <_strtod_l+0x352>
 8007266:	2a4e      	cmp	r2, #78	@ 0x4e
 8007268:	f47f aece 	bne.w	8007008 <_strtod_l+0xa8>
 800726c:	499b      	ldr	r1, [pc, #620]	@ (80074dc <_strtod_l+0x57c>)
 800726e:	a819      	add	r0, sp, #100	@ 0x64
 8007270:	f001 f9ee 	bl	8008650 <__match>
 8007274:	2800      	cmp	r0, #0
 8007276:	f43f aec7 	beq.w	8007008 <_strtod_l+0xa8>
 800727a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b28      	cmp	r3, #40	@ 0x28
 8007280:	d12e      	bne.n	80072e0 <_strtod_l+0x380>
 8007282:	4997      	ldr	r1, [pc, #604]	@ (80074e0 <_strtod_l+0x580>)
 8007284:	aa1c      	add	r2, sp, #112	@ 0x70
 8007286:	a819      	add	r0, sp, #100	@ 0x64
 8007288:	f001 f9f6 	bl	8008678 <__hexnan>
 800728c:	2805      	cmp	r0, #5
 800728e:	d127      	bne.n	80072e0 <_strtod_l+0x380>
 8007290:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007292:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007296:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800729a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800729e:	e698      	b.n	8006fd2 <_strtod_l+0x72>
 80072a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80072a2:	fb08 2101 	mla	r1, r8, r1, r2
 80072a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80072aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80072ac:	e7b5      	b.n	800721a <_strtod_l+0x2ba>
 80072ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80072b0:	e7da      	b.n	8007268 <_strtod_l+0x308>
 80072b2:	498c      	ldr	r1, [pc, #560]	@ (80074e4 <_strtod_l+0x584>)
 80072b4:	a819      	add	r0, sp, #100	@ 0x64
 80072b6:	f001 f9cb 	bl	8008650 <__match>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f43f aea4 	beq.w	8007008 <_strtod_l+0xa8>
 80072c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072c2:	4989      	ldr	r1, [pc, #548]	@ (80074e8 <_strtod_l+0x588>)
 80072c4:	3b01      	subs	r3, #1
 80072c6:	a819      	add	r0, sp, #100	@ 0x64
 80072c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80072ca:	f001 f9c1 	bl	8008650 <__match>
 80072ce:	b910      	cbnz	r0, 80072d6 <_strtod_l+0x376>
 80072d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072d2:	3301      	adds	r3, #1
 80072d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80072d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80074f8 <_strtod_l+0x598>
 80072da:	f04f 0a00 	mov.w	sl, #0
 80072de:	e678      	b.n	8006fd2 <_strtod_l+0x72>
 80072e0:	4882      	ldr	r0, [pc, #520]	@ (80074ec <_strtod_l+0x58c>)
 80072e2:	f000 fef1 	bl	80080c8 <nan>
 80072e6:	ec5b ab10 	vmov	sl, fp, d0
 80072ea:	e672      	b.n	8006fd2 <_strtod_l+0x72>
 80072ec:	eba8 0309 	sub.w	r3, r8, r9
 80072f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	bf08      	it	eq
 80072f8:	462f      	moveq	r7, r5
 80072fa:	2d10      	cmp	r5, #16
 80072fc:	462c      	mov	r4, r5
 80072fe:	bfa8      	it	ge
 8007300:	2410      	movge	r4, #16
 8007302:	f7f9 f8ff 	bl	8000504 <__aeabi_ui2d>
 8007306:	2d09      	cmp	r5, #9
 8007308:	4682      	mov	sl, r0
 800730a:	468b      	mov	fp, r1
 800730c:	dc13      	bgt.n	8007336 <_strtod_l+0x3d6>
 800730e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	f43f ae5e 	beq.w	8006fd2 <_strtod_l+0x72>
 8007316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007318:	dd78      	ble.n	800740c <_strtod_l+0x4ac>
 800731a:	2b16      	cmp	r3, #22
 800731c:	dc5f      	bgt.n	80073de <_strtod_l+0x47e>
 800731e:	4974      	ldr	r1, [pc, #464]	@ (80074f0 <_strtod_l+0x590>)
 8007320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007328:	4652      	mov	r2, sl
 800732a:	465b      	mov	r3, fp
 800732c:	f7f9 f964 	bl	80005f8 <__aeabi_dmul>
 8007330:	4682      	mov	sl, r0
 8007332:	468b      	mov	fp, r1
 8007334:	e64d      	b.n	8006fd2 <_strtod_l+0x72>
 8007336:	4b6e      	ldr	r3, [pc, #440]	@ (80074f0 <_strtod_l+0x590>)
 8007338:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800733c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007340:	f7f9 f95a 	bl	80005f8 <__aeabi_dmul>
 8007344:	4682      	mov	sl, r0
 8007346:	9808      	ldr	r0, [sp, #32]
 8007348:	468b      	mov	fp, r1
 800734a:	f7f9 f8db 	bl	8000504 <__aeabi_ui2d>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4650      	mov	r0, sl
 8007354:	4659      	mov	r1, fp
 8007356:	f7f8 ff99 	bl	800028c <__adddf3>
 800735a:	2d0f      	cmp	r5, #15
 800735c:	4682      	mov	sl, r0
 800735e:	468b      	mov	fp, r1
 8007360:	ddd5      	ble.n	800730e <_strtod_l+0x3ae>
 8007362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007364:	1b2c      	subs	r4, r5, r4
 8007366:	441c      	add	r4, r3
 8007368:	2c00      	cmp	r4, #0
 800736a:	f340 8096 	ble.w	800749a <_strtod_l+0x53a>
 800736e:	f014 030f 	ands.w	r3, r4, #15
 8007372:	d00a      	beq.n	800738a <_strtod_l+0x42a>
 8007374:	495e      	ldr	r1, [pc, #376]	@ (80074f0 <_strtod_l+0x590>)
 8007376:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800737a:	4652      	mov	r2, sl
 800737c:	465b      	mov	r3, fp
 800737e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	4682      	mov	sl, r0
 8007388:	468b      	mov	fp, r1
 800738a:	f034 040f 	bics.w	r4, r4, #15
 800738e:	d073      	beq.n	8007478 <_strtod_l+0x518>
 8007390:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007394:	dd48      	ble.n	8007428 <_strtod_l+0x4c8>
 8007396:	2400      	movs	r4, #0
 8007398:	46a0      	mov	r8, r4
 800739a:	940a      	str	r4, [sp, #40]	@ 0x28
 800739c:	46a1      	mov	r9, r4
 800739e:	9a05      	ldr	r2, [sp, #20]
 80073a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80074f8 <_strtod_l+0x598>
 80073a4:	2322      	movs	r3, #34	@ 0x22
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	f04f 0a00 	mov.w	sl, #0
 80073ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f43f ae0f 	beq.w	8006fd2 <_strtod_l+0x72>
 80073b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073b6:	9805      	ldr	r0, [sp, #20]
 80073b8:	f7ff f942 	bl	8006640 <_Bfree>
 80073bc:	9805      	ldr	r0, [sp, #20]
 80073be:	4649      	mov	r1, r9
 80073c0:	f7ff f93e 	bl	8006640 <_Bfree>
 80073c4:	9805      	ldr	r0, [sp, #20]
 80073c6:	4641      	mov	r1, r8
 80073c8:	f7ff f93a 	bl	8006640 <_Bfree>
 80073cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073ce:	9805      	ldr	r0, [sp, #20]
 80073d0:	f7ff f936 	bl	8006640 <_Bfree>
 80073d4:	9805      	ldr	r0, [sp, #20]
 80073d6:	4621      	mov	r1, r4
 80073d8:	f7ff f932 	bl	8006640 <_Bfree>
 80073dc:	e5f9      	b.n	8006fd2 <_strtod_l+0x72>
 80073de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80073e4:	4293      	cmp	r3, r2
 80073e6:	dbbc      	blt.n	8007362 <_strtod_l+0x402>
 80073e8:	4c41      	ldr	r4, [pc, #260]	@ (80074f0 <_strtod_l+0x590>)
 80073ea:	f1c5 050f 	rsb	r5, r5, #15
 80073ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80073f2:	4652      	mov	r2, sl
 80073f4:	465b      	mov	r3, fp
 80073f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073fa:	f7f9 f8fd 	bl	80005f8 <__aeabi_dmul>
 80073fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007400:	1b5d      	subs	r5, r3, r5
 8007402:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007406:	e9d4 2300 	ldrd	r2, r3, [r4]
 800740a:	e78f      	b.n	800732c <_strtod_l+0x3cc>
 800740c:	3316      	adds	r3, #22
 800740e:	dba8      	blt.n	8007362 <_strtod_l+0x402>
 8007410:	4b37      	ldr	r3, [pc, #220]	@ (80074f0 <_strtod_l+0x590>)
 8007412:	eba9 0808 	sub.w	r8, r9, r8
 8007416:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800741a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800741e:	4650      	mov	r0, sl
 8007420:	4659      	mov	r1, fp
 8007422:	f7f9 fa13 	bl	800084c <__aeabi_ddiv>
 8007426:	e783      	b.n	8007330 <_strtod_l+0x3d0>
 8007428:	4b32      	ldr	r3, [pc, #200]	@ (80074f4 <_strtod_l+0x594>)
 800742a:	9308      	str	r3, [sp, #32]
 800742c:	2300      	movs	r3, #0
 800742e:	1124      	asrs	r4, r4, #4
 8007430:	4650      	mov	r0, sl
 8007432:	4659      	mov	r1, fp
 8007434:	461e      	mov	r6, r3
 8007436:	2c01      	cmp	r4, #1
 8007438:	dc21      	bgt.n	800747e <_strtod_l+0x51e>
 800743a:	b10b      	cbz	r3, 8007440 <_strtod_l+0x4e0>
 800743c:	4682      	mov	sl, r0
 800743e:	468b      	mov	fp, r1
 8007440:	492c      	ldr	r1, [pc, #176]	@ (80074f4 <_strtod_l+0x594>)
 8007442:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007446:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800744a:	4652      	mov	r2, sl
 800744c:	465b      	mov	r3, fp
 800744e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007452:	f7f9 f8d1 	bl	80005f8 <__aeabi_dmul>
 8007456:	4b28      	ldr	r3, [pc, #160]	@ (80074f8 <_strtod_l+0x598>)
 8007458:	460a      	mov	r2, r1
 800745a:	400b      	ands	r3, r1
 800745c:	4927      	ldr	r1, [pc, #156]	@ (80074fc <_strtod_l+0x59c>)
 800745e:	428b      	cmp	r3, r1
 8007460:	4682      	mov	sl, r0
 8007462:	d898      	bhi.n	8007396 <_strtod_l+0x436>
 8007464:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007468:	428b      	cmp	r3, r1
 800746a:	bf86      	itte	hi
 800746c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007500 <_strtod_l+0x5a0>
 8007470:	f04f 3aff 	movhi.w	sl, #4294967295
 8007474:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007478:	2300      	movs	r3, #0
 800747a:	9308      	str	r3, [sp, #32]
 800747c:	e07a      	b.n	8007574 <_strtod_l+0x614>
 800747e:	07e2      	lsls	r2, r4, #31
 8007480:	d505      	bpl.n	800748e <_strtod_l+0x52e>
 8007482:	9b08      	ldr	r3, [sp, #32]
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f7f9 f8b6 	bl	80005f8 <__aeabi_dmul>
 800748c:	2301      	movs	r3, #1
 800748e:	9a08      	ldr	r2, [sp, #32]
 8007490:	3208      	adds	r2, #8
 8007492:	3601      	adds	r6, #1
 8007494:	1064      	asrs	r4, r4, #1
 8007496:	9208      	str	r2, [sp, #32]
 8007498:	e7cd      	b.n	8007436 <_strtod_l+0x4d6>
 800749a:	d0ed      	beq.n	8007478 <_strtod_l+0x518>
 800749c:	4264      	negs	r4, r4
 800749e:	f014 020f 	ands.w	r2, r4, #15
 80074a2:	d00a      	beq.n	80074ba <_strtod_l+0x55a>
 80074a4:	4b12      	ldr	r3, [pc, #72]	@ (80074f0 <_strtod_l+0x590>)
 80074a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074aa:	4650      	mov	r0, sl
 80074ac:	4659      	mov	r1, fp
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f9 f9cb 	bl	800084c <__aeabi_ddiv>
 80074b6:	4682      	mov	sl, r0
 80074b8:	468b      	mov	fp, r1
 80074ba:	1124      	asrs	r4, r4, #4
 80074bc:	d0dc      	beq.n	8007478 <_strtod_l+0x518>
 80074be:	2c1f      	cmp	r4, #31
 80074c0:	dd20      	ble.n	8007504 <_strtod_l+0x5a4>
 80074c2:	2400      	movs	r4, #0
 80074c4:	46a0      	mov	r8, r4
 80074c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80074c8:	46a1      	mov	r9, r4
 80074ca:	9a05      	ldr	r2, [sp, #20]
 80074cc:	2322      	movs	r3, #34	@ 0x22
 80074ce:	f04f 0a00 	mov.w	sl, #0
 80074d2:	f04f 0b00 	mov.w	fp, #0
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e768      	b.n	80073ac <_strtod_l+0x44c>
 80074da:	bf00      	nop
 80074dc:	08008e51 	.word	0x08008e51
 80074e0:	08009064 	.word	0x08009064
 80074e4:	08008e49 	.word	0x08008e49
 80074e8:	08008e80 	.word	0x08008e80
 80074ec:	0800920d 	.word	0x0800920d
 80074f0:	08008f98 	.word	0x08008f98
 80074f4:	08008f70 	.word	0x08008f70
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	7ca00000 	.word	0x7ca00000
 8007500:	7fefffff 	.word	0x7fefffff
 8007504:	f014 0310 	ands.w	r3, r4, #16
 8007508:	bf18      	it	ne
 800750a:	236a      	movne	r3, #106	@ 0x6a
 800750c:	4ea9      	ldr	r6, [pc, #676]	@ (80077b4 <_strtod_l+0x854>)
 800750e:	9308      	str	r3, [sp, #32]
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	2300      	movs	r3, #0
 8007516:	07e2      	lsls	r2, r4, #31
 8007518:	d504      	bpl.n	8007524 <_strtod_l+0x5c4>
 800751a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800751e:	f7f9 f86b 	bl	80005f8 <__aeabi_dmul>
 8007522:	2301      	movs	r3, #1
 8007524:	1064      	asrs	r4, r4, #1
 8007526:	f106 0608 	add.w	r6, r6, #8
 800752a:	d1f4      	bne.n	8007516 <_strtod_l+0x5b6>
 800752c:	b10b      	cbz	r3, 8007532 <_strtod_l+0x5d2>
 800752e:	4682      	mov	sl, r0
 8007530:	468b      	mov	fp, r1
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	b1b3      	cbz	r3, 8007564 <_strtod_l+0x604>
 8007536:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800753a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800753e:	2b00      	cmp	r3, #0
 8007540:	4659      	mov	r1, fp
 8007542:	dd0f      	ble.n	8007564 <_strtod_l+0x604>
 8007544:	2b1f      	cmp	r3, #31
 8007546:	dd55      	ble.n	80075f4 <_strtod_l+0x694>
 8007548:	2b34      	cmp	r3, #52	@ 0x34
 800754a:	bfde      	ittt	le
 800754c:	f04f 33ff 	movle.w	r3, #4294967295
 8007550:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007554:	4093      	lslle	r3, r2
 8007556:	f04f 0a00 	mov.w	sl, #0
 800755a:	bfcc      	ite	gt
 800755c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007560:	ea03 0b01 	andle.w	fp, r3, r1
 8007564:	2200      	movs	r2, #0
 8007566:	2300      	movs	r3, #0
 8007568:	4650      	mov	r0, sl
 800756a:	4659      	mov	r1, fp
 800756c:	f7f9 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007570:	2800      	cmp	r0, #0
 8007572:	d1a6      	bne.n	80074c2 <_strtod_l+0x562>
 8007574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800757a:	9805      	ldr	r0, [sp, #20]
 800757c:	462b      	mov	r3, r5
 800757e:	463a      	mov	r2, r7
 8007580:	f7ff f8c6 	bl	8006710 <__s2b>
 8007584:	900a      	str	r0, [sp, #40]	@ 0x28
 8007586:	2800      	cmp	r0, #0
 8007588:	f43f af05 	beq.w	8007396 <_strtod_l+0x436>
 800758c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800758e:	2a00      	cmp	r2, #0
 8007590:	eba9 0308 	sub.w	r3, r9, r8
 8007594:	bfa8      	it	ge
 8007596:	2300      	movge	r3, #0
 8007598:	9312      	str	r3, [sp, #72]	@ 0x48
 800759a:	2400      	movs	r4, #0
 800759c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80075a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80075a2:	46a0      	mov	r8, r4
 80075a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a6:	9805      	ldr	r0, [sp, #20]
 80075a8:	6859      	ldr	r1, [r3, #4]
 80075aa:	f7ff f809 	bl	80065c0 <_Balloc>
 80075ae:	4681      	mov	r9, r0
 80075b0:	2800      	cmp	r0, #0
 80075b2:	f43f aef4 	beq.w	800739e <_strtod_l+0x43e>
 80075b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	3202      	adds	r2, #2
 80075bc:	f103 010c 	add.w	r1, r3, #12
 80075c0:	0092      	lsls	r2, r2, #2
 80075c2:	300c      	adds	r0, #12
 80075c4:	f000 fd72 	bl	80080ac <memcpy>
 80075c8:	ec4b ab10 	vmov	d0, sl, fp
 80075cc:	9805      	ldr	r0, [sp, #20]
 80075ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80075d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80075d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80075d6:	f7ff fbd7 	bl	8006d88 <__d2b>
 80075da:	901a      	str	r0, [sp, #104]	@ 0x68
 80075dc:	2800      	cmp	r0, #0
 80075de:	f43f aede 	beq.w	800739e <_strtod_l+0x43e>
 80075e2:	9805      	ldr	r0, [sp, #20]
 80075e4:	2101      	movs	r1, #1
 80075e6:	f7ff f929 	bl	800683c <__i2b>
 80075ea:	4680      	mov	r8, r0
 80075ec:	b948      	cbnz	r0, 8007602 <_strtod_l+0x6a2>
 80075ee:	f04f 0800 	mov.w	r8, #0
 80075f2:	e6d4      	b.n	800739e <_strtod_l+0x43e>
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	ea03 0a0a 	and.w	sl, r3, sl
 8007600:	e7b0      	b.n	8007564 <_strtod_l+0x604>
 8007602:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007604:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007606:	2d00      	cmp	r5, #0
 8007608:	bfab      	itete	ge
 800760a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800760c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800760e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007610:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007612:	bfac      	ite	ge
 8007614:	18ef      	addge	r7, r5, r3
 8007616:	1b5e      	sublt	r6, r3, r5
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	1aed      	subs	r5, r5, r3
 800761c:	4415      	add	r5, r2
 800761e:	4b66      	ldr	r3, [pc, #408]	@ (80077b8 <_strtod_l+0x858>)
 8007620:	3d01      	subs	r5, #1
 8007622:	429d      	cmp	r5, r3
 8007624:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007628:	da50      	bge.n	80076cc <_strtod_l+0x76c>
 800762a:	1b5b      	subs	r3, r3, r5
 800762c:	2b1f      	cmp	r3, #31
 800762e:	eba2 0203 	sub.w	r2, r2, r3
 8007632:	f04f 0101 	mov.w	r1, #1
 8007636:	dc3d      	bgt.n	80076b4 <_strtod_l+0x754>
 8007638:	fa01 f303 	lsl.w	r3, r1, r3
 800763c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800763e:	2300      	movs	r3, #0
 8007640:	9310      	str	r3, [sp, #64]	@ 0x40
 8007642:	18bd      	adds	r5, r7, r2
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	42af      	cmp	r7, r5
 8007648:	4416      	add	r6, r2
 800764a:	441e      	add	r6, r3
 800764c:	463b      	mov	r3, r7
 800764e:	bfa8      	it	ge
 8007650:	462b      	movge	r3, r5
 8007652:	42b3      	cmp	r3, r6
 8007654:	bfa8      	it	ge
 8007656:	4633      	movge	r3, r6
 8007658:	2b00      	cmp	r3, #0
 800765a:	bfc2      	ittt	gt
 800765c:	1aed      	subgt	r5, r5, r3
 800765e:	1af6      	subgt	r6, r6, r3
 8007660:	1aff      	subgt	r7, r7, r3
 8007662:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd16      	ble.n	8007696 <_strtod_l+0x736>
 8007668:	4641      	mov	r1, r8
 800766a:	9805      	ldr	r0, [sp, #20]
 800766c:	461a      	mov	r2, r3
 800766e:	f7ff f9a5 	bl	80069bc <__pow5mult>
 8007672:	4680      	mov	r8, r0
 8007674:	2800      	cmp	r0, #0
 8007676:	d0ba      	beq.n	80075ee <_strtod_l+0x68e>
 8007678:	4601      	mov	r1, r0
 800767a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800767c:	9805      	ldr	r0, [sp, #20]
 800767e:	f7ff f8f3 	bl	8006868 <__multiply>
 8007682:	900e      	str	r0, [sp, #56]	@ 0x38
 8007684:	2800      	cmp	r0, #0
 8007686:	f43f ae8a 	beq.w	800739e <_strtod_l+0x43e>
 800768a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800768c:	9805      	ldr	r0, [sp, #20]
 800768e:	f7fe ffd7 	bl	8006640 <_Bfree>
 8007692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007694:	931a      	str	r3, [sp, #104]	@ 0x68
 8007696:	2d00      	cmp	r5, #0
 8007698:	dc1d      	bgt.n	80076d6 <_strtod_l+0x776>
 800769a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	dd23      	ble.n	80076e8 <_strtod_l+0x788>
 80076a0:	4649      	mov	r1, r9
 80076a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80076a4:	9805      	ldr	r0, [sp, #20]
 80076a6:	f7ff f989 	bl	80069bc <__pow5mult>
 80076aa:	4681      	mov	r9, r0
 80076ac:	b9e0      	cbnz	r0, 80076e8 <_strtod_l+0x788>
 80076ae:	f04f 0900 	mov.w	r9, #0
 80076b2:	e674      	b.n	800739e <_strtod_l+0x43e>
 80076b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80076b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80076bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80076c0:	35e2      	adds	r5, #226	@ 0xe2
 80076c2:	fa01 f305 	lsl.w	r3, r1, r5
 80076c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80076c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80076ca:	e7ba      	b.n	8007642 <_strtod_l+0x6e2>
 80076cc:	2300      	movs	r3, #0
 80076ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80076d0:	2301      	movs	r3, #1
 80076d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076d4:	e7b5      	b.n	8007642 <_strtod_l+0x6e2>
 80076d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076d8:	9805      	ldr	r0, [sp, #20]
 80076da:	462a      	mov	r2, r5
 80076dc:	f7ff f9c8 	bl	8006a70 <__lshift>
 80076e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d1d9      	bne.n	800769a <_strtod_l+0x73a>
 80076e6:	e65a      	b.n	800739e <_strtod_l+0x43e>
 80076e8:	2e00      	cmp	r6, #0
 80076ea:	dd07      	ble.n	80076fc <_strtod_l+0x79c>
 80076ec:	4649      	mov	r1, r9
 80076ee:	9805      	ldr	r0, [sp, #20]
 80076f0:	4632      	mov	r2, r6
 80076f2:	f7ff f9bd 	bl	8006a70 <__lshift>
 80076f6:	4681      	mov	r9, r0
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d0d8      	beq.n	80076ae <_strtod_l+0x74e>
 80076fc:	2f00      	cmp	r7, #0
 80076fe:	dd08      	ble.n	8007712 <_strtod_l+0x7b2>
 8007700:	4641      	mov	r1, r8
 8007702:	9805      	ldr	r0, [sp, #20]
 8007704:	463a      	mov	r2, r7
 8007706:	f7ff f9b3 	bl	8006a70 <__lshift>
 800770a:	4680      	mov	r8, r0
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f ae46 	beq.w	800739e <_strtod_l+0x43e>
 8007712:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007714:	9805      	ldr	r0, [sp, #20]
 8007716:	464a      	mov	r2, r9
 8007718:	f7ff fa32 	bl	8006b80 <__mdiff>
 800771c:	4604      	mov	r4, r0
 800771e:	2800      	cmp	r0, #0
 8007720:	f43f ae3d 	beq.w	800739e <_strtod_l+0x43e>
 8007724:	68c3      	ldr	r3, [r0, #12]
 8007726:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007728:	2300      	movs	r3, #0
 800772a:	60c3      	str	r3, [r0, #12]
 800772c:	4641      	mov	r1, r8
 800772e:	f7ff fa0b 	bl	8006b48 <__mcmp>
 8007732:	2800      	cmp	r0, #0
 8007734:	da46      	bge.n	80077c4 <_strtod_l+0x864>
 8007736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007738:	ea53 030a 	orrs.w	r3, r3, sl
 800773c:	d16c      	bne.n	8007818 <_strtod_l+0x8b8>
 800773e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007742:	2b00      	cmp	r3, #0
 8007744:	d168      	bne.n	8007818 <_strtod_l+0x8b8>
 8007746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800774a:	0d1b      	lsrs	r3, r3, #20
 800774c:	051b      	lsls	r3, r3, #20
 800774e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007752:	d961      	bls.n	8007818 <_strtod_l+0x8b8>
 8007754:	6963      	ldr	r3, [r4, #20]
 8007756:	b913      	cbnz	r3, 800775e <_strtod_l+0x7fe>
 8007758:	6923      	ldr	r3, [r4, #16]
 800775a:	2b01      	cmp	r3, #1
 800775c:	dd5c      	ble.n	8007818 <_strtod_l+0x8b8>
 800775e:	4621      	mov	r1, r4
 8007760:	2201      	movs	r2, #1
 8007762:	9805      	ldr	r0, [sp, #20]
 8007764:	f7ff f984 	bl	8006a70 <__lshift>
 8007768:	4641      	mov	r1, r8
 800776a:	4604      	mov	r4, r0
 800776c:	f7ff f9ec 	bl	8006b48 <__mcmp>
 8007770:	2800      	cmp	r0, #0
 8007772:	dd51      	ble.n	8007818 <_strtod_l+0x8b8>
 8007774:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007778:	9a08      	ldr	r2, [sp, #32]
 800777a:	0d1b      	lsrs	r3, r3, #20
 800777c:	051b      	lsls	r3, r3, #20
 800777e:	2a00      	cmp	r2, #0
 8007780:	d06b      	beq.n	800785a <_strtod_l+0x8fa>
 8007782:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007786:	d868      	bhi.n	800785a <_strtod_l+0x8fa>
 8007788:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800778c:	f67f ae9d 	bls.w	80074ca <_strtod_l+0x56a>
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <_strtod_l+0x85c>)
 8007792:	4650      	mov	r0, sl
 8007794:	4659      	mov	r1, fp
 8007796:	2200      	movs	r2, #0
 8007798:	f7f8 ff2e 	bl	80005f8 <__aeabi_dmul>
 800779c:	4b08      	ldr	r3, [pc, #32]	@ (80077c0 <_strtod_l+0x860>)
 800779e:	400b      	ands	r3, r1
 80077a0:	4682      	mov	sl, r0
 80077a2:	468b      	mov	fp, r1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f47f ae05 	bne.w	80073b4 <_strtod_l+0x454>
 80077aa:	9a05      	ldr	r2, [sp, #20]
 80077ac:	2322      	movs	r3, #34	@ 0x22
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	e600      	b.n	80073b4 <_strtod_l+0x454>
 80077b2:	bf00      	nop
 80077b4:	08009090 	.word	0x08009090
 80077b8:	fffffc02 	.word	0xfffffc02
 80077bc:	39500000 	.word	0x39500000
 80077c0:	7ff00000 	.word	0x7ff00000
 80077c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80077c8:	d165      	bne.n	8007896 <_strtod_l+0x936>
 80077ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80077cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077d0:	b35a      	cbz	r2, 800782a <_strtod_l+0x8ca>
 80077d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007a50 <_strtod_l+0xaf0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d12b      	bne.n	8007830 <_strtod_l+0x8d0>
 80077d8:	9b08      	ldr	r3, [sp, #32]
 80077da:	4651      	mov	r1, sl
 80077dc:	b303      	cbz	r3, 8007820 <_strtod_l+0x8c0>
 80077de:	4b9d      	ldr	r3, [pc, #628]	@ (8007a54 <_strtod_l+0xaf4>)
 80077e0:	465a      	mov	r2, fp
 80077e2:	4013      	ands	r3, r2
 80077e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80077e8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ec:	d81b      	bhi.n	8007826 <_strtod_l+0x8c6>
 80077ee:	0d1b      	lsrs	r3, r3, #20
 80077f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	4299      	cmp	r1, r3
 80077fa:	d119      	bne.n	8007830 <_strtod_l+0x8d0>
 80077fc:	4b96      	ldr	r3, [pc, #600]	@ (8007a58 <_strtod_l+0xaf8>)
 80077fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007800:	429a      	cmp	r2, r3
 8007802:	d102      	bne.n	800780a <_strtod_l+0x8aa>
 8007804:	3101      	adds	r1, #1
 8007806:	f43f adca 	beq.w	800739e <_strtod_l+0x43e>
 800780a:	4b92      	ldr	r3, [pc, #584]	@ (8007a54 <_strtod_l+0xaf4>)
 800780c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800780e:	401a      	ands	r2, r3
 8007810:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007814:	f04f 0a00 	mov.w	sl, #0
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1b8      	bne.n	8007790 <_strtod_l+0x830>
 800781e:	e5c9      	b.n	80073b4 <_strtod_l+0x454>
 8007820:	f04f 33ff 	mov.w	r3, #4294967295
 8007824:	e7e8      	b.n	80077f8 <_strtod_l+0x898>
 8007826:	4613      	mov	r3, r2
 8007828:	e7e6      	b.n	80077f8 <_strtod_l+0x898>
 800782a:	ea53 030a 	orrs.w	r3, r3, sl
 800782e:	d0a1      	beq.n	8007774 <_strtod_l+0x814>
 8007830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007832:	b1db      	cbz	r3, 800786c <_strtod_l+0x90c>
 8007834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007836:	4213      	tst	r3, r2
 8007838:	d0ee      	beq.n	8007818 <_strtod_l+0x8b8>
 800783a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783c:	9a08      	ldr	r2, [sp, #32]
 800783e:	4650      	mov	r0, sl
 8007840:	4659      	mov	r1, fp
 8007842:	b1bb      	cbz	r3, 8007874 <_strtod_l+0x914>
 8007844:	f7ff fb6e 	bl	8006f24 <sulp>
 8007848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800784c:	ec53 2b10 	vmov	r2, r3, d0
 8007850:	f7f8 fd1c 	bl	800028c <__adddf3>
 8007854:	4682      	mov	sl, r0
 8007856:	468b      	mov	fp, r1
 8007858:	e7de      	b.n	8007818 <_strtod_l+0x8b8>
 800785a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800785e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007862:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007866:	f04f 3aff 	mov.w	sl, #4294967295
 800786a:	e7d5      	b.n	8007818 <_strtod_l+0x8b8>
 800786c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800786e:	ea13 0f0a 	tst.w	r3, sl
 8007872:	e7e1      	b.n	8007838 <_strtod_l+0x8d8>
 8007874:	f7ff fb56 	bl	8006f24 <sulp>
 8007878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800787c:	ec53 2b10 	vmov	r2, r3, d0
 8007880:	f7f8 fd02 	bl	8000288 <__aeabi_dsub>
 8007884:	2200      	movs	r2, #0
 8007886:	2300      	movs	r3, #0
 8007888:	4682      	mov	sl, r0
 800788a:	468b      	mov	fp, r1
 800788c:	f7f9 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007890:	2800      	cmp	r0, #0
 8007892:	d0c1      	beq.n	8007818 <_strtod_l+0x8b8>
 8007894:	e619      	b.n	80074ca <_strtod_l+0x56a>
 8007896:	4641      	mov	r1, r8
 8007898:	4620      	mov	r0, r4
 800789a:	f7ff facd 	bl	8006e38 <__ratio>
 800789e:	ec57 6b10 	vmov	r6, r7, d0
 80078a2:	2200      	movs	r2, #0
 80078a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f920 	bl	8000af0 <__aeabi_dcmple>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d06f      	beq.n	8007994 <_strtod_l+0xa34>
 80078b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d17a      	bne.n	80079b0 <_strtod_l+0xa50>
 80078ba:	f1ba 0f00 	cmp.w	sl, #0
 80078be:	d158      	bne.n	8007972 <_strtod_l+0xa12>
 80078c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d15a      	bne.n	8007980 <_strtod_l+0xa20>
 80078ca:	4b64      	ldr	r3, [pc, #400]	@ (8007a5c <_strtod_l+0xafc>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	4639      	mov	r1, r7
 80078d2:	f7f9 f903 	bl	8000adc <__aeabi_dcmplt>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d159      	bne.n	800798e <_strtod_l+0xa2e>
 80078da:	4630      	mov	r0, r6
 80078dc:	4639      	mov	r1, r7
 80078de:	4b60      	ldr	r3, [pc, #384]	@ (8007a60 <_strtod_l+0xb00>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	f7f8 fe89 	bl	80005f8 <__aeabi_dmul>
 80078e6:	4606      	mov	r6, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80078ee:	9606      	str	r6, [sp, #24]
 80078f0:	9307      	str	r3, [sp, #28]
 80078f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078f6:	4d57      	ldr	r5, [pc, #348]	@ (8007a54 <_strtod_l+0xaf4>)
 80078f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80078fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078fe:	401d      	ands	r5, r3
 8007900:	4b58      	ldr	r3, [pc, #352]	@ (8007a64 <_strtod_l+0xb04>)
 8007902:	429d      	cmp	r5, r3
 8007904:	f040 80b2 	bne.w	8007a6c <_strtod_l+0xb0c>
 8007908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800790a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800790e:	ec4b ab10 	vmov	d0, sl, fp
 8007912:	f7ff f9c9 	bl	8006ca8 <__ulp>
 8007916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800791a:	ec51 0b10 	vmov	r0, r1, d0
 800791e:	f7f8 fe6b 	bl	80005f8 <__aeabi_dmul>
 8007922:	4652      	mov	r2, sl
 8007924:	465b      	mov	r3, fp
 8007926:	f7f8 fcb1 	bl	800028c <__adddf3>
 800792a:	460b      	mov	r3, r1
 800792c:	4949      	ldr	r1, [pc, #292]	@ (8007a54 <_strtod_l+0xaf4>)
 800792e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a68 <_strtod_l+0xb08>)
 8007930:	4019      	ands	r1, r3
 8007932:	4291      	cmp	r1, r2
 8007934:	4682      	mov	sl, r0
 8007936:	d942      	bls.n	80079be <_strtod_l+0xa5e>
 8007938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800793a:	4b47      	ldr	r3, [pc, #284]	@ (8007a58 <_strtod_l+0xaf8>)
 800793c:	429a      	cmp	r2, r3
 800793e:	d103      	bne.n	8007948 <_strtod_l+0x9e8>
 8007940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007942:	3301      	adds	r3, #1
 8007944:	f43f ad2b 	beq.w	800739e <_strtod_l+0x43e>
 8007948:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007a58 <_strtod_l+0xaf8>
 800794c:	f04f 3aff 	mov.w	sl, #4294967295
 8007950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007952:	9805      	ldr	r0, [sp, #20]
 8007954:	f7fe fe74 	bl	8006640 <_Bfree>
 8007958:	9805      	ldr	r0, [sp, #20]
 800795a:	4649      	mov	r1, r9
 800795c:	f7fe fe70 	bl	8006640 <_Bfree>
 8007960:	9805      	ldr	r0, [sp, #20]
 8007962:	4641      	mov	r1, r8
 8007964:	f7fe fe6c 	bl	8006640 <_Bfree>
 8007968:	9805      	ldr	r0, [sp, #20]
 800796a:	4621      	mov	r1, r4
 800796c:	f7fe fe68 	bl	8006640 <_Bfree>
 8007970:	e618      	b.n	80075a4 <_strtod_l+0x644>
 8007972:	f1ba 0f01 	cmp.w	sl, #1
 8007976:	d103      	bne.n	8007980 <_strtod_l+0xa20>
 8007978:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800797a:	2b00      	cmp	r3, #0
 800797c:	f43f ada5 	beq.w	80074ca <_strtod_l+0x56a>
 8007980:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007a30 <_strtod_l+0xad0>
 8007984:	4f35      	ldr	r7, [pc, #212]	@ (8007a5c <_strtod_l+0xafc>)
 8007986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800798a:	2600      	movs	r6, #0
 800798c:	e7b1      	b.n	80078f2 <_strtod_l+0x992>
 800798e:	4f34      	ldr	r7, [pc, #208]	@ (8007a60 <_strtod_l+0xb00>)
 8007990:	2600      	movs	r6, #0
 8007992:	e7aa      	b.n	80078ea <_strtod_l+0x98a>
 8007994:	4b32      	ldr	r3, [pc, #200]	@ (8007a60 <_strtod_l+0xb00>)
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	2200      	movs	r2, #0
 800799c:	f7f8 fe2c 	bl	80005f8 <__aeabi_dmul>
 80079a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079a2:	4606      	mov	r6, r0
 80079a4:	460f      	mov	r7, r1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d09f      	beq.n	80078ea <_strtod_l+0x98a>
 80079aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80079ae:	e7a0      	b.n	80078f2 <_strtod_l+0x992>
 80079b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007a38 <_strtod_l+0xad8>
 80079b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80079b8:	ec57 6b17 	vmov	r6, r7, d7
 80079bc:	e799      	b.n	80078f2 <_strtod_l+0x992>
 80079be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80079c2:	9b08      	ldr	r3, [sp, #32]
 80079c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1c1      	bne.n	8007950 <_strtod_l+0x9f0>
 80079cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079d0:	0d1b      	lsrs	r3, r3, #20
 80079d2:	051b      	lsls	r3, r3, #20
 80079d4:	429d      	cmp	r5, r3
 80079d6:	d1bb      	bne.n	8007950 <_strtod_l+0x9f0>
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f9 f96c 	bl	8000cb8 <__aeabi_d2lz>
 80079e0:	f7f8 fddc 	bl	800059c <__aeabi_l2d>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f8 fc4c 	bl	8000288 <__aeabi_dsub>
 80079f0:	460b      	mov	r3, r1
 80079f2:	4602      	mov	r2, r0
 80079f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80079f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80079fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079fe:	ea46 060a 	orr.w	r6, r6, sl
 8007a02:	431e      	orrs	r6, r3
 8007a04:	d06f      	beq.n	8007ae6 <_strtod_l+0xb86>
 8007a06:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a40 <_strtod_l+0xae0>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f9 f866 	bl	8000adc <__aeabi_dcmplt>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f47f accf 	bne.w	80073b4 <_strtod_l+0x454>
 8007a16:	a30c      	add	r3, pc, #48	@ (adr r3, 8007a48 <_strtod_l+0xae8>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a20:	f7f9 f87a 	bl	8000b18 <__aeabi_dcmpgt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d093      	beq.n	8007950 <_strtod_l+0x9f0>
 8007a28:	e4c4      	b.n	80073b4 <_strtod_l+0x454>
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w
 8007a30:	00000000 	.word	0x00000000
 8007a34:	bff00000 	.word	0xbff00000
 8007a38:	00000000 	.word	0x00000000
 8007a3c:	3ff00000 	.word	0x3ff00000
 8007a40:	94a03595 	.word	0x94a03595
 8007a44:	3fdfffff 	.word	0x3fdfffff
 8007a48:	35afe535 	.word	0x35afe535
 8007a4c:	3fe00000 	.word	0x3fe00000
 8007a50:	000fffff 	.word	0x000fffff
 8007a54:	7ff00000 	.word	0x7ff00000
 8007a58:	7fefffff 	.word	0x7fefffff
 8007a5c:	3ff00000 	.word	0x3ff00000
 8007a60:	3fe00000 	.word	0x3fe00000
 8007a64:	7fe00000 	.word	0x7fe00000
 8007a68:	7c9fffff 	.word	0x7c9fffff
 8007a6c:	9b08      	ldr	r3, [sp, #32]
 8007a6e:	b323      	cbz	r3, 8007aba <_strtod_l+0xb5a>
 8007a70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007a74:	d821      	bhi.n	8007aba <_strtod_l+0xb5a>
 8007a76:	a328      	add	r3, pc, #160	@ (adr r3, 8007b18 <_strtod_l+0xbb8>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f9 f836 	bl	8000af0 <__aeabi_dcmple>
 8007a84:	b1a0      	cbz	r0, 8007ab0 <_strtod_l+0xb50>
 8007a86:	4639      	mov	r1, r7
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7f9 f88d 	bl	8000ba8 <__aeabi_d2uiz>
 8007a8e:	2801      	cmp	r0, #1
 8007a90:	bf38      	it	cc
 8007a92:	2001      	movcc	r0, #1
 8007a94:	f7f8 fd36 	bl	8000504 <__aeabi_ui2d>
 8007a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	b9fb      	cbnz	r3, 8007ae0 <_strtod_l+0xb80>
 8007aa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007aa4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007aa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007aa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007aac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ab0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ab2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007ab6:	1b5b      	subs	r3, r3, r5
 8007ab8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007aba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007abe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007ac2:	f7ff f8f1 	bl	8006ca8 <__ulp>
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	ec53 2b10 	vmov	r2, r3, d0
 8007acc:	4659      	mov	r1, fp
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ad6:	f7f8 fbd9 	bl	800028c <__adddf3>
 8007ada:	4682      	mov	sl, r0
 8007adc:	468b      	mov	fp, r1
 8007ade:	e770      	b.n	80079c2 <_strtod_l+0xa62>
 8007ae0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ae4:	e7e0      	b.n	8007aa8 <_strtod_l+0xb48>
 8007ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007b20 <_strtod_l+0xbc0>)
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f7f8 fff6 	bl	8000adc <__aeabi_dcmplt>
 8007af0:	e798      	b.n	8007a24 <_strtod_l+0xac4>
 8007af2:	2300      	movs	r3, #0
 8007af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007af6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	f7ff ba6d 	b.w	8006fda <_strtod_l+0x7a>
 8007b00:	2a65      	cmp	r2, #101	@ 0x65
 8007b02:	f43f ab66 	beq.w	80071d2 <_strtod_l+0x272>
 8007b06:	2a45      	cmp	r2, #69	@ 0x45
 8007b08:	f43f ab63 	beq.w	80071d2 <_strtod_l+0x272>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f7ff bb9e 	b.w	800724e <_strtod_l+0x2ee>
 8007b12:	bf00      	nop
 8007b14:	f3af 8000 	nop.w
 8007b18:	ffc00000 	.word	0xffc00000
 8007b1c:	41dfffff 	.word	0x41dfffff
 8007b20:	94a03595 	.word	0x94a03595
 8007b24:	3fcfffff 	.word	0x3fcfffff

08007b28 <_strtod_r>:
 8007b28:	4b01      	ldr	r3, [pc, #4]	@ (8007b30 <_strtod_r+0x8>)
 8007b2a:	f7ff ba19 	b.w	8006f60 <_strtod_l>
 8007b2e:	bf00      	nop
 8007b30:	20000064 	.word	0x20000064

08007b34 <_strtol_l.constprop.0>:
 8007b34:	2b24      	cmp	r3, #36	@ 0x24
 8007b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3a:	4686      	mov	lr, r0
 8007b3c:	4690      	mov	r8, r2
 8007b3e:	d801      	bhi.n	8007b44 <_strtol_l.constprop.0+0x10>
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d106      	bne.n	8007b52 <_strtol_l.constprop.0+0x1e>
 8007b44:	f7fd fdba 	bl	80056bc <__errno>
 8007b48:	2316      	movs	r3, #22
 8007b4a:	6003      	str	r3, [r0, #0]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b52:	4834      	ldr	r0, [pc, #208]	@ (8007c24 <_strtol_l.constprop.0+0xf0>)
 8007b54:	460d      	mov	r5, r1
 8007b56:	462a      	mov	r2, r5
 8007b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b5c:	5d06      	ldrb	r6, [r0, r4]
 8007b5e:	f016 0608 	ands.w	r6, r6, #8
 8007b62:	d1f8      	bne.n	8007b56 <_strtol_l.constprop.0+0x22>
 8007b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b66:	d12d      	bne.n	8007bc4 <_strtol_l.constprop.0+0x90>
 8007b68:	782c      	ldrb	r4, [r5, #0]
 8007b6a:	2601      	movs	r6, #1
 8007b6c:	1c95      	adds	r5, r2, #2
 8007b6e:	f033 0210 	bics.w	r2, r3, #16
 8007b72:	d109      	bne.n	8007b88 <_strtol_l.constprop.0+0x54>
 8007b74:	2c30      	cmp	r4, #48	@ 0x30
 8007b76:	d12a      	bne.n	8007bce <_strtol_l.constprop.0+0x9a>
 8007b78:	782a      	ldrb	r2, [r5, #0]
 8007b7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b7e:	2a58      	cmp	r2, #88	@ 0x58
 8007b80:	d125      	bne.n	8007bce <_strtol_l.constprop.0+0x9a>
 8007b82:	786c      	ldrb	r4, [r5, #1]
 8007b84:	2310      	movs	r3, #16
 8007b86:	3502      	adds	r5, #2
 8007b88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b90:	2200      	movs	r2, #0
 8007b92:	fbbc f9f3 	udiv	r9, ip, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ba0:	2f09      	cmp	r7, #9
 8007ba2:	d81b      	bhi.n	8007bdc <_strtol_l.constprop.0+0xa8>
 8007ba4:	463c      	mov	r4, r7
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	dd27      	ble.n	8007bfa <_strtol_l.constprop.0+0xc6>
 8007baa:	1c57      	adds	r7, r2, #1
 8007bac:	d007      	beq.n	8007bbe <_strtol_l.constprop.0+0x8a>
 8007bae:	4581      	cmp	r9, r0
 8007bb0:	d320      	bcc.n	8007bf4 <_strtol_l.constprop.0+0xc0>
 8007bb2:	d101      	bne.n	8007bb8 <_strtol_l.constprop.0+0x84>
 8007bb4:	45a2      	cmp	sl, r4
 8007bb6:	db1d      	blt.n	8007bf4 <_strtol_l.constprop.0+0xc0>
 8007bb8:	fb00 4003 	mla	r0, r0, r3, r4
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bc2:	e7eb      	b.n	8007b9c <_strtol_l.constprop.0+0x68>
 8007bc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007bc6:	bf04      	itt	eq
 8007bc8:	782c      	ldrbeq	r4, [r5, #0]
 8007bca:	1c95      	addeq	r5, r2, #2
 8007bcc:	e7cf      	b.n	8007b6e <_strtol_l.constprop.0+0x3a>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1da      	bne.n	8007b88 <_strtol_l.constprop.0+0x54>
 8007bd2:	2c30      	cmp	r4, #48	@ 0x30
 8007bd4:	bf0c      	ite	eq
 8007bd6:	2308      	moveq	r3, #8
 8007bd8:	230a      	movne	r3, #10
 8007bda:	e7d5      	b.n	8007b88 <_strtol_l.constprop.0+0x54>
 8007bdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007be0:	2f19      	cmp	r7, #25
 8007be2:	d801      	bhi.n	8007be8 <_strtol_l.constprop.0+0xb4>
 8007be4:	3c37      	subs	r4, #55	@ 0x37
 8007be6:	e7de      	b.n	8007ba6 <_strtol_l.constprop.0+0x72>
 8007be8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007bec:	2f19      	cmp	r7, #25
 8007bee:	d804      	bhi.n	8007bfa <_strtol_l.constprop.0+0xc6>
 8007bf0:	3c57      	subs	r4, #87	@ 0x57
 8007bf2:	e7d8      	b.n	8007ba6 <_strtol_l.constprop.0+0x72>
 8007bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf8:	e7e1      	b.n	8007bbe <_strtol_l.constprop.0+0x8a>
 8007bfa:	1c53      	adds	r3, r2, #1
 8007bfc:	d108      	bne.n	8007c10 <_strtol_l.constprop.0+0xdc>
 8007bfe:	2322      	movs	r3, #34	@ 0x22
 8007c00:	f8ce 3000 	str.w	r3, [lr]
 8007c04:	4660      	mov	r0, ip
 8007c06:	f1b8 0f00 	cmp.w	r8, #0
 8007c0a:	d0a0      	beq.n	8007b4e <_strtol_l.constprop.0+0x1a>
 8007c0c:	1e69      	subs	r1, r5, #1
 8007c0e:	e006      	b.n	8007c1e <_strtol_l.constprop.0+0xea>
 8007c10:	b106      	cbz	r6, 8007c14 <_strtol_l.constprop.0+0xe0>
 8007c12:	4240      	negs	r0, r0
 8007c14:	f1b8 0f00 	cmp.w	r8, #0
 8007c18:	d099      	beq.n	8007b4e <_strtol_l.constprop.0+0x1a>
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	d1f6      	bne.n	8007c0c <_strtol_l.constprop.0+0xd8>
 8007c1e:	f8c8 1000 	str.w	r1, [r8]
 8007c22:	e794      	b.n	8007b4e <_strtol_l.constprop.0+0x1a>
 8007c24:	080090b9 	.word	0x080090b9

08007c28 <_strtol_r>:
 8007c28:	f7ff bf84 	b.w	8007b34 <_strtol_l.constprop.0>

08007c2c <__ssputs_r>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	688e      	ldr	r6, [r1, #8]
 8007c32:	461f      	mov	r7, r3
 8007c34:	42be      	cmp	r6, r7
 8007c36:	680b      	ldr	r3, [r1, #0]
 8007c38:	4682      	mov	sl, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4690      	mov	r8, r2
 8007c3e:	d82d      	bhi.n	8007c9c <__ssputs_r+0x70>
 8007c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c48:	d026      	beq.n	8007c98 <__ssputs_r+0x6c>
 8007c4a:	6965      	ldr	r5, [r4, #20]
 8007c4c:	6909      	ldr	r1, [r1, #16]
 8007c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c52:	eba3 0901 	sub.w	r9, r3, r1
 8007c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c5a:	1c7b      	adds	r3, r7, #1
 8007c5c:	444b      	add	r3, r9
 8007c5e:	106d      	asrs	r5, r5, #1
 8007c60:	429d      	cmp	r5, r3
 8007c62:	bf38      	it	cc
 8007c64:	461d      	movcc	r5, r3
 8007c66:	0553      	lsls	r3, r2, #21
 8007c68:	d527      	bpl.n	8007cba <__ssputs_r+0x8e>
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	f7fe fc1c 	bl	80064a8 <_malloc_r>
 8007c70:	4606      	mov	r6, r0
 8007c72:	b360      	cbz	r0, 8007cce <__ssputs_r+0xa2>
 8007c74:	6921      	ldr	r1, [r4, #16]
 8007c76:	464a      	mov	r2, r9
 8007c78:	f000 fa18 	bl	80080ac <memcpy>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	6126      	str	r6, [r4, #16]
 8007c8a:	6165      	str	r5, [r4, #20]
 8007c8c:	444e      	add	r6, r9
 8007c8e:	eba5 0509 	sub.w	r5, r5, r9
 8007c92:	6026      	str	r6, [r4, #0]
 8007c94:	60a5      	str	r5, [r4, #8]
 8007c96:	463e      	mov	r6, r7
 8007c98:	42be      	cmp	r6, r7
 8007c9a:	d900      	bls.n	8007c9e <__ssputs_r+0x72>
 8007c9c:	463e      	mov	r6, r7
 8007c9e:	6820      	ldr	r0, [r4, #0]
 8007ca0:	4632      	mov	r2, r6
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	f000 f9c6 	bl	8008034 <memmove>
 8007ca8:	68a3      	ldr	r3, [r4, #8]
 8007caa:	1b9b      	subs	r3, r3, r6
 8007cac:	60a3      	str	r3, [r4, #8]
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	4433      	add	r3, r6
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cba:	462a      	mov	r2, r5
 8007cbc:	f000 fd89 	bl	80087d2 <_realloc_r>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d1e0      	bne.n	8007c88 <__ssputs_r+0x5c>
 8007cc6:	6921      	ldr	r1, [r4, #16]
 8007cc8:	4650      	mov	r0, sl
 8007cca:	f7fe fb79 	bl	80063c0 <_free_r>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	f8ca 3000 	str.w	r3, [sl]
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce0:	e7e9      	b.n	8007cb6 <__ssputs_r+0x8a>
	...

08007ce4 <_svfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	4698      	mov	r8, r3
 8007cea:	898b      	ldrh	r3, [r1, #12]
 8007cec:	061b      	lsls	r3, r3, #24
 8007cee:	b09d      	sub	sp, #116	@ 0x74
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460d      	mov	r5, r1
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	d510      	bpl.n	8007d1a <_svfiprintf_r+0x36>
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	b973      	cbnz	r3, 8007d1a <_svfiprintf_r+0x36>
 8007cfc:	2140      	movs	r1, #64	@ 0x40
 8007cfe:	f7fe fbd3 	bl	80064a8 <_malloc_r>
 8007d02:	6028      	str	r0, [r5, #0]
 8007d04:	6128      	str	r0, [r5, #16]
 8007d06:	b930      	cbnz	r0, 8007d16 <_svfiprintf_r+0x32>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	b01d      	add	sp, #116	@ 0x74
 8007d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d16:	2340      	movs	r3, #64	@ 0x40
 8007d18:	616b      	str	r3, [r5, #20]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1e:	2320      	movs	r3, #32
 8007d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d28:	2330      	movs	r3, #48	@ 0x30
 8007d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ec8 <_svfiprintf_r+0x1e4>
 8007d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d32:	f04f 0901 	mov.w	r9, #1
 8007d36:	4623      	mov	r3, r4
 8007d38:	469a      	mov	sl, r3
 8007d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d3e:	b10a      	cbz	r2, 8007d44 <_svfiprintf_r+0x60>
 8007d40:	2a25      	cmp	r2, #37	@ 0x25
 8007d42:	d1f9      	bne.n	8007d38 <_svfiprintf_r+0x54>
 8007d44:	ebba 0b04 	subs.w	fp, sl, r4
 8007d48:	d00b      	beq.n	8007d62 <_svfiprintf_r+0x7e>
 8007d4a:	465b      	mov	r3, fp
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4629      	mov	r1, r5
 8007d50:	4638      	mov	r0, r7
 8007d52:	f7ff ff6b 	bl	8007c2c <__ssputs_r>
 8007d56:	3001      	adds	r0, #1
 8007d58:	f000 80a7 	beq.w	8007eaa <_svfiprintf_r+0x1c6>
 8007d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d5e:	445a      	add	r2, fp
 8007d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d62:	f89a 3000 	ldrb.w	r3, [sl]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 809f 	beq.w	8007eaa <_svfiprintf_r+0x1c6>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d76:	f10a 0a01 	add.w	sl, sl, #1
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	9307      	str	r3, [sp, #28]
 8007d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d84:	4654      	mov	r4, sl
 8007d86:	2205      	movs	r2, #5
 8007d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8c:	484e      	ldr	r0, [pc, #312]	@ (8007ec8 <_svfiprintf_r+0x1e4>)
 8007d8e:	f7f8 fa1f 	bl	80001d0 <memchr>
 8007d92:	9a04      	ldr	r2, [sp, #16]
 8007d94:	b9d8      	cbnz	r0, 8007dce <_svfiprintf_r+0xea>
 8007d96:	06d0      	lsls	r0, r2, #27
 8007d98:	bf44      	itt	mi
 8007d9a:	2320      	movmi	r3, #32
 8007d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da0:	0711      	lsls	r1, r2, #28
 8007da2:	bf44      	itt	mi
 8007da4:	232b      	movmi	r3, #43	@ 0x2b
 8007da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007daa:	f89a 3000 	ldrb.w	r3, [sl]
 8007dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db0:	d015      	beq.n	8007dde <_svfiprintf_r+0xfa>
 8007db2:	9a07      	ldr	r2, [sp, #28]
 8007db4:	4654      	mov	r4, sl
 8007db6:	2000      	movs	r0, #0
 8007db8:	f04f 0c0a 	mov.w	ip, #10
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc2:	3b30      	subs	r3, #48	@ 0x30
 8007dc4:	2b09      	cmp	r3, #9
 8007dc6:	d94b      	bls.n	8007e60 <_svfiprintf_r+0x17c>
 8007dc8:	b1b0      	cbz	r0, 8007df8 <_svfiprintf_r+0x114>
 8007dca:	9207      	str	r2, [sp, #28]
 8007dcc:	e014      	b.n	8007df8 <_svfiprintf_r+0x114>
 8007dce:	eba0 0308 	sub.w	r3, r0, r8
 8007dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	46a2      	mov	sl, r4
 8007ddc:	e7d2      	b.n	8007d84 <_svfiprintf_r+0xa0>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	1d19      	adds	r1, r3, #4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	9103      	str	r1, [sp, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfbb      	ittet	lt
 8007dea:	425b      	neglt	r3, r3
 8007dec:	f042 0202 	orrlt.w	r2, r2, #2
 8007df0:	9307      	strge	r3, [sp, #28]
 8007df2:	9307      	strlt	r3, [sp, #28]
 8007df4:	bfb8      	it	lt
 8007df6:	9204      	strlt	r2, [sp, #16]
 8007df8:	7823      	ldrb	r3, [r4, #0]
 8007dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dfc:	d10a      	bne.n	8007e14 <_svfiprintf_r+0x130>
 8007dfe:	7863      	ldrb	r3, [r4, #1]
 8007e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e02:	d132      	bne.n	8007e6a <_svfiprintf_r+0x186>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	1d1a      	adds	r2, r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	9203      	str	r2, [sp, #12]
 8007e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e10:	3402      	adds	r4, #2
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ed8 <_svfiprintf_r+0x1f4>
 8007e18:	7821      	ldrb	r1, [r4, #0]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	f7f8 f9d7 	bl	80001d0 <memchr>
 8007e22:	b138      	cbz	r0, 8007e34 <_svfiprintf_r+0x150>
 8007e24:	9b04      	ldr	r3, [sp, #16]
 8007e26:	eba0 000a 	sub.w	r0, r0, sl
 8007e2a:	2240      	movs	r2, #64	@ 0x40
 8007e2c:	4082      	lsls	r2, r0
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	3401      	adds	r4, #1
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e38:	4824      	ldr	r0, [pc, #144]	@ (8007ecc <_svfiprintf_r+0x1e8>)
 8007e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e3e:	2206      	movs	r2, #6
 8007e40:	f7f8 f9c6 	bl	80001d0 <memchr>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d036      	beq.n	8007eb6 <_svfiprintf_r+0x1d2>
 8007e48:	4b21      	ldr	r3, [pc, #132]	@ (8007ed0 <_svfiprintf_r+0x1ec>)
 8007e4a:	bb1b      	cbnz	r3, 8007e94 <_svfiprintf_r+0x1b0>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	3307      	adds	r3, #7
 8007e50:	f023 0307 	bic.w	r3, r3, #7
 8007e54:	3308      	adds	r3, #8
 8007e56:	9303      	str	r3, [sp, #12]
 8007e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5a:	4433      	add	r3, r6
 8007e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5e:	e76a      	b.n	8007d36 <_svfiprintf_r+0x52>
 8007e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e64:	460c      	mov	r4, r1
 8007e66:	2001      	movs	r0, #1
 8007e68:	e7a8      	b.n	8007dbc <_svfiprintf_r+0xd8>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	3401      	adds	r4, #1
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	4619      	mov	r1, r3
 8007e72:	f04f 0c0a 	mov.w	ip, #10
 8007e76:	4620      	mov	r0, r4
 8007e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e7c:	3a30      	subs	r2, #48	@ 0x30
 8007e7e:	2a09      	cmp	r2, #9
 8007e80:	d903      	bls.n	8007e8a <_svfiprintf_r+0x1a6>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0c6      	beq.n	8007e14 <_svfiprintf_r+0x130>
 8007e86:	9105      	str	r1, [sp, #20]
 8007e88:	e7c4      	b.n	8007e14 <_svfiprintf_r+0x130>
 8007e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e8e:	4604      	mov	r4, r0
 8007e90:	2301      	movs	r3, #1
 8007e92:	e7f0      	b.n	8007e76 <_svfiprintf_r+0x192>
 8007e94:	ab03      	add	r3, sp, #12
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <_svfiprintf_r+0x1f0>)
 8007e9c:	a904      	add	r1, sp, #16
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7fc fcc8 	bl	8004834 <_printf_float>
 8007ea4:	1c42      	adds	r2, r0, #1
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	d1d6      	bne.n	8007e58 <_svfiprintf_r+0x174>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	065b      	lsls	r3, r3, #25
 8007eae:	f53f af2d 	bmi.w	8007d0c <_svfiprintf_r+0x28>
 8007eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007eb4:	e72c      	b.n	8007d10 <_svfiprintf_r+0x2c>
 8007eb6:	ab03      	add	r3, sp, #12
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	462a      	mov	r2, r5
 8007ebc:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <_svfiprintf_r+0x1f0>)
 8007ebe:	a904      	add	r1, sp, #16
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f7fc ff4f 	bl	8004d64 <_printf_i>
 8007ec6:	e7ed      	b.n	8007ea4 <_svfiprintf_r+0x1c0>
 8007ec8:	080091b9 	.word	0x080091b9
 8007ecc:	080091c3 	.word	0x080091c3
 8007ed0:	08004835 	.word	0x08004835
 8007ed4:	08007c2d 	.word	0x08007c2d
 8007ed8:	080091bf 	.word	0x080091bf

08007edc <__sflush_r>:
 8007edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee4:	0716      	lsls	r6, r2, #28
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	460c      	mov	r4, r1
 8007eea:	d454      	bmi.n	8007f96 <__sflush_r+0xba>
 8007eec:	684b      	ldr	r3, [r1, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dc02      	bgt.n	8007ef8 <__sflush_r+0x1c>
 8007ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dd48      	ble.n	8007f8a <__sflush_r+0xae>
 8007ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d045      	beq.n	8007f8a <__sflush_r+0xae>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f04:	682f      	ldr	r7, [r5, #0]
 8007f06:	6a21      	ldr	r1, [r4, #32]
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	d030      	beq.n	8007f6e <__sflush_r+0x92>
 8007f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	0759      	lsls	r1, r3, #29
 8007f12:	d505      	bpl.n	8007f20 <__sflush_r+0x44>
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	1ad2      	subs	r2, r2, r3
 8007f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f1a:	b10b      	cbz	r3, 8007f20 <__sflush_r+0x44>
 8007f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f24:	6a21      	ldr	r1, [r4, #32]
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b0      	blx	r6
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	d106      	bne.n	8007f3e <__sflush_r+0x62>
 8007f30:	6829      	ldr	r1, [r5, #0]
 8007f32:	291d      	cmp	r1, #29
 8007f34:	d82b      	bhi.n	8007f8e <__sflush_r+0xb2>
 8007f36:	4a2a      	ldr	r2, [pc, #168]	@ (8007fe0 <__sflush_r+0x104>)
 8007f38:	410a      	asrs	r2, r1
 8007f3a:	07d6      	lsls	r6, r2, #31
 8007f3c:	d427      	bmi.n	8007f8e <__sflush_r+0xb2>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	04d9      	lsls	r1, r3, #19
 8007f44:	6922      	ldr	r2, [r4, #16]
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	d504      	bpl.n	8007f54 <__sflush_r+0x78>
 8007f4a:	1c42      	adds	r2, r0, #1
 8007f4c:	d101      	bne.n	8007f52 <__sflush_r+0x76>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b903      	cbnz	r3, 8007f54 <__sflush_r+0x78>
 8007f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f56:	602f      	str	r7, [r5, #0]
 8007f58:	b1b9      	cbz	r1, 8007f8a <__sflush_r+0xae>
 8007f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	d002      	beq.n	8007f68 <__sflush_r+0x8c>
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7fe fa2c 	bl	80063c0 <_free_r>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f6c:	e00d      	b.n	8007f8a <__sflush_r+0xae>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b0      	blx	r6
 8007f74:	4602      	mov	r2, r0
 8007f76:	1c50      	adds	r0, r2, #1
 8007f78:	d1c9      	bne.n	8007f0e <__sflush_r+0x32>
 8007f7a:	682b      	ldr	r3, [r5, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0c6      	beq.n	8007f0e <__sflush_r+0x32>
 8007f80:	2b1d      	cmp	r3, #29
 8007f82:	d001      	beq.n	8007f88 <__sflush_r+0xac>
 8007f84:	2b16      	cmp	r3, #22
 8007f86:	d11e      	bne.n	8007fc6 <__sflush_r+0xea>
 8007f88:	602f      	str	r7, [r5, #0]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e022      	b.n	8007fd4 <__sflush_r+0xf8>
 8007f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	e01b      	b.n	8007fce <__sflush_r+0xf2>
 8007f96:	690f      	ldr	r7, [r1, #16]
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	d0f6      	beq.n	8007f8a <__sflush_r+0xae>
 8007f9c:	0793      	lsls	r3, r2, #30
 8007f9e:	680e      	ldr	r6, [r1, #0]
 8007fa0:	bf08      	it	eq
 8007fa2:	694b      	ldreq	r3, [r1, #20]
 8007fa4:	600f      	str	r7, [r1, #0]
 8007fa6:	bf18      	it	ne
 8007fa8:	2300      	movne	r3, #0
 8007faa:	eba6 0807 	sub.w	r8, r6, r7
 8007fae:	608b      	str	r3, [r1, #8]
 8007fb0:	f1b8 0f00 	cmp.w	r8, #0
 8007fb4:	dde9      	ble.n	8007f8a <__sflush_r+0xae>
 8007fb6:	6a21      	ldr	r1, [r4, #32]
 8007fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fba:	4643      	mov	r3, r8
 8007fbc:	463a      	mov	r2, r7
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b0      	blx	r6
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dc08      	bgt.n	8007fd8 <__sflush_r+0xfc>
 8007fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd8:	4407      	add	r7, r0
 8007fda:	eba8 0800 	sub.w	r8, r8, r0
 8007fde:	e7e7      	b.n	8007fb0 <__sflush_r+0xd4>
 8007fe0:	dfbffffe 	.word	0xdfbffffe

08007fe4 <_fflush_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	690b      	ldr	r3, [r1, #16]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b913      	cbnz	r3, 8007ff4 <_fflush_r+0x10>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	b118      	cbz	r0, 8007ffe <_fflush_r+0x1a>
 8007ff6:	6a03      	ldr	r3, [r0, #32]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <_fflush_r+0x1a>
 8007ffa:	f7fd fa73 	bl	80054e4 <__sinit>
 8007ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f3      	beq.n	8007fee <_fflush_r+0xa>
 8008006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008008:	07d0      	lsls	r0, r2, #31
 800800a:	d404      	bmi.n	8008016 <_fflush_r+0x32>
 800800c:	0599      	lsls	r1, r3, #22
 800800e:	d402      	bmi.n	8008016 <_fflush_r+0x32>
 8008010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008012:	f7fd fb7e 	bl	8005712 <__retarget_lock_acquire_recursive>
 8008016:	4628      	mov	r0, r5
 8008018:	4621      	mov	r1, r4
 800801a:	f7ff ff5f 	bl	8007edc <__sflush_r>
 800801e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008020:	07da      	lsls	r2, r3, #31
 8008022:	4605      	mov	r5, r0
 8008024:	d4e4      	bmi.n	8007ff0 <_fflush_r+0xc>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	059b      	lsls	r3, r3, #22
 800802a:	d4e1      	bmi.n	8007ff0 <_fflush_r+0xc>
 800802c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800802e:	f7fd fb71 	bl	8005714 <__retarget_lock_release_recursive>
 8008032:	e7dd      	b.n	8007ff0 <_fflush_r+0xc>

08008034 <memmove>:
 8008034:	4288      	cmp	r0, r1
 8008036:	b510      	push	{r4, lr}
 8008038:	eb01 0402 	add.w	r4, r1, r2
 800803c:	d902      	bls.n	8008044 <memmove+0x10>
 800803e:	4284      	cmp	r4, r0
 8008040:	4623      	mov	r3, r4
 8008042:	d807      	bhi.n	8008054 <memmove+0x20>
 8008044:	1e43      	subs	r3, r0, #1
 8008046:	42a1      	cmp	r1, r4
 8008048:	d008      	beq.n	800805c <memmove+0x28>
 800804a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800804e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008052:	e7f8      	b.n	8008046 <memmove+0x12>
 8008054:	4402      	add	r2, r0
 8008056:	4601      	mov	r1, r0
 8008058:	428a      	cmp	r2, r1
 800805a:	d100      	bne.n	800805e <memmove+0x2a>
 800805c:	bd10      	pop	{r4, pc}
 800805e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008066:	e7f7      	b.n	8008058 <memmove+0x24>

08008068 <strncmp>:
 8008068:	b510      	push	{r4, lr}
 800806a:	b16a      	cbz	r2, 8008088 <strncmp+0x20>
 800806c:	3901      	subs	r1, #1
 800806e:	1884      	adds	r4, r0, r2
 8008070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008074:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008078:	429a      	cmp	r2, r3
 800807a:	d103      	bne.n	8008084 <strncmp+0x1c>
 800807c:	42a0      	cmp	r0, r4
 800807e:	d001      	beq.n	8008084 <strncmp+0x1c>
 8008080:	2a00      	cmp	r2, #0
 8008082:	d1f5      	bne.n	8008070 <strncmp+0x8>
 8008084:	1ad0      	subs	r0, r2, r3
 8008086:	bd10      	pop	{r4, pc}
 8008088:	4610      	mov	r0, r2
 800808a:	e7fc      	b.n	8008086 <strncmp+0x1e>

0800808c <_sbrk_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d06      	ldr	r5, [pc, #24]	@ (80080a8 <_sbrk_r+0x1c>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7f9 ff38 	bl	8001f0c <_sbrk>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_sbrk_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_sbrk_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200004f4 	.word	0x200004f4

080080ac <memcpy>:
 80080ac:	440a      	add	r2, r1
 80080ae:	4291      	cmp	r1, r2
 80080b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080b4:	d100      	bne.n	80080b8 <memcpy+0xc>
 80080b6:	4770      	bx	lr
 80080b8:	b510      	push	{r4, lr}
 80080ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080c2:	4291      	cmp	r1, r2
 80080c4:	d1f9      	bne.n	80080ba <memcpy+0xe>
 80080c6:	bd10      	pop	{r4, pc}

080080c8 <nan>:
 80080c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80080d0 <nan+0x8>
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	00000000 	.word	0x00000000
 80080d4:	7ff80000 	.word	0x7ff80000

080080d8 <__assert_func>:
 80080d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080da:	4614      	mov	r4, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	4b09      	ldr	r3, [pc, #36]	@ (8008104 <__assert_func+0x2c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	68d8      	ldr	r0, [r3, #12]
 80080e6:	b954      	cbnz	r4, 80080fe <__assert_func+0x26>
 80080e8:	4b07      	ldr	r3, [pc, #28]	@ (8008108 <__assert_func+0x30>)
 80080ea:	461c      	mov	r4, r3
 80080ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080f0:	9100      	str	r1, [sp, #0]
 80080f2:	462b      	mov	r3, r5
 80080f4:	4905      	ldr	r1, [pc, #20]	@ (800810c <__assert_func+0x34>)
 80080f6:	f000 fba7 	bl	8008848 <fiprintf>
 80080fa:	f000 fbb7 	bl	800886c <abort>
 80080fe:	4b04      	ldr	r3, [pc, #16]	@ (8008110 <__assert_func+0x38>)
 8008100:	e7f4      	b.n	80080ec <__assert_func+0x14>
 8008102:	bf00      	nop
 8008104:	20000014 	.word	0x20000014
 8008108:	0800920d 	.word	0x0800920d
 800810c:	080091df 	.word	0x080091df
 8008110:	080091d2 	.word	0x080091d2

08008114 <_calloc_r>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	fba1 5402 	umull	r5, r4, r1, r2
 800811a:	b93c      	cbnz	r4, 800812c <_calloc_r+0x18>
 800811c:	4629      	mov	r1, r5
 800811e:	f7fe f9c3 	bl	80064a8 <_malloc_r>
 8008122:	4606      	mov	r6, r0
 8008124:	b928      	cbnz	r0, 8008132 <_calloc_r+0x1e>
 8008126:	2600      	movs	r6, #0
 8008128:	4630      	mov	r0, r6
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	220c      	movs	r2, #12
 800812e:	6002      	str	r2, [r0, #0]
 8008130:	e7f9      	b.n	8008126 <_calloc_r+0x12>
 8008132:	462a      	mov	r2, r5
 8008134:	4621      	mov	r1, r4
 8008136:	f7fd fa6e 	bl	8005616 <memset>
 800813a:	e7f5      	b.n	8008128 <_calloc_r+0x14>

0800813c <rshift>:
 800813c:	6903      	ldr	r3, [r0, #16]
 800813e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008146:	ea4f 1261 	mov.w	r2, r1, asr #5
 800814a:	f100 0414 	add.w	r4, r0, #20
 800814e:	dd45      	ble.n	80081dc <rshift+0xa0>
 8008150:	f011 011f 	ands.w	r1, r1, #31
 8008154:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008158:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800815c:	d10c      	bne.n	8008178 <rshift+0x3c>
 800815e:	f100 0710 	add.w	r7, r0, #16
 8008162:	4629      	mov	r1, r5
 8008164:	42b1      	cmp	r1, r6
 8008166:	d334      	bcc.n	80081d2 <rshift+0x96>
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	1eea      	subs	r2, r5, #3
 800816e:	4296      	cmp	r6, r2
 8008170:	bf38      	it	cc
 8008172:	2300      	movcc	r3, #0
 8008174:	4423      	add	r3, r4
 8008176:	e015      	b.n	80081a4 <rshift+0x68>
 8008178:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800817c:	f1c1 0820 	rsb	r8, r1, #32
 8008180:	40cf      	lsrs	r7, r1
 8008182:	f105 0e04 	add.w	lr, r5, #4
 8008186:	46a1      	mov	r9, r4
 8008188:	4576      	cmp	r6, lr
 800818a:	46f4      	mov	ip, lr
 800818c:	d815      	bhi.n	80081ba <rshift+0x7e>
 800818e:	1a9a      	subs	r2, r3, r2
 8008190:	0092      	lsls	r2, r2, #2
 8008192:	3a04      	subs	r2, #4
 8008194:	3501      	adds	r5, #1
 8008196:	42ae      	cmp	r6, r5
 8008198:	bf38      	it	cc
 800819a:	2200      	movcc	r2, #0
 800819c:	18a3      	adds	r3, r4, r2
 800819e:	50a7      	str	r7, [r4, r2]
 80081a0:	b107      	cbz	r7, 80081a4 <rshift+0x68>
 80081a2:	3304      	adds	r3, #4
 80081a4:	1b1a      	subs	r2, r3, r4
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80081ac:	bf08      	it	eq
 80081ae:	2300      	moveq	r3, #0
 80081b0:	6102      	str	r2, [r0, #16]
 80081b2:	bf08      	it	eq
 80081b4:	6143      	streq	r3, [r0, #20]
 80081b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ba:	f8dc c000 	ldr.w	ip, [ip]
 80081be:	fa0c fc08 	lsl.w	ip, ip, r8
 80081c2:	ea4c 0707 	orr.w	r7, ip, r7
 80081c6:	f849 7b04 	str.w	r7, [r9], #4
 80081ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081ce:	40cf      	lsrs	r7, r1
 80081d0:	e7da      	b.n	8008188 <rshift+0x4c>
 80081d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80081d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80081da:	e7c3      	b.n	8008164 <rshift+0x28>
 80081dc:	4623      	mov	r3, r4
 80081de:	e7e1      	b.n	80081a4 <rshift+0x68>

080081e0 <__hexdig_fun>:
 80081e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80081e4:	2b09      	cmp	r3, #9
 80081e6:	d802      	bhi.n	80081ee <__hexdig_fun+0xe>
 80081e8:	3820      	subs	r0, #32
 80081ea:	b2c0      	uxtb	r0, r0
 80081ec:	4770      	bx	lr
 80081ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	d801      	bhi.n	80081fa <__hexdig_fun+0x1a>
 80081f6:	3847      	subs	r0, #71	@ 0x47
 80081f8:	e7f7      	b.n	80081ea <__hexdig_fun+0xa>
 80081fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80081fe:	2b05      	cmp	r3, #5
 8008200:	d801      	bhi.n	8008206 <__hexdig_fun+0x26>
 8008202:	3827      	subs	r0, #39	@ 0x27
 8008204:	e7f1      	b.n	80081ea <__hexdig_fun+0xa>
 8008206:	2000      	movs	r0, #0
 8008208:	4770      	bx	lr
	...

0800820c <__gethex>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	b085      	sub	sp, #20
 8008212:	468a      	mov	sl, r1
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	680b      	ldr	r3, [r1, #0]
 8008218:	9001      	str	r0, [sp, #4]
 800821a:	4690      	mov	r8, r2
 800821c:	1c9c      	adds	r4, r3, #2
 800821e:	46a1      	mov	r9, r4
 8008220:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008224:	2830      	cmp	r0, #48	@ 0x30
 8008226:	d0fa      	beq.n	800821e <__gethex+0x12>
 8008228:	eba9 0303 	sub.w	r3, r9, r3
 800822c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008230:	f7ff ffd6 	bl	80081e0 <__hexdig_fun>
 8008234:	4605      	mov	r5, r0
 8008236:	2800      	cmp	r0, #0
 8008238:	d168      	bne.n	800830c <__gethex+0x100>
 800823a:	49a0      	ldr	r1, [pc, #640]	@ (80084bc <__gethex+0x2b0>)
 800823c:	2201      	movs	r2, #1
 800823e:	4648      	mov	r0, r9
 8008240:	f7ff ff12 	bl	8008068 <strncmp>
 8008244:	4607      	mov	r7, r0
 8008246:	2800      	cmp	r0, #0
 8008248:	d167      	bne.n	800831a <__gethex+0x10e>
 800824a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800824e:	4626      	mov	r6, r4
 8008250:	f7ff ffc6 	bl	80081e0 <__hexdig_fun>
 8008254:	2800      	cmp	r0, #0
 8008256:	d062      	beq.n	800831e <__gethex+0x112>
 8008258:	4623      	mov	r3, r4
 800825a:	7818      	ldrb	r0, [r3, #0]
 800825c:	2830      	cmp	r0, #48	@ 0x30
 800825e:	4699      	mov	r9, r3
 8008260:	f103 0301 	add.w	r3, r3, #1
 8008264:	d0f9      	beq.n	800825a <__gethex+0x4e>
 8008266:	f7ff ffbb 	bl	80081e0 <__hexdig_fun>
 800826a:	fab0 f580 	clz	r5, r0
 800826e:	096d      	lsrs	r5, r5, #5
 8008270:	f04f 0b01 	mov.w	fp, #1
 8008274:	464a      	mov	r2, r9
 8008276:	4616      	mov	r6, r2
 8008278:	3201      	adds	r2, #1
 800827a:	7830      	ldrb	r0, [r6, #0]
 800827c:	f7ff ffb0 	bl	80081e0 <__hexdig_fun>
 8008280:	2800      	cmp	r0, #0
 8008282:	d1f8      	bne.n	8008276 <__gethex+0x6a>
 8008284:	498d      	ldr	r1, [pc, #564]	@ (80084bc <__gethex+0x2b0>)
 8008286:	2201      	movs	r2, #1
 8008288:	4630      	mov	r0, r6
 800828a:	f7ff feed 	bl	8008068 <strncmp>
 800828e:	2800      	cmp	r0, #0
 8008290:	d13f      	bne.n	8008312 <__gethex+0x106>
 8008292:	b944      	cbnz	r4, 80082a6 <__gethex+0x9a>
 8008294:	1c74      	adds	r4, r6, #1
 8008296:	4622      	mov	r2, r4
 8008298:	4616      	mov	r6, r2
 800829a:	3201      	adds	r2, #1
 800829c:	7830      	ldrb	r0, [r6, #0]
 800829e:	f7ff ff9f 	bl	80081e0 <__hexdig_fun>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d1f8      	bne.n	8008298 <__gethex+0x8c>
 80082a6:	1ba4      	subs	r4, r4, r6
 80082a8:	00a7      	lsls	r7, r4, #2
 80082aa:	7833      	ldrb	r3, [r6, #0]
 80082ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80082b0:	2b50      	cmp	r3, #80	@ 0x50
 80082b2:	d13e      	bne.n	8008332 <__gethex+0x126>
 80082b4:	7873      	ldrb	r3, [r6, #1]
 80082b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80082b8:	d033      	beq.n	8008322 <__gethex+0x116>
 80082ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80082bc:	d034      	beq.n	8008328 <__gethex+0x11c>
 80082be:	1c71      	adds	r1, r6, #1
 80082c0:	2400      	movs	r4, #0
 80082c2:	7808      	ldrb	r0, [r1, #0]
 80082c4:	f7ff ff8c 	bl	80081e0 <__hexdig_fun>
 80082c8:	1e43      	subs	r3, r0, #1
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b18      	cmp	r3, #24
 80082ce:	d830      	bhi.n	8008332 <__gethex+0x126>
 80082d0:	f1a0 0210 	sub.w	r2, r0, #16
 80082d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082d8:	f7ff ff82 	bl	80081e0 <__hexdig_fun>
 80082dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80082e0:	fa5f fc8c 	uxtb.w	ip, ip
 80082e4:	f1bc 0f18 	cmp.w	ip, #24
 80082e8:	f04f 030a 	mov.w	r3, #10
 80082ec:	d91e      	bls.n	800832c <__gethex+0x120>
 80082ee:	b104      	cbz	r4, 80082f2 <__gethex+0xe6>
 80082f0:	4252      	negs	r2, r2
 80082f2:	4417      	add	r7, r2
 80082f4:	f8ca 1000 	str.w	r1, [sl]
 80082f8:	b1ed      	cbz	r5, 8008336 <__gethex+0x12a>
 80082fa:	f1bb 0f00 	cmp.w	fp, #0
 80082fe:	bf0c      	ite	eq
 8008300:	2506      	moveq	r5, #6
 8008302:	2500      	movne	r5, #0
 8008304:	4628      	mov	r0, r5
 8008306:	b005      	add	sp, #20
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	2500      	movs	r5, #0
 800830e:	462c      	mov	r4, r5
 8008310:	e7b0      	b.n	8008274 <__gethex+0x68>
 8008312:	2c00      	cmp	r4, #0
 8008314:	d1c7      	bne.n	80082a6 <__gethex+0x9a>
 8008316:	4627      	mov	r7, r4
 8008318:	e7c7      	b.n	80082aa <__gethex+0x9e>
 800831a:	464e      	mov	r6, r9
 800831c:	462f      	mov	r7, r5
 800831e:	2501      	movs	r5, #1
 8008320:	e7c3      	b.n	80082aa <__gethex+0x9e>
 8008322:	2400      	movs	r4, #0
 8008324:	1cb1      	adds	r1, r6, #2
 8008326:	e7cc      	b.n	80082c2 <__gethex+0xb6>
 8008328:	2401      	movs	r4, #1
 800832a:	e7fb      	b.n	8008324 <__gethex+0x118>
 800832c:	fb03 0002 	mla	r0, r3, r2, r0
 8008330:	e7ce      	b.n	80082d0 <__gethex+0xc4>
 8008332:	4631      	mov	r1, r6
 8008334:	e7de      	b.n	80082f4 <__gethex+0xe8>
 8008336:	eba6 0309 	sub.w	r3, r6, r9
 800833a:	3b01      	subs	r3, #1
 800833c:	4629      	mov	r1, r5
 800833e:	2b07      	cmp	r3, #7
 8008340:	dc0a      	bgt.n	8008358 <__gethex+0x14c>
 8008342:	9801      	ldr	r0, [sp, #4]
 8008344:	f7fe f93c 	bl	80065c0 <_Balloc>
 8008348:	4604      	mov	r4, r0
 800834a:	b940      	cbnz	r0, 800835e <__gethex+0x152>
 800834c:	4b5c      	ldr	r3, [pc, #368]	@ (80084c0 <__gethex+0x2b4>)
 800834e:	4602      	mov	r2, r0
 8008350:	21e4      	movs	r1, #228	@ 0xe4
 8008352:	485c      	ldr	r0, [pc, #368]	@ (80084c4 <__gethex+0x2b8>)
 8008354:	f7ff fec0 	bl	80080d8 <__assert_func>
 8008358:	3101      	adds	r1, #1
 800835a:	105b      	asrs	r3, r3, #1
 800835c:	e7ef      	b.n	800833e <__gethex+0x132>
 800835e:	f100 0a14 	add.w	sl, r0, #20
 8008362:	2300      	movs	r3, #0
 8008364:	4655      	mov	r5, sl
 8008366:	469b      	mov	fp, r3
 8008368:	45b1      	cmp	r9, r6
 800836a:	d337      	bcc.n	80083dc <__gethex+0x1d0>
 800836c:	f845 bb04 	str.w	fp, [r5], #4
 8008370:	eba5 050a 	sub.w	r5, r5, sl
 8008374:	10ad      	asrs	r5, r5, #2
 8008376:	6125      	str	r5, [r4, #16]
 8008378:	4658      	mov	r0, fp
 800837a:	f7fe fa13 	bl	80067a4 <__hi0bits>
 800837e:	016d      	lsls	r5, r5, #5
 8008380:	f8d8 6000 	ldr.w	r6, [r8]
 8008384:	1a2d      	subs	r5, r5, r0
 8008386:	42b5      	cmp	r5, r6
 8008388:	dd54      	ble.n	8008434 <__gethex+0x228>
 800838a:	1bad      	subs	r5, r5, r6
 800838c:	4629      	mov	r1, r5
 800838e:	4620      	mov	r0, r4
 8008390:	f7fe fda7 	bl	8006ee2 <__any_on>
 8008394:	4681      	mov	r9, r0
 8008396:	b178      	cbz	r0, 80083b8 <__gethex+0x1ac>
 8008398:	1e6b      	subs	r3, r5, #1
 800839a:	1159      	asrs	r1, r3, #5
 800839c:	f003 021f 	and.w	r2, r3, #31
 80083a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80083a4:	f04f 0901 	mov.w	r9, #1
 80083a8:	fa09 f202 	lsl.w	r2, r9, r2
 80083ac:	420a      	tst	r2, r1
 80083ae:	d003      	beq.n	80083b8 <__gethex+0x1ac>
 80083b0:	454b      	cmp	r3, r9
 80083b2:	dc36      	bgt.n	8008422 <__gethex+0x216>
 80083b4:	f04f 0902 	mov.w	r9, #2
 80083b8:	4629      	mov	r1, r5
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7ff febe 	bl	800813c <rshift>
 80083c0:	442f      	add	r7, r5
 80083c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083c6:	42bb      	cmp	r3, r7
 80083c8:	da42      	bge.n	8008450 <__gethex+0x244>
 80083ca:	9801      	ldr	r0, [sp, #4]
 80083cc:	4621      	mov	r1, r4
 80083ce:	f7fe f937 	bl	8006640 <_Bfree>
 80083d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083d4:	2300      	movs	r3, #0
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	25a3      	movs	r5, #163	@ 0xa3
 80083da:	e793      	b.n	8008304 <__gethex+0xf8>
 80083dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80083e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80083e2:	d012      	beq.n	800840a <__gethex+0x1fe>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d104      	bne.n	80083f2 <__gethex+0x1e6>
 80083e8:	f845 bb04 	str.w	fp, [r5], #4
 80083ec:	f04f 0b00 	mov.w	fp, #0
 80083f0:	465b      	mov	r3, fp
 80083f2:	7830      	ldrb	r0, [r6, #0]
 80083f4:	9303      	str	r3, [sp, #12]
 80083f6:	f7ff fef3 	bl	80081e0 <__hexdig_fun>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	f000 000f 	and.w	r0, r0, #15
 8008400:	4098      	lsls	r0, r3
 8008402:	ea4b 0b00 	orr.w	fp, fp, r0
 8008406:	3304      	adds	r3, #4
 8008408:	e7ae      	b.n	8008368 <__gethex+0x15c>
 800840a:	45b1      	cmp	r9, r6
 800840c:	d8ea      	bhi.n	80083e4 <__gethex+0x1d8>
 800840e:	492b      	ldr	r1, [pc, #172]	@ (80084bc <__gethex+0x2b0>)
 8008410:	9303      	str	r3, [sp, #12]
 8008412:	2201      	movs	r2, #1
 8008414:	4630      	mov	r0, r6
 8008416:	f7ff fe27 	bl	8008068 <strncmp>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	2800      	cmp	r0, #0
 800841e:	d1e1      	bne.n	80083e4 <__gethex+0x1d8>
 8008420:	e7a2      	b.n	8008368 <__gethex+0x15c>
 8008422:	1ea9      	subs	r1, r5, #2
 8008424:	4620      	mov	r0, r4
 8008426:	f7fe fd5c 	bl	8006ee2 <__any_on>
 800842a:	2800      	cmp	r0, #0
 800842c:	d0c2      	beq.n	80083b4 <__gethex+0x1a8>
 800842e:	f04f 0903 	mov.w	r9, #3
 8008432:	e7c1      	b.n	80083b8 <__gethex+0x1ac>
 8008434:	da09      	bge.n	800844a <__gethex+0x23e>
 8008436:	1b75      	subs	r5, r6, r5
 8008438:	4621      	mov	r1, r4
 800843a:	9801      	ldr	r0, [sp, #4]
 800843c:	462a      	mov	r2, r5
 800843e:	f7fe fb17 	bl	8006a70 <__lshift>
 8008442:	1b7f      	subs	r7, r7, r5
 8008444:	4604      	mov	r4, r0
 8008446:	f100 0a14 	add.w	sl, r0, #20
 800844a:	f04f 0900 	mov.w	r9, #0
 800844e:	e7b8      	b.n	80083c2 <__gethex+0x1b6>
 8008450:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008454:	42bd      	cmp	r5, r7
 8008456:	dd6f      	ble.n	8008538 <__gethex+0x32c>
 8008458:	1bed      	subs	r5, r5, r7
 800845a:	42ae      	cmp	r6, r5
 800845c:	dc34      	bgt.n	80084c8 <__gethex+0x2bc>
 800845e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008462:	2b02      	cmp	r3, #2
 8008464:	d022      	beq.n	80084ac <__gethex+0x2a0>
 8008466:	2b03      	cmp	r3, #3
 8008468:	d024      	beq.n	80084b4 <__gethex+0x2a8>
 800846a:	2b01      	cmp	r3, #1
 800846c:	d115      	bne.n	800849a <__gethex+0x28e>
 800846e:	42ae      	cmp	r6, r5
 8008470:	d113      	bne.n	800849a <__gethex+0x28e>
 8008472:	2e01      	cmp	r6, #1
 8008474:	d10b      	bne.n	800848e <__gethex+0x282>
 8008476:	9a02      	ldr	r2, [sp, #8]
 8008478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	2301      	movs	r3, #1
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	f8ca 3000 	str.w	r3, [sl]
 8008486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008488:	2562      	movs	r5, #98	@ 0x62
 800848a:	601c      	str	r4, [r3, #0]
 800848c:	e73a      	b.n	8008304 <__gethex+0xf8>
 800848e:	1e71      	subs	r1, r6, #1
 8008490:	4620      	mov	r0, r4
 8008492:	f7fe fd26 	bl	8006ee2 <__any_on>
 8008496:	2800      	cmp	r0, #0
 8008498:	d1ed      	bne.n	8008476 <__gethex+0x26a>
 800849a:	9801      	ldr	r0, [sp, #4]
 800849c:	4621      	mov	r1, r4
 800849e:	f7fe f8cf 	bl	8006640 <_Bfree>
 80084a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084a4:	2300      	movs	r3, #0
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	2550      	movs	r5, #80	@ 0x50
 80084aa:	e72b      	b.n	8008304 <__gethex+0xf8>
 80084ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f3      	bne.n	800849a <__gethex+0x28e>
 80084b2:	e7e0      	b.n	8008476 <__gethex+0x26a>
 80084b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1dd      	bne.n	8008476 <__gethex+0x26a>
 80084ba:	e7ee      	b.n	800849a <__gethex+0x28e>
 80084bc:	08009060 	.word	0x08009060
 80084c0:	08008ef9 	.word	0x08008ef9
 80084c4:	0800920e 	.word	0x0800920e
 80084c8:	1e6f      	subs	r7, r5, #1
 80084ca:	f1b9 0f00 	cmp.w	r9, #0
 80084ce:	d130      	bne.n	8008532 <__gethex+0x326>
 80084d0:	b127      	cbz	r7, 80084dc <__gethex+0x2d0>
 80084d2:	4639      	mov	r1, r7
 80084d4:	4620      	mov	r0, r4
 80084d6:	f7fe fd04 	bl	8006ee2 <__any_on>
 80084da:	4681      	mov	r9, r0
 80084dc:	117a      	asrs	r2, r7, #5
 80084de:	2301      	movs	r3, #1
 80084e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80084e4:	f007 071f 	and.w	r7, r7, #31
 80084e8:	40bb      	lsls	r3, r7
 80084ea:	4213      	tst	r3, r2
 80084ec:	4629      	mov	r1, r5
 80084ee:	4620      	mov	r0, r4
 80084f0:	bf18      	it	ne
 80084f2:	f049 0902 	orrne.w	r9, r9, #2
 80084f6:	f7ff fe21 	bl	800813c <rshift>
 80084fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80084fe:	1b76      	subs	r6, r6, r5
 8008500:	2502      	movs	r5, #2
 8008502:	f1b9 0f00 	cmp.w	r9, #0
 8008506:	d047      	beq.n	8008598 <__gethex+0x38c>
 8008508:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d015      	beq.n	800853c <__gethex+0x330>
 8008510:	2b03      	cmp	r3, #3
 8008512:	d017      	beq.n	8008544 <__gethex+0x338>
 8008514:	2b01      	cmp	r3, #1
 8008516:	d109      	bne.n	800852c <__gethex+0x320>
 8008518:	f019 0f02 	tst.w	r9, #2
 800851c:	d006      	beq.n	800852c <__gethex+0x320>
 800851e:	f8da 3000 	ldr.w	r3, [sl]
 8008522:	ea49 0903 	orr.w	r9, r9, r3
 8008526:	f019 0f01 	tst.w	r9, #1
 800852a:	d10e      	bne.n	800854a <__gethex+0x33e>
 800852c:	f045 0510 	orr.w	r5, r5, #16
 8008530:	e032      	b.n	8008598 <__gethex+0x38c>
 8008532:	f04f 0901 	mov.w	r9, #1
 8008536:	e7d1      	b.n	80084dc <__gethex+0x2d0>
 8008538:	2501      	movs	r5, #1
 800853a:	e7e2      	b.n	8008502 <__gethex+0x2f6>
 800853c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800853e:	f1c3 0301 	rsb	r3, r3, #1
 8008542:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <__gethex+0x320>
 800854a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800854e:	f104 0314 	add.w	r3, r4, #20
 8008552:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008556:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800855a:	f04f 0c00 	mov.w	ip, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f853 2b04 	ldr.w	r2, [r3], #4
 8008564:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008568:	d01b      	beq.n	80085a2 <__gethex+0x396>
 800856a:	3201      	adds	r2, #1
 800856c:	6002      	str	r2, [r0, #0]
 800856e:	2d02      	cmp	r5, #2
 8008570:	f104 0314 	add.w	r3, r4, #20
 8008574:	d13c      	bne.n	80085f0 <__gethex+0x3e4>
 8008576:	f8d8 2000 	ldr.w	r2, [r8]
 800857a:	3a01      	subs	r2, #1
 800857c:	42b2      	cmp	r2, r6
 800857e:	d109      	bne.n	8008594 <__gethex+0x388>
 8008580:	1171      	asrs	r1, r6, #5
 8008582:	2201      	movs	r2, #1
 8008584:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008588:	f006 061f 	and.w	r6, r6, #31
 800858c:	fa02 f606 	lsl.w	r6, r2, r6
 8008590:	421e      	tst	r6, r3
 8008592:	d13a      	bne.n	800860a <__gethex+0x3fe>
 8008594:	f045 0520 	orr.w	r5, r5, #32
 8008598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800859a:	601c      	str	r4, [r3, #0]
 800859c:	9b02      	ldr	r3, [sp, #8]
 800859e:	601f      	str	r7, [r3, #0]
 80085a0:	e6b0      	b.n	8008304 <__gethex+0xf8>
 80085a2:	4299      	cmp	r1, r3
 80085a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80085a8:	d8d9      	bhi.n	800855e <__gethex+0x352>
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	459b      	cmp	fp, r3
 80085ae:	db17      	blt.n	80085e0 <__gethex+0x3d4>
 80085b0:	6861      	ldr	r1, [r4, #4]
 80085b2:	9801      	ldr	r0, [sp, #4]
 80085b4:	3101      	adds	r1, #1
 80085b6:	f7fe f803 	bl	80065c0 <_Balloc>
 80085ba:	4681      	mov	r9, r0
 80085bc:	b918      	cbnz	r0, 80085c6 <__gethex+0x3ba>
 80085be:	4b1a      	ldr	r3, [pc, #104]	@ (8008628 <__gethex+0x41c>)
 80085c0:	4602      	mov	r2, r0
 80085c2:	2184      	movs	r1, #132	@ 0x84
 80085c4:	e6c5      	b.n	8008352 <__gethex+0x146>
 80085c6:	6922      	ldr	r2, [r4, #16]
 80085c8:	3202      	adds	r2, #2
 80085ca:	f104 010c 	add.w	r1, r4, #12
 80085ce:	0092      	lsls	r2, r2, #2
 80085d0:	300c      	adds	r0, #12
 80085d2:	f7ff fd6b 	bl	80080ac <memcpy>
 80085d6:	4621      	mov	r1, r4
 80085d8:	9801      	ldr	r0, [sp, #4]
 80085da:	f7fe f831 	bl	8006640 <_Bfree>
 80085de:	464c      	mov	r4, r9
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085e8:	6122      	str	r2, [r4, #16]
 80085ea:	2201      	movs	r2, #1
 80085ec:	615a      	str	r2, [r3, #20]
 80085ee:	e7be      	b.n	800856e <__gethex+0x362>
 80085f0:	6922      	ldr	r2, [r4, #16]
 80085f2:	455a      	cmp	r2, fp
 80085f4:	dd0b      	ble.n	800860e <__gethex+0x402>
 80085f6:	2101      	movs	r1, #1
 80085f8:	4620      	mov	r0, r4
 80085fa:	f7ff fd9f 	bl	800813c <rshift>
 80085fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008602:	3701      	adds	r7, #1
 8008604:	42bb      	cmp	r3, r7
 8008606:	f6ff aee0 	blt.w	80083ca <__gethex+0x1be>
 800860a:	2501      	movs	r5, #1
 800860c:	e7c2      	b.n	8008594 <__gethex+0x388>
 800860e:	f016 061f 	ands.w	r6, r6, #31
 8008612:	d0fa      	beq.n	800860a <__gethex+0x3fe>
 8008614:	4453      	add	r3, sl
 8008616:	f1c6 0620 	rsb	r6, r6, #32
 800861a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800861e:	f7fe f8c1 	bl	80067a4 <__hi0bits>
 8008622:	42b0      	cmp	r0, r6
 8008624:	dbe7      	blt.n	80085f6 <__gethex+0x3ea>
 8008626:	e7f0      	b.n	800860a <__gethex+0x3fe>
 8008628:	08008ef9 	.word	0x08008ef9

0800862c <L_shift>:
 800862c:	f1c2 0208 	rsb	r2, r2, #8
 8008630:	0092      	lsls	r2, r2, #2
 8008632:	b570      	push	{r4, r5, r6, lr}
 8008634:	f1c2 0620 	rsb	r6, r2, #32
 8008638:	6843      	ldr	r3, [r0, #4]
 800863a:	6804      	ldr	r4, [r0, #0]
 800863c:	fa03 f506 	lsl.w	r5, r3, r6
 8008640:	432c      	orrs	r4, r5
 8008642:	40d3      	lsrs	r3, r2
 8008644:	6004      	str	r4, [r0, #0]
 8008646:	f840 3f04 	str.w	r3, [r0, #4]!
 800864a:	4288      	cmp	r0, r1
 800864c:	d3f4      	bcc.n	8008638 <L_shift+0xc>
 800864e:	bd70      	pop	{r4, r5, r6, pc}

08008650 <__match>:
 8008650:	b530      	push	{r4, r5, lr}
 8008652:	6803      	ldr	r3, [r0, #0]
 8008654:	3301      	adds	r3, #1
 8008656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800865a:	b914      	cbnz	r4, 8008662 <__match+0x12>
 800865c:	6003      	str	r3, [r0, #0]
 800865e:	2001      	movs	r0, #1
 8008660:	bd30      	pop	{r4, r5, pc}
 8008662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008666:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800866a:	2d19      	cmp	r5, #25
 800866c:	bf98      	it	ls
 800866e:	3220      	addls	r2, #32
 8008670:	42a2      	cmp	r2, r4
 8008672:	d0f0      	beq.n	8008656 <__match+0x6>
 8008674:	2000      	movs	r0, #0
 8008676:	e7f3      	b.n	8008660 <__match+0x10>

08008678 <__hexnan>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	680b      	ldr	r3, [r1, #0]
 800867e:	6801      	ldr	r1, [r0, #0]
 8008680:	115e      	asrs	r6, r3, #5
 8008682:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008686:	f013 031f 	ands.w	r3, r3, #31
 800868a:	b087      	sub	sp, #28
 800868c:	bf18      	it	ne
 800868e:	3604      	addne	r6, #4
 8008690:	2500      	movs	r5, #0
 8008692:	1f37      	subs	r7, r6, #4
 8008694:	4682      	mov	sl, r0
 8008696:	4690      	mov	r8, r2
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	f846 5c04 	str.w	r5, [r6, #-4]
 800869e:	46b9      	mov	r9, r7
 80086a0:	463c      	mov	r4, r7
 80086a2:	9502      	str	r5, [sp, #8]
 80086a4:	46ab      	mov	fp, r5
 80086a6:	784a      	ldrb	r2, [r1, #1]
 80086a8:	1c4b      	adds	r3, r1, #1
 80086aa:	9303      	str	r3, [sp, #12]
 80086ac:	b342      	cbz	r2, 8008700 <__hexnan+0x88>
 80086ae:	4610      	mov	r0, r2
 80086b0:	9105      	str	r1, [sp, #20]
 80086b2:	9204      	str	r2, [sp, #16]
 80086b4:	f7ff fd94 	bl	80081e0 <__hexdig_fun>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d151      	bne.n	8008760 <__hexnan+0xe8>
 80086bc:	9a04      	ldr	r2, [sp, #16]
 80086be:	9905      	ldr	r1, [sp, #20]
 80086c0:	2a20      	cmp	r2, #32
 80086c2:	d818      	bhi.n	80086f6 <__hexnan+0x7e>
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	459b      	cmp	fp, r3
 80086c8:	dd13      	ble.n	80086f2 <__hexnan+0x7a>
 80086ca:	454c      	cmp	r4, r9
 80086cc:	d206      	bcs.n	80086dc <__hexnan+0x64>
 80086ce:	2d07      	cmp	r5, #7
 80086d0:	dc04      	bgt.n	80086dc <__hexnan+0x64>
 80086d2:	462a      	mov	r2, r5
 80086d4:	4649      	mov	r1, r9
 80086d6:	4620      	mov	r0, r4
 80086d8:	f7ff ffa8 	bl	800862c <L_shift>
 80086dc:	4544      	cmp	r4, r8
 80086de:	d952      	bls.n	8008786 <__hexnan+0x10e>
 80086e0:	2300      	movs	r3, #0
 80086e2:	f1a4 0904 	sub.w	r9, r4, #4
 80086e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80086ea:	f8cd b008 	str.w	fp, [sp, #8]
 80086ee:	464c      	mov	r4, r9
 80086f0:	461d      	mov	r5, r3
 80086f2:	9903      	ldr	r1, [sp, #12]
 80086f4:	e7d7      	b.n	80086a6 <__hexnan+0x2e>
 80086f6:	2a29      	cmp	r2, #41	@ 0x29
 80086f8:	d157      	bne.n	80087aa <__hexnan+0x132>
 80086fa:	3102      	adds	r1, #2
 80086fc:	f8ca 1000 	str.w	r1, [sl]
 8008700:	f1bb 0f00 	cmp.w	fp, #0
 8008704:	d051      	beq.n	80087aa <__hexnan+0x132>
 8008706:	454c      	cmp	r4, r9
 8008708:	d206      	bcs.n	8008718 <__hexnan+0xa0>
 800870a:	2d07      	cmp	r5, #7
 800870c:	dc04      	bgt.n	8008718 <__hexnan+0xa0>
 800870e:	462a      	mov	r2, r5
 8008710:	4649      	mov	r1, r9
 8008712:	4620      	mov	r0, r4
 8008714:	f7ff ff8a 	bl	800862c <L_shift>
 8008718:	4544      	cmp	r4, r8
 800871a:	d936      	bls.n	800878a <__hexnan+0x112>
 800871c:	f1a8 0204 	sub.w	r2, r8, #4
 8008720:	4623      	mov	r3, r4
 8008722:	f853 1b04 	ldr.w	r1, [r3], #4
 8008726:	f842 1f04 	str.w	r1, [r2, #4]!
 800872a:	429f      	cmp	r7, r3
 800872c:	d2f9      	bcs.n	8008722 <__hexnan+0xaa>
 800872e:	1b3b      	subs	r3, r7, r4
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	3304      	adds	r3, #4
 8008736:	3401      	adds	r4, #1
 8008738:	3e03      	subs	r6, #3
 800873a:	42b4      	cmp	r4, r6
 800873c:	bf88      	it	hi
 800873e:	2304      	movhi	r3, #4
 8008740:	4443      	add	r3, r8
 8008742:	2200      	movs	r2, #0
 8008744:	f843 2b04 	str.w	r2, [r3], #4
 8008748:	429f      	cmp	r7, r3
 800874a:	d2fb      	bcs.n	8008744 <__hexnan+0xcc>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	b91b      	cbnz	r3, 8008758 <__hexnan+0xe0>
 8008750:	4547      	cmp	r7, r8
 8008752:	d128      	bne.n	80087a6 <__hexnan+0x12e>
 8008754:	2301      	movs	r3, #1
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	2005      	movs	r0, #5
 800875a:	b007      	add	sp, #28
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	3501      	adds	r5, #1
 8008762:	2d08      	cmp	r5, #8
 8008764:	f10b 0b01 	add.w	fp, fp, #1
 8008768:	dd06      	ble.n	8008778 <__hexnan+0x100>
 800876a:	4544      	cmp	r4, r8
 800876c:	d9c1      	bls.n	80086f2 <__hexnan+0x7a>
 800876e:	2300      	movs	r3, #0
 8008770:	f844 3c04 	str.w	r3, [r4, #-4]
 8008774:	2501      	movs	r5, #1
 8008776:	3c04      	subs	r4, #4
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	f000 000f 	and.w	r0, r0, #15
 800877e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008782:	6020      	str	r0, [r4, #0]
 8008784:	e7b5      	b.n	80086f2 <__hexnan+0x7a>
 8008786:	2508      	movs	r5, #8
 8008788:	e7b3      	b.n	80086f2 <__hexnan+0x7a>
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0dd      	beq.n	800874c <__hexnan+0xd4>
 8008790:	f1c3 0320 	rsb	r3, r3, #32
 8008794:	f04f 32ff 	mov.w	r2, #4294967295
 8008798:	40da      	lsrs	r2, r3
 800879a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800879e:	4013      	ands	r3, r2
 80087a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80087a4:	e7d2      	b.n	800874c <__hexnan+0xd4>
 80087a6:	3f04      	subs	r7, #4
 80087a8:	e7d0      	b.n	800874c <__hexnan+0xd4>
 80087aa:	2004      	movs	r0, #4
 80087ac:	e7d5      	b.n	800875a <__hexnan+0xe2>

080087ae <__ascii_mbtowc>:
 80087ae:	b082      	sub	sp, #8
 80087b0:	b901      	cbnz	r1, 80087b4 <__ascii_mbtowc+0x6>
 80087b2:	a901      	add	r1, sp, #4
 80087b4:	b142      	cbz	r2, 80087c8 <__ascii_mbtowc+0x1a>
 80087b6:	b14b      	cbz	r3, 80087cc <__ascii_mbtowc+0x1e>
 80087b8:	7813      	ldrb	r3, [r2, #0]
 80087ba:	600b      	str	r3, [r1, #0]
 80087bc:	7812      	ldrb	r2, [r2, #0]
 80087be:	1e10      	subs	r0, r2, #0
 80087c0:	bf18      	it	ne
 80087c2:	2001      	movne	r0, #1
 80087c4:	b002      	add	sp, #8
 80087c6:	4770      	bx	lr
 80087c8:	4610      	mov	r0, r2
 80087ca:	e7fb      	b.n	80087c4 <__ascii_mbtowc+0x16>
 80087cc:	f06f 0001 	mvn.w	r0, #1
 80087d0:	e7f8      	b.n	80087c4 <__ascii_mbtowc+0x16>

080087d2 <_realloc_r>:
 80087d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d6:	4680      	mov	r8, r0
 80087d8:	4615      	mov	r5, r2
 80087da:	460c      	mov	r4, r1
 80087dc:	b921      	cbnz	r1, 80087e8 <_realloc_r+0x16>
 80087de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	4611      	mov	r1, r2
 80087e4:	f7fd be60 	b.w	80064a8 <_malloc_r>
 80087e8:	b92a      	cbnz	r2, 80087f6 <_realloc_r+0x24>
 80087ea:	f7fd fde9 	bl	80063c0 <_free_r>
 80087ee:	2400      	movs	r4, #0
 80087f0:	4620      	mov	r0, r4
 80087f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f6:	f000 f840 	bl	800887a <_malloc_usable_size_r>
 80087fa:	4285      	cmp	r5, r0
 80087fc:	4606      	mov	r6, r0
 80087fe:	d802      	bhi.n	8008806 <_realloc_r+0x34>
 8008800:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008804:	d8f4      	bhi.n	80087f0 <_realloc_r+0x1e>
 8008806:	4629      	mov	r1, r5
 8008808:	4640      	mov	r0, r8
 800880a:	f7fd fe4d 	bl	80064a8 <_malloc_r>
 800880e:	4607      	mov	r7, r0
 8008810:	2800      	cmp	r0, #0
 8008812:	d0ec      	beq.n	80087ee <_realloc_r+0x1c>
 8008814:	42b5      	cmp	r5, r6
 8008816:	462a      	mov	r2, r5
 8008818:	4621      	mov	r1, r4
 800881a:	bf28      	it	cs
 800881c:	4632      	movcs	r2, r6
 800881e:	f7ff fc45 	bl	80080ac <memcpy>
 8008822:	4621      	mov	r1, r4
 8008824:	4640      	mov	r0, r8
 8008826:	f7fd fdcb 	bl	80063c0 <_free_r>
 800882a:	463c      	mov	r4, r7
 800882c:	e7e0      	b.n	80087f0 <_realloc_r+0x1e>

0800882e <__ascii_wctomb>:
 800882e:	4603      	mov	r3, r0
 8008830:	4608      	mov	r0, r1
 8008832:	b141      	cbz	r1, 8008846 <__ascii_wctomb+0x18>
 8008834:	2aff      	cmp	r2, #255	@ 0xff
 8008836:	d904      	bls.n	8008842 <__ascii_wctomb+0x14>
 8008838:	228a      	movs	r2, #138	@ 0x8a
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	4770      	bx	lr
 8008842:	700a      	strb	r2, [r1, #0]
 8008844:	2001      	movs	r0, #1
 8008846:	4770      	bx	lr

08008848 <fiprintf>:
 8008848:	b40e      	push	{r1, r2, r3}
 800884a:	b503      	push	{r0, r1, lr}
 800884c:	4601      	mov	r1, r0
 800884e:	ab03      	add	r3, sp, #12
 8008850:	4805      	ldr	r0, [pc, #20]	@ (8008868 <fiprintf+0x20>)
 8008852:	f853 2b04 	ldr.w	r2, [r3], #4
 8008856:	6800      	ldr	r0, [r0, #0]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	f000 f83f 	bl	80088dc <_vfiprintf_r>
 800885e:	b002      	add	sp, #8
 8008860:	f85d eb04 	ldr.w	lr, [sp], #4
 8008864:	b003      	add	sp, #12
 8008866:	4770      	bx	lr
 8008868:	20000014 	.word	0x20000014

0800886c <abort>:
 800886c:	b508      	push	{r3, lr}
 800886e:	2006      	movs	r0, #6
 8008870:	f000 fa08 	bl	8008c84 <raise>
 8008874:	2001      	movs	r0, #1
 8008876:	f7f9 fad1 	bl	8001e1c <_exit>

0800887a <_malloc_usable_size_r>:
 800887a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887e:	1f18      	subs	r0, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfbc      	itt	lt
 8008884:	580b      	ldrlt	r3, [r1, r0]
 8008886:	18c0      	addlt	r0, r0, r3
 8008888:	4770      	bx	lr

0800888a <__sfputc_r>:
 800888a:	6893      	ldr	r3, [r2, #8]
 800888c:	3b01      	subs	r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	b410      	push	{r4}
 8008892:	6093      	str	r3, [r2, #8]
 8008894:	da08      	bge.n	80088a8 <__sfputc_r+0x1e>
 8008896:	6994      	ldr	r4, [r2, #24]
 8008898:	42a3      	cmp	r3, r4
 800889a:	db01      	blt.n	80088a0 <__sfputc_r+0x16>
 800889c:	290a      	cmp	r1, #10
 800889e:	d103      	bne.n	80088a8 <__sfputc_r+0x1e>
 80088a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088a4:	f000 b932 	b.w	8008b0c <__swbuf_r>
 80088a8:	6813      	ldr	r3, [r2, #0]
 80088aa:	1c58      	adds	r0, r3, #1
 80088ac:	6010      	str	r0, [r2, #0]
 80088ae:	7019      	strb	r1, [r3, #0]
 80088b0:	4608      	mov	r0, r1
 80088b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <__sfputs_r>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	4606      	mov	r6, r0
 80088bc:	460f      	mov	r7, r1
 80088be:	4614      	mov	r4, r2
 80088c0:	18d5      	adds	r5, r2, r3
 80088c2:	42ac      	cmp	r4, r5
 80088c4:	d101      	bne.n	80088ca <__sfputs_r+0x12>
 80088c6:	2000      	movs	r0, #0
 80088c8:	e007      	b.n	80088da <__sfputs_r+0x22>
 80088ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ce:	463a      	mov	r2, r7
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff ffda 	bl	800888a <__sfputc_r>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	d1f3      	bne.n	80088c2 <__sfputs_r+0xa>
 80088da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088dc <_vfiprintf_r>:
 80088dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	460d      	mov	r5, r1
 80088e2:	b09d      	sub	sp, #116	@ 0x74
 80088e4:	4614      	mov	r4, r2
 80088e6:	4698      	mov	r8, r3
 80088e8:	4606      	mov	r6, r0
 80088ea:	b118      	cbz	r0, 80088f4 <_vfiprintf_r+0x18>
 80088ec:	6a03      	ldr	r3, [r0, #32]
 80088ee:	b90b      	cbnz	r3, 80088f4 <_vfiprintf_r+0x18>
 80088f0:	f7fc fdf8 	bl	80054e4 <__sinit>
 80088f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088f6:	07d9      	lsls	r1, r3, #31
 80088f8:	d405      	bmi.n	8008906 <_vfiprintf_r+0x2a>
 80088fa:	89ab      	ldrh	r3, [r5, #12]
 80088fc:	059a      	lsls	r2, r3, #22
 80088fe:	d402      	bmi.n	8008906 <_vfiprintf_r+0x2a>
 8008900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008902:	f7fc ff06 	bl	8005712 <__retarget_lock_acquire_recursive>
 8008906:	89ab      	ldrh	r3, [r5, #12]
 8008908:	071b      	lsls	r3, r3, #28
 800890a:	d501      	bpl.n	8008910 <_vfiprintf_r+0x34>
 800890c:	692b      	ldr	r3, [r5, #16]
 800890e:	b99b      	cbnz	r3, 8008938 <_vfiprintf_r+0x5c>
 8008910:	4629      	mov	r1, r5
 8008912:	4630      	mov	r0, r6
 8008914:	f000 f938 	bl	8008b88 <__swsetup_r>
 8008918:	b170      	cbz	r0, 8008938 <_vfiprintf_r+0x5c>
 800891a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800891c:	07dc      	lsls	r4, r3, #31
 800891e:	d504      	bpl.n	800892a <_vfiprintf_r+0x4e>
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	b01d      	add	sp, #116	@ 0x74
 8008926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892a:	89ab      	ldrh	r3, [r5, #12]
 800892c:	0598      	lsls	r0, r3, #22
 800892e:	d4f7      	bmi.n	8008920 <_vfiprintf_r+0x44>
 8008930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008932:	f7fc feef 	bl	8005714 <__retarget_lock_release_recursive>
 8008936:	e7f3      	b.n	8008920 <_vfiprintf_r+0x44>
 8008938:	2300      	movs	r3, #0
 800893a:	9309      	str	r3, [sp, #36]	@ 0x24
 800893c:	2320      	movs	r3, #32
 800893e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008942:	f8cd 800c 	str.w	r8, [sp, #12]
 8008946:	2330      	movs	r3, #48	@ 0x30
 8008948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008af8 <_vfiprintf_r+0x21c>
 800894c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008950:	f04f 0901 	mov.w	r9, #1
 8008954:	4623      	mov	r3, r4
 8008956:	469a      	mov	sl, r3
 8008958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800895c:	b10a      	cbz	r2, 8008962 <_vfiprintf_r+0x86>
 800895e:	2a25      	cmp	r2, #37	@ 0x25
 8008960:	d1f9      	bne.n	8008956 <_vfiprintf_r+0x7a>
 8008962:	ebba 0b04 	subs.w	fp, sl, r4
 8008966:	d00b      	beq.n	8008980 <_vfiprintf_r+0xa4>
 8008968:	465b      	mov	r3, fp
 800896a:	4622      	mov	r2, r4
 800896c:	4629      	mov	r1, r5
 800896e:	4630      	mov	r0, r6
 8008970:	f7ff ffa2 	bl	80088b8 <__sfputs_r>
 8008974:	3001      	adds	r0, #1
 8008976:	f000 80a7 	beq.w	8008ac8 <_vfiprintf_r+0x1ec>
 800897a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800897c:	445a      	add	r2, fp
 800897e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008980:	f89a 3000 	ldrb.w	r3, [sl]
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 809f 	beq.w	8008ac8 <_vfiprintf_r+0x1ec>
 800898a:	2300      	movs	r3, #0
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008994:	f10a 0a01 	add.w	sl, sl, #1
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	9307      	str	r3, [sp, #28]
 800899c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80089a2:	4654      	mov	r4, sl
 80089a4:	2205      	movs	r2, #5
 80089a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089aa:	4853      	ldr	r0, [pc, #332]	@ (8008af8 <_vfiprintf_r+0x21c>)
 80089ac:	f7f7 fc10 	bl	80001d0 <memchr>
 80089b0:	9a04      	ldr	r2, [sp, #16]
 80089b2:	b9d8      	cbnz	r0, 80089ec <_vfiprintf_r+0x110>
 80089b4:	06d1      	lsls	r1, r2, #27
 80089b6:	bf44      	itt	mi
 80089b8:	2320      	movmi	r3, #32
 80089ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089be:	0713      	lsls	r3, r2, #28
 80089c0:	bf44      	itt	mi
 80089c2:	232b      	movmi	r3, #43	@ 0x2b
 80089c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c8:	f89a 3000 	ldrb.w	r3, [sl]
 80089cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ce:	d015      	beq.n	80089fc <_vfiprintf_r+0x120>
 80089d0:	9a07      	ldr	r2, [sp, #28]
 80089d2:	4654      	mov	r4, sl
 80089d4:	2000      	movs	r0, #0
 80089d6:	f04f 0c0a 	mov.w	ip, #10
 80089da:	4621      	mov	r1, r4
 80089dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089e0:	3b30      	subs	r3, #48	@ 0x30
 80089e2:	2b09      	cmp	r3, #9
 80089e4:	d94b      	bls.n	8008a7e <_vfiprintf_r+0x1a2>
 80089e6:	b1b0      	cbz	r0, 8008a16 <_vfiprintf_r+0x13a>
 80089e8:	9207      	str	r2, [sp, #28]
 80089ea:	e014      	b.n	8008a16 <_vfiprintf_r+0x13a>
 80089ec:	eba0 0308 	sub.w	r3, r0, r8
 80089f0:	fa09 f303 	lsl.w	r3, r9, r3
 80089f4:	4313      	orrs	r3, r2
 80089f6:	9304      	str	r3, [sp, #16]
 80089f8:	46a2      	mov	sl, r4
 80089fa:	e7d2      	b.n	80089a2 <_vfiprintf_r+0xc6>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	1d19      	adds	r1, r3, #4
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	9103      	str	r1, [sp, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bfbb      	ittet	lt
 8008a08:	425b      	neglt	r3, r3
 8008a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a0e:	9307      	strge	r3, [sp, #28]
 8008a10:	9307      	strlt	r3, [sp, #28]
 8008a12:	bfb8      	it	lt
 8008a14:	9204      	strlt	r2, [sp, #16]
 8008a16:	7823      	ldrb	r3, [r4, #0]
 8008a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a1a:	d10a      	bne.n	8008a32 <_vfiprintf_r+0x156>
 8008a1c:	7863      	ldrb	r3, [r4, #1]
 8008a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a20:	d132      	bne.n	8008a88 <_vfiprintf_r+0x1ac>
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	9203      	str	r2, [sp, #12]
 8008a2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a2e:	3402      	adds	r4, #2
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b08 <_vfiprintf_r+0x22c>
 8008a36:	7821      	ldrb	r1, [r4, #0]
 8008a38:	2203      	movs	r2, #3
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	f7f7 fbc8 	bl	80001d0 <memchr>
 8008a40:	b138      	cbz	r0, 8008a52 <_vfiprintf_r+0x176>
 8008a42:	9b04      	ldr	r3, [sp, #16]
 8008a44:	eba0 000a 	sub.w	r0, r0, sl
 8008a48:	2240      	movs	r2, #64	@ 0x40
 8008a4a:	4082      	lsls	r2, r0
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	3401      	adds	r4, #1
 8008a50:	9304      	str	r3, [sp, #16]
 8008a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a56:	4829      	ldr	r0, [pc, #164]	@ (8008afc <_vfiprintf_r+0x220>)
 8008a58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a5c:	2206      	movs	r2, #6
 8008a5e:	f7f7 fbb7 	bl	80001d0 <memchr>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d03f      	beq.n	8008ae6 <_vfiprintf_r+0x20a>
 8008a66:	4b26      	ldr	r3, [pc, #152]	@ (8008b00 <_vfiprintf_r+0x224>)
 8008a68:	bb1b      	cbnz	r3, 8008ab2 <_vfiprintf_r+0x1d6>
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	3307      	adds	r3, #7
 8008a6e:	f023 0307 	bic.w	r3, r3, #7
 8008a72:	3308      	adds	r3, #8
 8008a74:	9303      	str	r3, [sp, #12]
 8008a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a78:	443b      	add	r3, r7
 8008a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a7c:	e76a      	b.n	8008954 <_vfiprintf_r+0x78>
 8008a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a82:	460c      	mov	r4, r1
 8008a84:	2001      	movs	r0, #1
 8008a86:	e7a8      	b.n	80089da <_vfiprintf_r+0xfe>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	3401      	adds	r4, #1
 8008a8c:	9305      	str	r3, [sp, #20]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	f04f 0c0a 	mov.w	ip, #10
 8008a94:	4620      	mov	r0, r4
 8008a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a9a:	3a30      	subs	r2, #48	@ 0x30
 8008a9c:	2a09      	cmp	r2, #9
 8008a9e:	d903      	bls.n	8008aa8 <_vfiprintf_r+0x1cc>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0c6      	beq.n	8008a32 <_vfiprintf_r+0x156>
 8008aa4:	9105      	str	r1, [sp, #20]
 8008aa6:	e7c4      	b.n	8008a32 <_vfiprintf_r+0x156>
 8008aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aac:	4604      	mov	r4, r0
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e7f0      	b.n	8008a94 <_vfiprintf_r+0x1b8>
 8008ab2:	ab03      	add	r3, sp, #12
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <_vfiprintf_r+0x228>)
 8008aba:	a904      	add	r1, sp, #16
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7fb feb9 	bl	8004834 <_printf_float>
 8008ac2:	4607      	mov	r7, r0
 8008ac4:	1c78      	adds	r0, r7, #1
 8008ac6:	d1d6      	bne.n	8008a76 <_vfiprintf_r+0x19a>
 8008ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aca:	07d9      	lsls	r1, r3, #31
 8008acc:	d405      	bmi.n	8008ada <_vfiprintf_r+0x1fe>
 8008ace:	89ab      	ldrh	r3, [r5, #12]
 8008ad0:	059a      	lsls	r2, r3, #22
 8008ad2:	d402      	bmi.n	8008ada <_vfiprintf_r+0x1fe>
 8008ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ad6:	f7fc fe1d 	bl	8005714 <__retarget_lock_release_recursive>
 8008ada:	89ab      	ldrh	r3, [r5, #12]
 8008adc:	065b      	lsls	r3, r3, #25
 8008ade:	f53f af1f 	bmi.w	8008920 <_vfiprintf_r+0x44>
 8008ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ae4:	e71e      	b.n	8008924 <_vfiprintf_r+0x48>
 8008ae6:	ab03      	add	r3, sp, #12
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	462a      	mov	r2, r5
 8008aec:	4b05      	ldr	r3, [pc, #20]	@ (8008b04 <_vfiprintf_r+0x228>)
 8008aee:	a904      	add	r1, sp, #16
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7fc f937 	bl	8004d64 <_printf_i>
 8008af6:	e7e4      	b.n	8008ac2 <_vfiprintf_r+0x1e6>
 8008af8:	080091b9 	.word	0x080091b9
 8008afc:	080091c3 	.word	0x080091c3
 8008b00:	08004835 	.word	0x08004835
 8008b04:	080088b9 	.word	0x080088b9
 8008b08:	080091bf 	.word	0x080091bf

08008b0c <__swbuf_r>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	460e      	mov	r6, r1
 8008b10:	4614      	mov	r4, r2
 8008b12:	4605      	mov	r5, r0
 8008b14:	b118      	cbz	r0, 8008b1e <__swbuf_r+0x12>
 8008b16:	6a03      	ldr	r3, [r0, #32]
 8008b18:	b90b      	cbnz	r3, 8008b1e <__swbuf_r+0x12>
 8008b1a:	f7fc fce3 	bl	80054e4 <__sinit>
 8008b1e:	69a3      	ldr	r3, [r4, #24]
 8008b20:	60a3      	str	r3, [r4, #8]
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	071a      	lsls	r2, r3, #28
 8008b26:	d501      	bpl.n	8008b2c <__swbuf_r+0x20>
 8008b28:	6923      	ldr	r3, [r4, #16]
 8008b2a:	b943      	cbnz	r3, 8008b3e <__swbuf_r+0x32>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 f82a 	bl	8008b88 <__swsetup_r>
 8008b34:	b118      	cbz	r0, 8008b3e <__swbuf_r+0x32>
 8008b36:	f04f 37ff 	mov.w	r7, #4294967295
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	6922      	ldr	r2, [r4, #16]
 8008b42:	1a98      	subs	r0, r3, r2
 8008b44:	6963      	ldr	r3, [r4, #20]
 8008b46:	b2f6      	uxtb	r6, r6
 8008b48:	4283      	cmp	r3, r0
 8008b4a:	4637      	mov	r7, r6
 8008b4c:	dc05      	bgt.n	8008b5a <__swbuf_r+0x4e>
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4628      	mov	r0, r5
 8008b52:	f7ff fa47 	bl	8007fe4 <_fflush_r>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1ed      	bne.n	8008b36 <__swbuf_r+0x2a>
 8008b5a:	68a3      	ldr	r3, [r4, #8]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	60a3      	str	r3, [r4, #8]
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	6022      	str	r2, [r4, #0]
 8008b66:	701e      	strb	r6, [r3, #0]
 8008b68:	6962      	ldr	r2, [r4, #20]
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d004      	beq.n	8008b7a <__swbuf_r+0x6e>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	07db      	lsls	r3, r3, #31
 8008b74:	d5e1      	bpl.n	8008b3a <__swbuf_r+0x2e>
 8008b76:	2e0a      	cmp	r6, #10
 8008b78:	d1df      	bne.n	8008b3a <__swbuf_r+0x2e>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7ff fa31 	bl	8007fe4 <_fflush_r>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d0d9      	beq.n	8008b3a <__swbuf_r+0x2e>
 8008b86:	e7d6      	b.n	8008b36 <__swbuf_r+0x2a>

08008b88 <__swsetup_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4b29      	ldr	r3, [pc, #164]	@ (8008c30 <__swsetup_r+0xa8>)
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	460c      	mov	r4, r1
 8008b92:	b118      	cbz	r0, 8008b9c <__swsetup_r+0x14>
 8008b94:	6a03      	ldr	r3, [r0, #32]
 8008b96:	b90b      	cbnz	r3, 8008b9c <__swsetup_r+0x14>
 8008b98:	f7fc fca4 	bl	80054e4 <__sinit>
 8008b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba0:	0719      	lsls	r1, r3, #28
 8008ba2:	d422      	bmi.n	8008bea <__swsetup_r+0x62>
 8008ba4:	06da      	lsls	r2, r3, #27
 8008ba6:	d407      	bmi.n	8008bb8 <__swsetup_r+0x30>
 8008ba8:	2209      	movs	r2, #9
 8008baa:	602a      	str	r2, [r5, #0]
 8008bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bb0:	81a3      	strh	r3, [r4, #12]
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb6:	e033      	b.n	8008c20 <__swsetup_r+0x98>
 8008bb8:	0758      	lsls	r0, r3, #29
 8008bba:	d512      	bpl.n	8008be2 <__swsetup_r+0x5a>
 8008bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bbe:	b141      	cbz	r1, 8008bd2 <__swsetup_r+0x4a>
 8008bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bc4:	4299      	cmp	r1, r3
 8008bc6:	d002      	beq.n	8008bce <__swsetup_r+0x46>
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f7fd fbf9 	bl	80063c0 <_free_r>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6063      	str	r3, [r4, #4]
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	f043 0308 	orr.w	r3, r3, #8
 8008be8:	81a3      	strh	r3, [r4, #12]
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	b94b      	cbnz	r3, 8008c02 <__swsetup_r+0x7a>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bf8:	d003      	beq.n	8008c02 <__swsetup_r+0x7a>
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f000 f883 	bl	8008d08 <__smakebuf_r>
 8008c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c06:	f013 0201 	ands.w	r2, r3, #1
 8008c0a:	d00a      	beq.n	8008c22 <__swsetup_r+0x9a>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	60a2      	str	r2, [r4, #8]
 8008c10:	6962      	ldr	r2, [r4, #20]
 8008c12:	4252      	negs	r2, r2
 8008c14:	61a2      	str	r2, [r4, #24]
 8008c16:	6922      	ldr	r2, [r4, #16]
 8008c18:	b942      	cbnz	r2, 8008c2c <__swsetup_r+0xa4>
 8008c1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c1e:	d1c5      	bne.n	8008bac <__swsetup_r+0x24>
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	0799      	lsls	r1, r3, #30
 8008c24:	bf58      	it	pl
 8008c26:	6962      	ldrpl	r2, [r4, #20]
 8008c28:	60a2      	str	r2, [r4, #8]
 8008c2a:	e7f4      	b.n	8008c16 <__swsetup_r+0x8e>
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	e7f7      	b.n	8008c20 <__swsetup_r+0x98>
 8008c30:	20000014 	.word	0x20000014

08008c34 <_raise_r>:
 8008c34:	291f      	cmp	r1, #31
 8008c36:	b538      	push	{r3, r4, r5, lr}
 8008c38:	4605      	mov	r5, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	d904      	bls.n	8008c48 <_raise_r+0x14>
 8008c3e:	2316      	movs	r3, #22
 8008c40:	6003      	str	r3, [r0, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c4a:	b112      	cbz	r2, 8008c52 <_raise_r+0x1e>
 8008c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c50:	b94b      	cbnz	r3, 8008c66 <_raise_r+0x32>
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f830 	bl	8008cb8 <_getpid_r>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c62:	f000 b817 	b.w	8008c94 <_kill_r>
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d00a      	beq.n	8008c80 <_raise_r+0x4c>
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	d103      	bne.n	8008c76 <_raise_r+0x42>
 8008c6e:	2316      	movs	r3, #22
 8008c70:	6003      	str	r3, [r0, #0]
 8008c72:	2001      	movs	r0, #1
 8008c74:	e7e7      	b.n	8008c46 <_raise_r+0x12>
 8008c76:	2100      	movs	r1, #0
 8008c78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4798      	blx	r3
 8008c80:	2000      	movs	r0, #0
 8008c82:	e7e0      	b.n	8008c46 <_raise_r+0x12>

08008c84 <raise>:
 8008c84:	4b02      	ldr	r3, [pc, #8]	@ (8008c90 <raise+0xc>)
 8008c86:	4601      	mov	r1, r0
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	f7ff bfd3 	b.w	8008c34 <_raise_r>
 8008c8e:	bf00      	nop
 8008c90:	20000014 	.word	0x20000014

08008c94 <_kill_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	@ (8008cb4 <_kill_r+0x20>)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	f7f9 f8ab 	bl	8001dfc <_kill>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d102      	bne.n	8008cb0 <_kill_r+0x1c>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b103      	cbz	r3, 8008cb0 <_kill_r+0x1c>
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	200004f4 	.word	0x200004f4

08008cb8 <_getpid_r>:
 8008cb8:	f7f9 b898 	b.w	8001dec <_getpid>

08008cbc <__swhatbuf_r>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	b096      	sub	sp, #88	@ 0x58
 8008cc8:	4615      	mov	r5, r2
 8008cca:	461e      	mov	r6, r3
 8008ccc:	da0d      	bge.n	8008cea <__swhatbuf_r+0x2e>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cd4:	f04f 0100 	mov.w	r1, #0
 8008cd8:	bf14      	ite	ne
 8008cda:	2340      	movne	r3, #64	@ 0x40
 8008cdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	6031      	str	r1, [r6, #0]
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	b016      	add	sp, #88	@ 0x58
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	466a      	mov	r2, sp
 8008cec:	f000 f848 	bl	8008d80 <_fstat_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	dbec      	blt.n	8008cce <__swhatbuf_r+0x12>
 8008cf4:	9901      	ldr	r1, [sp, #4]
 8008cf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cfe:	4259      	negs	r1, r3
 8008d00:	4159      	adcs	r1, r3
 8008d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d06:	e7eb      	b.n	8008ce0 <__swhatbuf_r+0x24>

08008d08 <__smakebuf_r>:
 8008d08:	898b      	ldrh	r3, [r1, #12]
 8008d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d0c:	079d      	lsls	r5, r3, #30
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	d507      	bpl.n	8008d24 <__smakebuf_r+0x1c>
 8008d14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	6163      	str	r3, [r4, #20]
 8008d20:	b003      	add	sp, #12
 8008d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d24:	ab01      	add	r3, sp, #4
 8008d26:	466a      	mov	r2, sp
 8008d28:	f7ff ffc8 	bl	8008cbc <__swhatbuf_r>
 8008d2c:	9f00      	ldr	r7, [sp, #0]
 8008d2e:	4605      	mov	r5, r0
 8008d30:	4639      	mov	r1, r7
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7fd fbb8 	bl	80064a8 <_malloc_r>
 8008d38:	b948      	cbnz	r0, 8008d4e <__smakebuf_r+0x46>
 8008d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d3e:	059a      	lsls	r2, r3, #22
 8008d40:	d4ee      	bmi.n	8008d20 <__smakebuf_r+0x18>
 8008d42:	f023 0303 	bic.w	r3, r3, #3
 8008d46:	f043 0302 	orr.w	r3, r3, #2
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	e7e2      	b.n	8008d14 <__smakebuf_r+0xc>
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	6020      	str	r0, [r4, #0]
 8008d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	9b01      	ldr	r3, [sp, #4]
 8008d5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d5e:	b15b      	cbz	r3, 8008d78 <__smakebuf_r+0x70>
 8008d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d64:	4630      	mov	r0, r6
 8008d66:	f000 f81d 	bl	8008da4 <_isatty_r>
 8008d6a:	b128      	cbz	r0, 8008d78 <__smakebuf_r+0x70>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f023 0303 	bic.w	r3, r3, #3
 8008d72:	f043 0301 	orr.w	r3, r3, #1
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	431d      	orrs	r5, r3
 8008d7c:	81a5      	strh	r5, [r4, #12]
 8008d7e:	e7cf      	b.n	8008d20 <__smakebuf_r+0x18>

08008d80 <_fstat_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	@ (8008da0 <_fstat_r+0x20>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f7f9 f895 	bl	8001ebc <_fstat>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d102      	bne.n	8008d9c <_fstat_r+0x1c>
 8008d96:	682b      	ldr	r3, [r5, #0]
 8008d98:	b103      	cbz	r3, 8008d9c <_fstat_r+0x1c>
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	200004f4 	.word	0x200004f4

08008da4 <_isatty_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d06      	ldr	r5, [pc, #24]	@ (8008dc0 <_isatty_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7f9 f894 	bl	8001edc <_isatty>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_isatty_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_isatty_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	200004f4 	.word	0x200004f4

08008dc4 <_init>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr

08008dd0 <_fini>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr
